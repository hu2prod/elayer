// Generated by IcedCoffeeScript 108.0.11
(function() {
  var STATE_FL, STATE_IG, STATE_NA, STATE_RQ, counter_stub, hash_key_list, i, state_stub, _i, _j;

  require('fy');

  STATE_NA = 0;

  STATE_RQ = 1;

  STATE_IG = 2;

  STATE_FL = 3;

  state_stub = [];

  for (i = _i = 0; _i < 53; i = ++_i) {
    state_stub.push(STATE_NA);
  }

  counter_stub = [];

  for (i = _j = 0; _j < 523; i = ++_j) {
    counter_stub.push(0);
  }

  hash_key_list = ["_", "Xdent", "tok_identifier", "tok_bin_op", "tok_un_op", "tok_decimal_literal", "tok_octal_literal", "tok_hexadecimal_literal", "tok_binary_literal", "tok_float_literal", "tok_string_sq", "tok_string_dq", "tok_fn_arrow", "tok_inline_comment", "tok_multiline_comment", "tok_bracket_square", "tok_at", "tok_pair_delimiter", "tok_bracket_curve", "tok_bracket_round", "tok_comma", "const", "num_const", "str_const", "rvalue", "stmt", "lvalue", "block", "indent", "stmt_plus", "dedent", "bin_op", "pre_op", "post_op", "eol", "type", "struct_init_kv", "struct_init_list", "struct_init", "array_init_list", "array_init", "if_tail_stmt", "switch_tail_stmt", "ranger", "fn_decl_arg", "fn_decl_arg_list", "return", "fn_call_arg_list", "type_list", "type_nest", "type_field_kv", "type_field_kv_list", "type_field"];

  this.Parser = (function() {
    function Parser() {}

    Parser.prototype.length = 0;

    Parser.prototype.cache = [];

    Parser.prototype.state = [];

    Parser.prototype.counter = [];

    Parser.prototype.Node = null;

    Parser.prototype.proxy = null;

    Parser.prototype.proxy2 = null;

    Parser.prototype.go = function(token_list_list) {
      var arg_list, filter_list, idx, k, list, max_token, mx_hash_stub, node, stub, stub_idx, token, token_list, v, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _bw, _bx, _k, _l, _len, _len1, _len10, _len11, _len12, _len13, _len14, _len15, _len16, _len17, _len18, _len19, _len2, _len20, _len21, _len22, _len23, _len24, _len25, _len26, _len27, _len28, _len29, _len3, _len30, _len31, _len32, _len33, _len34, _len35, _len36, _len37, _len38, _len39, _len4, _len40, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len7, _len8, _len9, _m, _n, _o, _p, _pos_list, _q, _r, _ref, _ref1, _s, _t, _u, _v, _w, _x, _y, _z;
      this.cache = [];
      this.state = [];
      this.counter = [];
      this.length = token_list_list.length;
      if (this.length === 0) {
        return [];
      }
      this.Node = (_ref = token_list_list[0]) != null ? (_ref1 = _ref[0]) != null ? _ref1.constructor : void 0 : void 0;
      this.proxy = new this.Node;
      this.proxy2 = new this.Node;
      for (idx = _k = 0, _len = token_list_list.length; _k < _len; idx = ++_k) {
        token_list = token_list_list[idx];
        stub = new Array(306);
        for (k = _l = 0; _l < 306; k = ++_l) {
          stub[k] = [];
        }
        for (_m = 0, _len1 = token_list.length; _m < _len1; _m++) {
          token = token_list[_m];
          token.a = idx;
          token.b = idx + 1;
          if (-1 !== (stub_idx = hash_key_list.idx(token.mx_hash.hash_key))) {
            stub[stub_idx].push(token);
          }
          stub[0].upush(token);
        }
        this.cache.push(stub);
        this.state.push(state_stub.slice());
        this.counter.push(counter_stub.slice());
      }
      for (idx = _n = 0, _len2 = token_list_list.length; _n < _len2; idx = ++_n) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u8";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _o = 0, _len3 = token_list_list.length; _o < _len3; idx = ++_o) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u9";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _p = 0, _len4 = token_list_list.length; _p < _len4; idx = ++_p) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u10";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _q = 0, _len5 = token_list_list.length; _q < _len5; idx = ++_q) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u11";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _r = 0, _len6 = token_list_list.length; _r < _len6; idx = ++_r) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u12";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _s = 0, _len7 = token_list_list.length; _s < _len7; idx = ++_s) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSX_priorityE4_tail_spaceEX1Xtail_space__left_assocE1_eolEX1Xeol__u13";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["left_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _t = 0, _len8 = token_list_list.length; _t < _len8; idx = ++_t) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u14";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _u = 0, _len9 = token_list_list.length; _u < _len9; idx = ++_u) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u15";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _v = 0, _len10 = token_list_list.length; _v < _len10; idx = ++_v) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u16";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _w = 0, _len11 = token_list_list.length; _w < _len11; idx = ++_w) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u17";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _x = 0, _len12 = token_list_list.length; _x < _len12; idx = ++_x) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u18";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _y = 0, _len13 = token_list_list.length; _y < _len13; idx = ++_y) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u19";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _z = 0, _len14 = token_list_list.length; _z < _len14; idx = ++_z) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u20";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aa = 0, _len15 = token_list_list.length; _aa < _len15; idx = ++_aa) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u21";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ab = 0, _len16 = token_list_list.length; _ab < _len16; idx = ++_ab) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u22";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ac = 0, _len17 = token_list_list.length; _ac < _len17; idx = ++_ac) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u23";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ad = 0, _len18 = token_list_list.length; _ad < _len18; idx = ++_ad) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u24";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ae = 0, _len19 = token_list_list.length; _ae < _len19; idx = ++_ae) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u25";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _af = 0, _len20 = token_list_list.length; _af < _len20; idx = ++_af) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u26";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ag = 0, _len21 = token_list_list.length; _ag < _len21; idx = ++_ag) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u27";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ah = 0, _len22 = token_list_list.length; _ah < _len22; idx = ++_ah) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "==") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u28";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ai = 0, _len23 = token_list_list.length; _ai < _len23; idx = ++_ai) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u29";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aj = 0, _len24 = token_list_list.length; _aj < _len24; idx = ++_aj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u30";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ak = 0, _len25 = token_list_list.length; _ak < _len25; idx = ++_ak) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u31";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _al = 0, _len26 = token_list_list.length; _al < _len26; idx = ++_al) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u32";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _am = 0, _len27 = token_list_list.length; _am < _len27; idx = ++_am) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u33";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _an = 0, _len28 = token_list_list.length; _an < _len28; idx = ++_an) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u34";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ao = 0, _len29 = token_list_list.length; _ao < _len29; idx = ++_ao) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u35";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ap = 0, _len30 = token_list_list.length; _ap < _len30; idx = ++_ap) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u36";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aq = 0, _len31 = token_list_list.length; _aq < _len31; idx = ++_aq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u37";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ar = 0, _len32 = token_list_list.length; _ar < _len32; idx = ++_ar) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u38";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _as = 0, _len33 = token_list_list.length; _as < _len33; idx = ++_as) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u39";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _at = 0, _len34 = token_list_list.length; _at < _len34; idx = ++_at) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u40";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _au = 0, _len35 = token_list_list.length; _au < _len35; idx = ++_au) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u41";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _av = 0, _len36 = token_list_list.length; _av < _len36; idx = ++_av) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u42";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aw = 0, _len37 = token_list_list.length; _aw < _len37; idx = ++_aw) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u43";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ax = 0, _len38 = token_list_list.length; _ax < _len38; idx = ++_ax) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u44";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ay = 0, _len39 = token_list_list.length; _ay < _len39; idx = ++_ay) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u45";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _az = 0, _len40 = token_list_list.length; _az < _len40; idx = ++_az) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u46";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ba = 0, _len41 = token_list_list.length; _ba < _len41; idx = ++_ba) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u47";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bb = 0, _len42 = token_list_list.length; _bb < _len42; idx = ++_bb) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u48";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bc = 0, _len43 = token_list_list.length; _bc < _len43; idx = ++_bc) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u49";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bd = 0, _len44 = token_list_list.length; _bd < _len44; idx = ++_bd) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u50";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _be = 0, _len45 = token_list_list.length; _be < _len45; idx = ++_be) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u51";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bf = 0, _len46 = token_list_list.length; _bf < _len46; idx = ++_bf) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u52";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bg = 0, _len47 = token_list_list.length; _bg < _len47; idx = ++_bg) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u53";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bh = 0, _len48 = token_list_list.length; _bh < _len48; idx = ++_bh) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u54";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bi = 0, _len49 = token_list_list.length; _bi < _len49; idx = ++_bi) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u55";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bj = 0, _len50 = token_list_list.length; _bj < _len50; idx = ++_bj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE1__XX1Xtail_space_u62";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bk = 0, _len51 = token_list_list.length; _bk < _len51; idx = ++_bk) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__XX1Xtail_space_u63";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bl = 0, _len52 = token_list_list.length; _bl < _len52; idx = ++_bl) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u64";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bm = 0, _len53 = token_list_list.length; _bm < _len53; idx = ++_bm) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u65";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bn = 0, _len54 = token_list_list.length; _bn < _len54; idx = ++_bn) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u66";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bo = 0, _len55 = token_list_list.length; _bo < _len55; idx = ++_bo) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "~") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u67";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bp = 0, _len56 = token_list_list.length; _bp < _len56; idx = ++_bp) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "not") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnotX_priorityE1__u68";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bq = 0, _len57 = token_list_list.length; _bq < _len57; idx = ++_bq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "new") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnewX_priorityE15__u69";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _br = 0, _len58 = token_list_list.length; _br < _len58; idx = ++_br) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "delete") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XdeleteX_priorityE15__u70";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bs = 0, _len59 = token_list_list.length; _bs < _len59; idx = ++_bs) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u72";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bt = 0, _len60 = token_list_list.length; _bt < _len60; idx = ++_bt) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u73";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bu = 0, _len61 = token_list_list.length; _bu < _len61; idx = ++_bu) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "[QUESTION]") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXQUESTIONXX_priorityE1__u74";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bv = 0, _len62 = token_list_list.length; _bv < _len62; idx = ++_bv) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '..') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_ultEmacro_tiEmacro_eolE1__u122";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 43;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[43] == null) {
          _pos_list[43] = [];
        }
        _pos_list[43].push(node);
      }
      for (idx = _bw = 0, _len63 = token_list_list.length; _bw < _len63; idx = ++_bw) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '...') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_ultEmacro_tiEmacro_eolE1__u123";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 43;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[43] == null) {
          _pos_list[43] = [];
        }
        _pos_list[43].push(node);
      }
      this.fsm();
      list = this.cache[0][29];
      max_token = token_list_list.length;
      filter_list = [];
      for (_bx = 0, _len64 = list.length; _bx < _len64; _bx++) {
        v = list[_bx];
        if (v.b === max_token) {
          this.node_fix(v);
          filter_list.push(v);
        }
      }
      return filter_list;
    };

    Parser.prototype.node_fix = function(node) {
      var walk;
      walk = function(node) {
        var v, vv_list, _k, _len, _ref;
        vv_list = [];
        _ref = node.value_array;
        for (_k = 0, _len = _ref.length; _k < _len; _k++) {
          v = _ref[_k];
          walk(v);
          vv_list.push(v.value_view || v.value);
        }
        node.value_view = vv_list.join(' ');
      };
      walk(node);
    };

    Parser.prototype.fsm = function() {
      var FAcache, FAcounter, FAstate, append_list, arg_list, b_0, b_1, b_10, b_11, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, chk_len, cur, hki, hyp_list_1, hyp_list_2, hyp_list_3, hyp_list_4, hyp_list_5, idx_1, length, list_1, list_10, list_11, list_2, list_3, list_4, list_5, list_6, list_7, list_8, list_9, mx_hash_stub, node, node_list, old_node, only_new, request_make, ret_list, safe_collect, stack, start_pos, state, state_1, state_10, state_11, state_2, state_3, state_4, state_5, state_6, state_7, state_8, state_9, tok, tok_list, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _bw, _bx, _by, _bz, _ca, _cb, _cc, _cd, _ce, _cf, _cg, _ch, _ci, _cj, _ck, _cl, _cm, _cn, _co, _cp, _cq, _cr, _cs, _ct, _cu, _cv, _cw, _cx, _cy, _cz, _da, _db, _dc, _dd, _de, _df, _dg, _dh, _di, _dj, _dk, _dl, _dm, _dn, _do, _dp, _dq, _dr, _ds, _dt, _du, _dv, _dw, _dx, _dy, _dz, _ea, _eb, _ec, _ed, _ee, _ef, _eg, _eh, _ei, _ej, _ek, _el, _em, _en, _eo, _ep, _eq, _er, _es, _et, _eu, _ev, _ew, _ex, _ey, _ez, _fa, _fb, _fc, _fd, _fe, _ff, _fg, _fh, _fi, _fj, _fk, _fl, _fm, _fn, _fo, _fp, _fq, _fr, _fs, _ft, _fu, _fv, _fw, _fx, _fy, _fz, _ga, _gb, _gc, _gd, _ge, _gf, _gg, _gh, _gi, _gj, _gk, _gl, _gm, _gn, _go, _gp, _gq, _gr, _gs, _gt, _gu, _gv, _gw, _gx, _gy, _gz, _ha, _hb, _hc, _hd, _he, _hf, _hg, _hh, _hi, _hj, _hk, _hl, _hm, _hn, _ho, _hp, _hq, _hr, _hs, _ht, _hu, _hv, _hw, _hx, _hy, _hz, _i_2, _i_3, _i_4, _i_5, _ia, _ib, _ic, _id, _ie, _if, _ig, _ih, _ii, _ij, _ik, _il, _im, _in, _io, _ip, _iq, _ir, _is, _it, _iu, _iv, _iw, _ix, _iy, _iz, _ja, _jb, _jc, _jd, _je, _jf, _jg, _jh, _ji, _jj, _jk, _jl, _jm, _jn, _jo, _jp, _jq, _jr, _js, _jt, _ju, _jv, _jw, _jx, _jy, _jz, _k, _ka, _kb, _kc, _kd, _ke, _kf, _kg, _kh, _ki, _kj, _kk, _kl, _km, _kn, _ko, _kp, _kq, _kr, _ks, _kt, _ku, _kv, _kw, _kx, _ky, _kz, _l, _la, _lb, _lc, _ld, _le, _len, _len1, _len10, _len100, _len101, _len102, _len103, _len104, _len105, _len106, _len107, _len108, _len109, _len11, _len110, _len111, _len112, _len113, _len114, _len115, _len116, _len117, _len118, _len119, _len12, _len120, _len121, _len122, _len123, _len124, _len125, _len126, _len127, _len128, _len129, _len13, _len130, _len131, _len132, _len133, _len134, _len135, _len136, _len137, _len138, _len139, _len14, _len140, _len141, _len142, _len143, _len144, _len145, _len146, _len147, _len148, _len149, _len15, _len150, _len151, _len152, _len153, _len154, _len155, _len156, _len157, _len158, _len159, _len16, _len160, _len161, _len162, _len163, _len164, _len165, _len166, _len167, _len168, _len169, _len17, _len170, _len171, _len172, _len173, _len174, _len175, _len176, _len177, _len178, _len179, _len18, _len180, _len181, _len182, _len183, _len184, _len185, _len186, _len187, _len188, _len189, _len19, _len190, _len191, _len192, _len193, _len194, _len195, _len196, _len197, _len198, _len199, _len2, _len20, _len200, _len201, _len202, _len203, _len204, _len205, _len206, _len207, _len208, _len209, _len21, _len210, _len211, _len212, _len213, _len214, _len215, _len216, _len217, _len218, _len219, _len22, _len220, _len221, _len222, _len223, _len224, _len225, _len226, _len227, _len228, _len229, _len23, _len230, _len231, _len232, _len233, _len234, _len235, _len236, _len237, _len238, _len239, _len24, _len240, _len241, _len242, _len243, _len244, _len245, _len246, _len247, _len248, _len249, _len25, _len250, _len251, _len252, _len253, _len254, _len255, _len256, _len257, _len258, _len259, _len26, _len260, _len261, _len262, _len263, _len264, _len265, _len266, _len267, _len268, _len269, _len27, _len270, _len271, _len272, _len273, _len274, _len275, _len276, _len277, _len278, _len279, _len28, _len280, _len281, _len282, _len283, _len284, _len285, _len286, _len287, _len288, _len289, _len29, _len290, _len291, _len292, _len293, _len294, _len295, _len296, _len297, _len298, _len299, _len3, _len30, _len300, _len301, _len302, _len303, _len304, _len305, _len306, _len307, _len308, _len309, _len31, _len310, _len311, _len312, _len313, _len314, _len315, _len316, _len317, _len318, _len319, _len32, _len320, _len321, _len322, _len323, _len324, _len325, _len326, _len327, _len328, _len329, _len33, _len330, _len331, _len332, _len333, _len334, _len335, _len336, _len337, _len338, _len339, _len34, _len340, _len341, _len342, _len343, _len344, _len345, _len346, _len347, _len348, _len349, _len35, _len350, _len351, _len352, _len353, _len354, _len355, _len356, _len357, _len358, _len359, _len36, _len360, _len361, _len362, _len363, _len364, _len365, _len366, _len367, _len368, _len369, _len37, _len370, _len371, _len372, _len373, _len374, _len375, _len376, _len377, _len378, _len379, _len38, _len380, _len381, _len382, _len383, _len384, _len385, _len386, _len387, _len388, _len389, _len39, _len390, _len391, _len392, _len393, _len394, _len395, _len396, _len397, _len398, _len399, _len4, _len40, _len400, _len401, _len402, _len403, _len404, _len405, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len65, _len66, _len67, _len68, _len69, _len7, _len70, _len71, _len72, _len73, _len74, _len75, _len76, _len77, _len78, _len79, _len8, _len80, _len81, _len82, _len83, _len84, _len85, _len86, _len87, _len88, _len89, _len9, _len90, _len91, _len92, _len93, _len94, _len95, _len96, _len97, _len98, _len99, _lf, _lg, _lh, _li, _lj, _lk, _ll, _lm, _ln, _lo, _lp, _lq, _lr, _ls, _lt, _lu, _lv, _lw, _lx, _ly, _lz, _m, _ma, _mb, _mc, _md, _me, _mf, _mg, _mh, _mi, _mj, _mk, _ml, _mm, _mn, _mo, _mp, _mq, _mr, _ms, _mt, _mu, _mv, _mw, _mx, _my, _mz, _n, _na, _nb, _nc, _nd, _ne, _nf, _ng, _nh, _ni, _nj, _nk, _nl, _nm, _nn, _no, _np, _nq, _nr, _ns, _nt, _nu, _nv, _nw, _nx, _ny, _nz, _o, _oa, _ob, _oc, _od, _oe, _of, _og, _oh, _oi, _oj, _ok, _ol, _om, _on, _oo, _op, _oq, _or, _os, _ot, _ou, _ov, _ow, _ox, _oy, _oz, _p, _pa, _pb, _pc, _pd, _pe, _pf, _pg, _ph, _pi, _pj, _pk, _pl, _pm, _pn, _po, _pp, _pq, _pr, _ps, _pt, _pu, _pv, _pw, _px, _py, _pz, _q, _qa, _qb, _qc, _qd, _qe, _qf, _qg, _qh, _qi, _qj, _qk, _ql, _qm, _qn, _qo, _qp, _qq, _qr, _qs, _qt, _qu, _qv, _qw, _qx, _qy, _qz, _r, _ra, _rb, _rc, _rd, _re, _ref, _ref1, _ref10, _ref100, _ref101, _ref102, _ref103, _ref104, _ref105, _ref106, _ref107, _ref108, _ref109, _ref11, _ref110, _ref111, _ref112, _ref113, _ref114, _ref115, _ref116, _ref117, _ref118, _ref119, _ref12, _ref120, _ref121, _ref122, _ref123, _ref124, _ref125, _ref126, _ref127, _ref128, _ref129, _ref13, _ref130, _ref131, _ref132, _ref133, _ref134, _ref135, _ref136, _ref137, _ref138, _ref139, _ref14, _ref140, _ref141, _ref142, _ref143, _ref144, _ref145, _ref146, _ref147, _ref148, _ref149, _ref15, _ref150, _ref151, _ref152, _ref153, _ref154, _ref155, _ref156, _ref157, _ref158, _ref159, _ref16, _ref160, _ref161, _ref162, _ref163, _ref164, _ref165, _ref166, _ref167, _ref168, _ref169, _ref17, _ref170, _ref171, _ref172, _ref173, _ref174, _ref175, _ref176, _ref177, _ref178, _ref179, _ref18, _ref180, _ref181, _ref182, _ref183, _ref184, _ref185, _ref186, _ref187, _ref188, _ref189, _ref19, _ref190, _ref191, _ref192, _ref193, _ref194, _ref195, _ref196, _ref197, _ref198, _ref199, _ref2, _ref20, _ref200, _ref201, _ref202, _ref203, _ref204, _ref205, _ref206, _ref207, _ref208, _ref209, _ref21, _ref210, _ref211, _ref212, _ref213, _ref214, _ref215, _ref216, _ref217, _ref218, _ref219, _ref22, _ref220, _ref221, _ref222, _ref223, _ref224, _ref225, _ref226, _ref227, _ref228, _ref229, _ref23, _ref230, _ref231, _ref232, _ref233, _ref234, _ref235, _ref236, _ref237, _ref238, _ref239, _ref24, _ref240, _ref241, _ref242, _ref243, _ref244, _ref245, _ref246, _ref247, _ref248, _ref249, _ref25, _ref250, _ref251, _ref252, _ref253, _ref254, _ref255, _ref256, _ref257, _ref258, _ref259, _ref26, _ref260, _ref261, _ref262, _ref263, _ref264, _ref265, _ref266, _ref267, _ref268, _ref269, _ref27, _ref270, _ref271, _ref272, _ref273, _ref274, _ref275, _ref276, _ref277, _ref278, _ref279, _ref28, _ref280, _ref281, _ref282, _ref283, _ref284, _ref285, _ref286, _ref287, _ref288, _ref289, _ref29, _ref290, _ref291, _ref292, _ref293, _ref294, _ref295, _ref296, _ref297, _ref298, _ref299, _ref3, _ref30, _ref300, _ref301, _ref302, _ref303, _ref304, _ref305, _ref306, _ref307, _ref308, _ref309, _ref31, _ref310, _ref311, _ref312, _ref313, _ref314, _ref315, _ref316, _ref317, _ref318, _ref319, _ref32, _ref320, _ref321, _ref322, _ref323, _ref324, _ref325, _ref326, _ref327, _ref328, _ref329, _ref33, _ref330, _ref331, _ref332, _ref333, _ref334, _ref335, _ref336, _ref337, _ref338, _ref339, _ref34, _ref340, _ref341, _ref342, _ref343, _ref344, _ref345, _ref346, _ref347, _ref348, _ref349, _ref35, _ref350, _ref351, _ref352, _ref353, _ref354, _ref355, _ref356, _ref36, _ref37, _ref38, _ref39, _ref4, _ref40, _ref41, _ref42, _ref43, _ref44, _ref45, _ref46, _ref47, _ref48, _ref49, _ref5, _ref50, _ref51, _ref52, _ref53, _ref54, _ref55, _ref56, _ref57, _ref58, _ref59, _ref6, _ref60, _ref61, _ref62, _ref63, _ref64, _ref65, _ref66, _ref67, _ref68, _ref69, _ref7, _ref70, _ref71, _ref72, _ref73, _ref74, _ref75, _ref76, _ref77, _ref78, _ref79, _ref8, _ref80, _ref81, _ref82, _ref83, _ref84, _ref85, _ref86, _ref87, _ref88, _ref89, _ref9, _ref90, _ref91, _ref92, _ref93, _ref94, _ref95, _ref96, _ref97, _ref98, _ref99, _rf, _rg, _rh, _ri, _rj, _rk, _rl, _rm, _rn, _ro, _rp, _rq, _rr, _rs, _rt, _ru, _rv, _rw, _rx, _ry, _rz, _s, _sa, _sb, _sc, _sd, _se, _sf, _sg, _sh, _si, _sj, _sk, _sl, _sm, _sn, _so, _sp, _sq, _sr, _ss, _st, _su, _sv, _sw, _sx, _sy, _sz, _t, _ta, _tb, _tc, _td, _te, _tf, _tg, _th, _ti, _tj, _tk, _tl, _tm, _tn, _to, _tp, _tq, _tr, _ts, _tt, _tu, _tv, _tw, _tx, _ty, _tz, _u, _ua, _ub, _uc, _ud, _ue, _uf, _ug, _uh, _ui, _uj, _uk, _ul, _um, _un, _uo, _up, _uq, _ur, _us, _ut, _uu, _uv, _uw, _ux, _uy, _uz, _v, _va, _vb, _vc, _vd, _ve, _vf, _vg, _vh, _vi, _vj, _vk, _vl, _vm, _vn, _vo, _vp, _vq, _vr, _vs, _vt, _vu, _vv, _vw, _vx, _vy, _vz, _w, _wa, _wb, _wc, _wd, _we, _wf, _wg, _wh, _wi, _wj, _wk, _wl, _wm, _wn, _wo, _wp, _wq, _wr, _ws, _wt, _wu, _wv, _ww, _wx, _wy, _wz, _x, _xa, _xb, _xc, _xd, _xe, _xf, _xg, _xh, _xi, _xj, _xk, _xl, _xm, _xn, _xo, _xp, _xq, _xr, _xs, _xt, _xu, _xv, _xw, _xx, _xy, _xz, _y, _ya, _yb, _yc, _yd, _ye, _yf, _yg, _yh, _yi, _yj, _yk, _yl, _ym, _yn, _yo, _yp, _yq, _yr, _ys, _yt, _yu, _yv, _yw, _yx, _yy, _yz, _z, _za, _zb, _zc, _zd, _ze, _zf, _zg, _zh, _zi, _zj, _zk, _zl, _zm, _zn, _zo, _zp, _zq, _zr, _zs, _zt, _zu;
      FAcache = this.cache;
      FAstate = this.state;
      FAcounter = this.counter;
      stack = [[29, 0, 0]];
      FAstate[0][29] = STATE_RQ;
      length = this.length;
      request_make = function(token_hki, pos, is_new) {
        var state;
        state = FAstate[pos][token_hki];
        switch (state) {
          case 0:
            if (is_new) {

              /* !pragma coverage-skip-block */
              throw new Error('invalid call. STATE_NA + is_new');
            }
            stack.push([token_hki, pos, is_new]);
            FAstate[pos][token_hki] = STATE_RQ;
            return true;
          case 1:
            FAstate[pos][token_hki] = STATE_IG;
            return false;
          case 2:
            return false;
          case 3:
            FAstate[pos][token_hki] = STATE_RQ;
            stack.push([token_hki, pos, is_new]);
            return true;
        }
      };
      safe_collect = function(dst, src) {
        var c_varr, candidate, chk, chk_v, found, idx, match, _k, _l, _len, _len1, _len2, _m, _ref;
        for (_k = 0, _len = src.length; _k < _len; _k++) {
          candidate = src[_k];
          found = false;
          for (_l = 0, _len1 = dst.length; _l < _len1; _l++) {
            chk = dst[_l];
            c_varr = candidate.value_array;
            if (chk.value_array.length !== c_varr.length) {
              continue;
            }
            match = true;
            _ref = chk.value_array;
            for (idx = _m = 0, _len2 = _ref.length; _m < _len2; idx = ++_m) {
              chk_v = _ref[idx];
              if (chk_v !== c_varr[idx]) {
                match = false;
                break;
              }
            }
            if (match) {
              found = true;
              break;
            }
          }
          if (!found) {
            dst.push(candidate);
          }
        }
      };
      while (cur = stack.pop()) {
        hki = cur[0], start_pos = cur[1], only_new = cur[2];
        if (start_pos >= length) {
          continue;
        }
        switch (hki) {
          case 0:

            /* token__ queue */
            stack.push([53, start_pos, only_new]);
            break;
          case 53:

            /* token__ collect */
            node_list = [];
            FAstate[start_pos][0] = STATE_FL;
            FAcache[start_pos][0].uappend(node_list);
            break;
          case 1:

            /* token_Xdent queue */
            stack.push([54, start_pos, only_new]);
            break;
          case 54:

            /* token_Xdent collect */
            node_list = [];
            FAstate[start_pos][1] = STATE_FL;
            FAcache[start_pos][1].uappend(node_list);
            break;
          case 2:

            /* token_tok_identifier queue */
            stack.push([55, start_pos, only_new]);
            break;
          case 55:

            /* token_tok_identifier collect */
            node_list = [];
            FAstate[start_pos][2] = STATE_FL;
            FAcache[start_pos][2].uappend(node_list);
            break;
          case 3:

            /* token_tok_bin_op queue */
            stack.push([56, start_pos, only_new]);
            break;
          case 56:

            /* token_tok_bin_op collect */
            node_list = [];
            FAstate[start_pos][3] = STATE_FL;
            FAcache[start_pos][3].uappend(node_list);
            break;
          case 4:

            /* token_tok_un_op queue */
            stack.push([57, start_pos, only_new]);
            break;
          case 57:

            /* token_tok_un_op collect */
            node_list = [];
            FAstate[start_pos][4] = STATE_FL;
            FAcache[start_pos][4].uappend(node_list);
            break;
          case 5:

            /* token_tok_decimal_literal queue */
            stack.push([58, start_pos, only_new]);
            break;
          case 58:

            /* token_tok_decimal_literal collect */
            node_list = [];
            FAstate[start_pos][5] = STATE_FL;
            FAcache[start_pos][5].uappend(node_list);
            break;
          case 6:

            /* token_tok_octal_literal queue */
            stack.push([59, start_pos, only_new]);
            break;
          case 59:

            /* token_tok_octal_literal collect */
            node_list = [];
            FAstate[start_pos][6] = STATE_FL;
            FAcache[start_pos][6].uappend(node_list);
            break;
          case 7:

            /* token_tok_hexadecimal_literal queue */
            stack.push([60, start_pos, only_new]);
            break;
          case 60:

            /* token_tok_hexadecimal_literal collect */
            node_list = [];
            FAstate[start_pos][7] = STATE_FL;
            FAcache[start_pos][7].uappend(node_list);
            break;
          case 8:

            /* token_tok_binary_literal queue */
            stack.push([61, start_pos, only_new]);
            break;
          case 61:

            /* token_tok_binary_literal collect */
            node_list = [];
            FAstate[start_pos][8] = STATE_FL;
            FAcache[start_pos][8].uappend(node_list);
            break;
          case 9:

            /* token_tok_float_literal queue */
            stack.push([62, start_pos, only_new]);
            break;
          case 62:

            /* token_tok_float_literal collect */
            node_list = [];
            FAstate[start_pos][9] = STATE_FL;
            FAcache[start_pos][9].uappend(node_list);
            break;
          case 10:

            /* token_tok_string_sq queue */
            stack.push([63, start_pos, only_new]);
            break;
          case 63:

            /* token_tok_string_sq collect */
            node_list = [];
            FAstate[start_pos][10] = STATE_FL;
            FAcache[start_pos][10].uappend(node_list);
            break;
          case 11:

            /* token_tok_string_dq queue */
            stack.push([64, start_pos, only_new]);
            break;
          case 64:

            /* token_tok_string_dq collect */
            node_list = [];
            FAstate[start_pos][11] = STATE_FL;
            FAcache[start_pos][11].uappend(node_list);
            break;
          case 12:

            /* token_tok_fn_arrow queue */
            stack.push([65, start_pos, only_new]);
            break;
          case 65:

            /* token_tok_fn_arrow collect */
            node_list = [];
            FAstate[start_pos][12] = STATE_FL;
            FAcache[start_pos][12].uappend(node_list);
            break;
          case 13:

            /* token_tok_inline_comment queue */
            stack.push([66, start_pos, only_new]);
            break;
          case 66:

            /* token_tok_inline_comment collect */
            node_list = [];
            FAstate[start_pos][13] = STATE_FL;
            FAcache[start_pos][13].uappend(node_list);
            break;
          case 14:

            /* token_tok_multiline_comment queue */
            stack.push([67, start_pos, only_new]);
            break;
          case 67:

            /* token_tok_multiline_comment collect */
            node_list = [];
            FAstate[start_pos][14] = STATE_FL;
            FAcache[start_pos][14].uappend(node_list);
            break;
          case 15:

            /* token_tok_bracket_square queue */
            stack.push([68, start_pos, only_new]);
            break;
          case 68:

            /* token_tok_bracket_square collect */
            node_list = [];
            FAstate[start_pos][15] = STATE_FL;
            FAcache[start_pos][15].uappend(node_list);
            break;
          case 16:

            /* token_tok_at queue */
            stack.push([69, start_pos, only_new]);
            break;
          case 69:

            /* token_tok_at collect */
            node_list = [];
            FAstate[start_pos][16] = STATE_FL;
            FAcache[start_pos][16].uappend(node_list);
            break;
          case 17:

            /* token_tok_pair_delimiter queue */
            stack.push([70, start_pos, only_new]);
            break;
          case 70:

            /* token_tok_pair_delimiter collect */
            node_list = [];
            FAstate[start_pos][17] = STATE_FL;
            FAcache[start_pos][17].uappend(node_list);
            break;
          case 18:

            /* token_tok_bracket_curve queue */
            stack.push([71, start_pos, only_new]);
            break;
          case 71:

            /* token_tok_bracket_curve collect */
            node_list = [];
            FAstate[start_pos][18] = STATE_FL;
            FAcache[start_pos][18].uappend(node_list);
            break;
          case 19:

            /* token_tok_bracket_round queue */
            stack.push([72, start_pos, only_new]);
            break;
          case 72:

            /* token_tok_bracket_round collect */
            node_list = [];
            FAstate[start_pos][19] = STATE_FL;
            FAcache[start_pos][19].uappend(node_list);
            break;
          case 20:

            /* token_tok_comma queue */
            stack.push([73, start_pos, only_new]);
            break;
          case 73:

            /* token_tok_comma collect */
            node_list = [];
            FAstate[start_pos][20] = STATE_FL;
            FAcache[start_pos][20].uappend(node_list);
            break;
          case 21:

            /* token_const queue */
            stack.push([78, start_pos, only_new]);

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            stack.push([74, start_pos, only_new]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            stack.push([76, start_pos, only_new]);
            break;
          case 78:

            /* token_const collect */
            node_list = [];

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            node_list.append(FAcache[start_pos][74]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            node_list.append(FAcache[start_pos][76]);
            FAstate[start_pos][21] = STATE_FL;
            FAcache[start_pos][21].uappend(node_list);
            break;
          case 22:

            /* token_num_const queue */
            stack.push([89, start_pos, only_new]);

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 */
            stack.push([79, start_pos, only_new]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 */
            stack.push([81, start_pos, only_new]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 */
            stack.push([83, start_pos, only_new]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 */
            stack.push([85, start_pos, only_new]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 */
            stack.push([87, start_pos, only_new]);
            break;
          case 89:

            /* token_num_const collect */
            node_list = [];

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 */
            node_list.append(FAcache[start_pos][79]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 */
            node_list.append(FAcache[start_pos][81]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 */
            node_list.append(FAcache[start_pos][83]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 */
            node_list.append(FAcache[start_pos][85]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 */
            node_list.append(FAcache[start_pos][87]);
            FAstate[start_pos][22] = STATE_FL;
            FAcache[start_pos][22].uappend(node_list);
            break;
          case 23:

            /* token_str_const queue */
            stack.push([94, start_pos, only_new]);

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 */
            stack.push([90, start_pos, only_new]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 */
            stack.push([92, start_pos, only_new]);
            break;
          case 94:

            /* token_str_const collect */
            node_list = [];

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 */
            node_list.append(FAcache[start_pos][90]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 */
            node_list.append(FAcache[start_pos][92]);
            FAstate[start_pos][23] = STATE_FL;
            FAcache[start_pos][23].uappend(node_list);
            break;
          case 24:

            /* token_rvalue queue */
            stack.push([143, start_pos, only_new]);

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            stack.push([95, start_pos, only_new]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            stack.push([97, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            stack.push([99, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            stack.push([101, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            stack.push([103, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 */
            stack.push([105, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 */
            stack.push([107, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 */
            stack.push([109, start_pos, only_new]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 */
            stack.push([111, start_pos, only_new]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 */
            stack.push([113, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 */
            stack.push([115, start_pos, only_new]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 */
            stack.push([117, start_pos, only_new]);

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 */
            stack.push([119, start_pos, only_new]);

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 */
            stack.push([121, start_pos, only_new]);

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 */
            stack.push([123, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 */
            stack.push([125, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 */
            stack.push([127, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 */
            stack.push([129, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 */
            stack.push([131, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 */
            stack.push([133, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 */
            stack.push([135, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 */
            stack.push([137, start_pos, only_new]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 */
            stack.push([139, start_pos, only_new]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 */
            stack.push([141, start_pos, only_new]);
            break;
          case 143:

            /* token_rvalue collect */
            node_list = [];

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            node_list.append(FAcache[start_pos][95]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            node_list.append(FAcache[start_pos][97]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            node_list.append(FAcache[start_pos][99]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            node_list.append(FAcache[start_pos][101]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            node_list.append(FAcache[start_pos][103]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 */
            node_list.append(FAcache[start_pos][105]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 */
            node_list.append(FAcache[start_pos][107]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 */
            node_list.append(FAcache[start_pos][109]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 */
            node_list.append(FAcache[start_pos][111]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 */
            node_list.append(FAcache[start_pos][113]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 */
            node_list.append(FAcache[start_pos][115]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 */
            node_list.append(FAcache[start_pos][117]);

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 */
            node_list.append(FAcache[start_pos][119]);

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 */
            node_list.append(FAcache[start_pos][121]);

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 */
            node_list.append(FAcache[start_pos][123]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 */
            node_list.append(FAcache[start_pos][125]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 */
            node_list.append(FAcache[start_pos][127]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 */
            node_list.append(FAcache[start_pos][129]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 */
            node_list.append(FAcache[start_pos][131]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 */
            node_list.append(FAcache[start_pos][133]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 */
            node_list.append(FAcache[start_pos][135]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 */
            node_list.append(FAcache[start_pos][137]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 */
            node_list.append(FAcache[start_pos][139]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 */
            node_list.append(FAcache[start_pos][141]);
            for (_k = 0, _len = node_list.length; _k < _len; _k++) {
              node = node_list[_k];
              node._is_new = true;
            }
            append_list = FAcache[start_pos][24];
            for (_l = 0, _len1 = append_list.length; _l < _len1; _l++) {
              node = append_list[_l];
              node._is_new = false;
            }
            append_list.uappend(node_list);
            state = FAstate[start_pos][24];
            FAstate[start_pos][24] = STATE_FL;
            if (state === STATE_IG) {
              if ((_ref = node_list.last()) != null ? _ref._is_new : void 0) {
                FAstate[start_pos][24] = STATE_RQ;
                stack.push([24, start_pos, 1]);
                request_make(26, start_pos, 1);
                request_make(24, start_pos, 1);
              }
            }
            break;
          case 25:

            /* token_stmt queue */
            stack.push([190, start_pos, only_new]);

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            stack.push([144, start_pos, only_new]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 */
            stack.push([146, start_pos, only_new]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 */
            stack.push([148, start_pos, only_new]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 */
            stack.push([150, start_pos, only_new]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 */
            stack.push([152, start_pos, only_new]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 */
            stack.push([154, start_pos, only_new]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 */
            stack.push([156, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 */
            stack.push([158, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 */
            stack.push([160, start_pos, only_new]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 */
            stack.push([162, start_pos, only_new]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 */
            stack.push([164, start_pos, only_new]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 */
            stack.push([166, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 */
            stack.push([168, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 */
            stack.push([170, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 */
            stack.push([172, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 */
            stack.push([174, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 */
            stack.push([176, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 */
            stack.push([178, start_pos, only_new]);

            /* rule_class_Htok_identifier_ultEclass_decl__u145 */
            stack.push([180, start_pos, only_new]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 */
            stack.push([182, start_pos, only_new]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 */
            stack.push([184, start_pos, only_new]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 */
            stack.push([186, start_pos, only_new]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 */
            stack.push([188, start_pos, only_new]);
            break;
          case 190:

            /* token_stmt collect */
            node_list = [];

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            node_list.append(FAcache[start_pos][144]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 */
            node_list.append(FAcache[start_pos][146]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 */
            node_list.append(FAcache[start_pos][148]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 */
            node_list.append(FAcache[start_pos][150]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 */
            node_list.append(FAcache[start_pos][152]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 */
            node_list.append(FAcache[start_pos][154]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 */
            node_list.append(FAcache[start_pos][156]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 */
            node_list.append(FAcache[start_pos][158]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 */
            node_list.append(FAcache[start_pos][160]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 */
            node_list.append(FAcache[start_pos][162]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 */
            node_list.append(FAcache[start_pos][164]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 */
            node_list.append(FAcache[start_pos][166]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 */
            node_list.append(FAcache[start_pos][168]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 */
            node_list.append(FAcache[start_pos][170]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 */
            node_list.append(FAcache[start_pos][172]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 */
            node_list.append(FAcache[start_pos][174]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 */
            node_list.append(FAcache[start_pos][176]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 */
            node_list.append(FAcache[start_pos][178]);

            /* rule_class_Htok_identifier_ultEclass_decl__u145 */
            node_list.append(FAcache[start_pos][180]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 */
            node_list.append(FAcache[start_pos][182]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 */
            node_list.append(FAcache[start_pos][184]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 */
            node_list.append(FAcache[start_pos][186]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 */
            node_list.append(FAcache[start_pos][188]);
            for (_m = 0, _len2 = node_list.length; _m < _len2; _m++) {
              node = node_list[_m];
              node._is_new = true;
            }
            append_list = FAcache[start_pos][25];
            for (_n = 0, _len3 = append_list.length; _n < _len3; _n++) {
              node = append_list[_n];
              node._is_new = false;
            }
            append_list.uappend(node_list);
            state = FAstate[start_pos][25];
            FAstate[start_pos][25] = STATE_FL;
            if (state === STATE_IG) {
              if ((_ref1 = node_list.last()) != null ? _ref1._is_new : void 0) {
                FAstate[start_pos][25] = STATE_RQ;
                stack.push([25, start_pos, 1]);
                request_make(25, start_pos, 1);
              }
            }
            break;
          case 26:

            /* token_lvalue queue */
            stack.push([197, start_pos, only_new]);

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            stack.push([191, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 */
            stack.push([193, start_pos, only_new]);

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 */
            stack.push([195, start_pos, only_new]);
            break;
          case 197:

            /* token_lvalue collect */
            node_list = [];

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            node_list.append(FAcache[start_pos][191]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 */
            node_list.append(FAcache[start_pos][193]);

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 */
            node_list.append(FAcache[start_pos][195]);
            for (_o = 0, _len4 = node_list.length; _o < _len4; _o++) {
              node = node_list[_o];
              node._is_new = true;
            }
            append_list = FAcache[start_pos][26];
            for (_p = 0, _len5 = append_list.length; _p < _len5; _p++) {
              node = append_list[_p];
              node._is_new = false;
            }
            append_list.uappend(node_list);
            state = FAstate[start_pos][26];
            FAstate[start_pos][26] = STATE_FL;
            if (state === STATE_IG) {
              if ((_ref2 = node_list.last()) != null ? _ref2._is_new : void 0) {
                FAstate[start_pos][26] = STATE_RQ;
                stack.push([26, start_pos, 1]);
                request_make(24, start_pos, 1);
              }
            }
            break;
          case 27:

            /* token_block queue */
            stack.push([200, start_pos, only_new]);

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            stack.push([198, start_pos, only_new]);
            break;
          case 200:

            /* token_block collect */
            node_list = [];

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            node_list.append(FAcache[start_pos][198]);
            FAstate[start_pos][27] = STATE_FL;
            FAcache[start_pos][27].uappend(node_list);
            break;
          case 28:

            /* token_indent queue */
            stack.push([201, start_pos, only_new]);
            break;
          case 201:

            /* token_indent collect */
            node_list = [];
            FAstate[start_pos][28] = STATE_FL;
            FAcache[start_pos][28].uappend(node_list);
            break;
          case 29:

            /* token_stmt_plus queue */
            stack.push([208, start_pos, only_new]);

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 */
            stack.push([202, start_pos, only_new]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 */
            stack.push([204, start_pos, only_new]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 */
            stack.push([206, start_pos, only_new]);
            break;
          case 208:

            /* token_stmt_plus collect */
            node_list = [];

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 */
            node_list.append(FAcache[start_pos][202]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 */
            node_list.append(FAcache[start_pos][204]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 */
            node_list.append(FAcache[start_pos][206]);
            FAstate[start_pos][29] = STATE_FL;
            FAcache[start_pos][29].uappend(node_list);
            break;
          case 30:

            /* token_dedent queue */
            stack.push([209, start_pos, only_new]);
            break;
          case 209:

            /* token_dedent collect */
            node_list = [];
            FAstate[start_pos][30] = STATE_FL;
            FAcache[start_pos][30].uappend(node_list);
            break;
          case 31:

            /* token_bin_op queue */
            stack.push([210, start_pos, only_new]);
            break;
          case 210:

            /* token_bin_op collect */
            node_list = [];
            FAstate[start_pos][31] = STATE_FL;
            FAcache[start_pos][31].uappend(node_list);
            break;
          case 32:

            /* token_pre_op queue */
            stack.push([211, start_pos, only_new]);
            break;
          case 211:

            /* token_pre_op collect */
            node_list = [];
            FAstate[start_pos][32] = STATE_FL;
            FAcache[start_pos][32].uappend(node_list);
            break;
          case 33:

            /* token_post_op queue */
            stack.push([212, start_pos, only_new]);
            break;
          case 212:

            /* token_post_op collect */
            node_list = [];
            FAstate[start_pos][33] = STATE_FL;
            FAcache[start_pos][33].uappend(node_list);
            break;
          case 34:

            /* token_eol queue */
            stack.push([213, start_pos, only_new]);
            break;
          case 213:

            /* token_eol collect */
            node_list = [];
            FAstate[start_pos][34] = STATE_FL;
            FAcache[start_pos][34].uappend(node_list);
            break;
          case 35:

            /* token_type queue */
            stack.push([216, start_pos, only_new]);

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 */
            stack.push([214, start_pos, only_new]);
            break;
          case 216:

            /* token_type collect */
            node_list = [];

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 */
            node_list.append(FAcache[start_pos][214]);
            FAstate[start_pos][35] = STATE_FL;
            FAcache[start_pos][35].uappend(node_list);
            break;
          case 36:

            /* token_struct_init_kv queue */
            stack.push([223, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 */
            stack.push([217, start_pos, only_new]);

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 */
            stack.push([219, start_pos, only_new]);

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 */
            stack.push([221, start_pos, only_new]);
            break;
          case 223:

            /* token_struct_init_kv collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 */
            node_list.append(FAcache[start_pos][217]);

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 */
            node_list.append(FAcache[start_pos][219]);

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 */
            node_list.append(FAcache[start_pos][221]);
            FAstate[start_pos][36] = STATE_FL;
            FAcache[start_pos][36].uappend(node_list);
            break;
          case 37:

            /* token_struct_init_list queue */
            stack.push([234, start_pos, only_new]);

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 */
            stack.push([224, start_pos, only_new]);

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 */
            stack.push([226, start_pos, only_new]);

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 */
            stack.push([228, start_pos, only_new]);

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 */
            stack.push([230, start_pos, only_new]);

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 */
            stack.push([232, start_pos, only_new]);
            break;
          case 234:

            /* token_struct_init_list collect */
            node_list = [];

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 */
            node_list.append(FAcache[start_pos][224]);

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 */
            node_list.append(FAcache[start_pos][226]);

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 */
            node_list.append(FAcache[start_pos][228]);

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 */
            node_list.append(FAcache[start_pos][230]);

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 */
            node_list.append(FAcache[start_pos][232]);
            FAstate[start_pos][37] = STATE_FL;
            FAcache[start_pos][37].uappend(node_list);
            break;
          case 38:

            /* token_struct_init queue */
            stack.push([243, start_pos, only_new]);

            /* rule_XXX_Hstruct_init_listO_XXX___u102 */
            stack.push([235, start_pos, only_new]);

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 */
            stack.push([237, start_pos, only_new]);

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 */
            stack.push([239, start_pos, only_new]);

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 */
            stack.push([241, start_pos, only_new]);
            break;
          case 243:

            /* token_struct_init collect */
            node_list = [];

            /* rule_XXX_Hstruct_init_listO_XXX___u102 */
            node_list.append(FAcache[start_pos][235]);

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 */
            node_list.append(FAcache[start_pos][237]);

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 */
            node_list.append(FAcache[start_pos][239]);

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 */
            node_list.append(FAcache[start_pos][241]);
            FAstate[start_pos][38] = STATE_FL;
            FAcache[start_pos][38].uappend(node_list);
            break;
          case 39:

            /* token_array_init_list queue */
            stack.push([252, start_pos, only_new]);

            /* rule_Hrvalue___u107 */
            stack.push([244, start_pos, only_new]);

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 */
            stack.push([246, start_pos, only_new]);

            /* rule_Hrvalue_XXX______Harray_init_list___u109 */
            stack.push([248, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 */
            stack.push([250, start_pos, only_new]);
            break;
          case 252:

            /* token_array_init_list collect */
            node_list = [];

            /* rule_Hrvalue___u107 */
            node_list.append(FAcache[start_pos][244]);

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 */
            node_list.append(FAcache[start_pos][246]);

            /* rule_Hrvalue_XXX______Harray_init_list___u109 */
            node_list.append(FAcache[start_pos][248]);

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 */
            node_list.append(FAcache[start_pos][250]);
            FAstate[start_pos][39] = STATE_FL;
            FAcache[start_pos][39].uappend(node_list);
            break;
          case 40:

            /* token_array_init queue */
            stack.push([257, start_pos, only_new]);

            /* rule_XXX_Harray_init_listO_XXX___u111 */
            stack.push([253, start_pos, only_new]);

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 */
            stack.push([255, start_pos, only_new]);
            break;
          case 257:

            /* token_array_init collect */
            node_list = [];

            /* rule_XXX_Harray_init_listO_XXX___u111 */
            node_list.append(FAcache[start_pos][253]);

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 */
            node_list.append(FAcache[start_pos][255]);
            FAstate[start_pos][40] = STATE_FL;
            FAcache[start_pos][40].uappend(node_list);
            break;
          case 41:

            /* token_if_tail_stmt queue */
            stack.push([264, start_pos, only_new]);

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 */
            stack.push([258, start_pos, only_new]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 */
            stack.push([260, start_pos, only_new]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 */
            stack.push([262, start_pos, only_new]);
            break;
          case 264:

            /* token_if_tail_stmt collect */
            node_list = [];

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 */
            node_list.append(FAcache[start_pos][258]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 */
            node_list.append(FAcache[start_pos][260]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 */
            node_list.append(FAcache[start_pos][262]);
            FAstate[start_pos][41] = STATE_FL;
            FAcache[start_pos][41].uappend(node_list);
            break;
          case 42:

            /* token_switch_tail_stmt queue */
            stack.push([269, start_pos, only_new]);

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 */
            stack.push([265, start_pos, only_new]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 */
            stack.push([267, start_pos, only_new]);
            break;
          case 269:

            /* token_switch_tail_stmt collect */
            node_list = [];

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 */
            node_list.append(FAcache[start_pos][265]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 */
            node_list.append(FAcache[start_pos][267]);
            FAstate[start_pos][42] = STATE_FL;
            FAcache[start_pos][42].uappend(node_list);
            break;
          case 43:

            /* token_ranger queue */
            stack.push([270, start_pos, only_new]);
            break;
          case 270:

            /* token_ranger collect */
            node_list = [];
            FAstate[start_pos][43] = STATE_FL;
            FAcache[start_pos][43].uappend(node_list);
            break;
          case 44:

            /* token_fn_decl_arg queue */
            stack.push([275, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u128 */
            stack.push([271, start_pos, only_new]);

            /* rule_Htok_identifier___u129 */
            stack.push([273, start_pos, only_new]);
            break;
          case 275:

            /* token_fn_decl_arg collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u128 */
            node_list.append(FAcache[start_pos][271]);

            /* rule_Htok_identifier___u129 */
            node_list.append(FAcache[start_pos][273]);
            FAstate[start_pos][44] = STATE_FL;
            FAcache[start_pos][44].uappend(node_list);
            break;
          case 45:

            /* token_fn_decl_arg_list queue */
            stack.push([280, start_pos, only_new]);

            /* rule_Hfn_decl_arg___u130 */
            stack.push([276, start_pos, only_new]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 */
            stack.push([278, start_pos, only_new]);
            break;
          case 280:

            /* token_fn_decl_arg_list collect */
            node_list = [];

            /* rule_Hfn_decl_arg___u130 */
            node_list.append(FAcache[start_pos][276]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 */
            node_list.append(FAcache[start_pos][278]);
            FAstate[start_pos][45] = STATE_FL;
            FAcache[start_pos][45].uappend(node_list);
            break;
          case 46:

            /* token_return queue */
            stack.push([281, start_pos, only_new]);
            break;
          case 281:

            /* token_return collect */
            node_list = [];
            FAstate[start_pos][46] = STATE_FL;
            FAcache[start_pos][46].uappend(node_list);
            break;
          case 47:

            /* token_fn_call_arg_list queue */
            stack.push([286, start_pos, only_new]);

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 */
            stack.push([282, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 */
            stack.push([284, start_pos, only_new]);
            break;
          case 286:

            /* token_fn_call_arg_list collect */
            node_list = [];

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 */
            node_list.append(FAcache[start_pos][282]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 */
            node_list.append(FAcache[start_pos][284]);
            FAstate[start_pos][47] = STATE_FL;
            FAcache[start_pos][47].uappend(node_list);
            break;
          case 48:

            /* token_type_list queue */
            stack.push([291, start_pos, only_new]);

            /* rule_Htype___u155 */
            stack.push([287, start_pos, only_new]);

            /* rule_Htype_XXX_Htype_list___u156 */
            stack.push([289, start_pos, only_new]);
            break;
          case 291:

            /* token_type_list collect */
            node_list = [];

            /* rule_Htype___u155 */
            node_list.append(FAcache[start_pos][287]);

            /* rule_Htype_XXX_Htype_list___u156 */
            node_list.append(FAcache[start_pos][289]);
            FAstate[start_pos][48] = STATE_FL;
            FAcache[start_pos][48].uappend(node_list);
            break;
          case 49:

            /* token_type_nest queue */
            stack.push([294, start_pos, only_new]);

            /* rule_XXX_Htype_list_XXX___u157 */
            stack.push([292, start_pos, only_new]);
            break;
          case 294:

            /* token_type_nest collect */
            node_list = [];

            /* rule_XXX_Htype_list_XXX___u157 */
            node_list.append(FAcache[start_pos][292]);
            FAstate[start_pos][49] = STATE_FL;
            FAcache[start_pos][49].uappend(node_list);
            break;
          case 50:

            /* token_type_field_kv queue */
            stack.push([297, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u158 */
            stack.push([295, start_pos, only_new]);
            break;
          case 297:

            /* token_type_field_kv collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u158 */
            node_list.append(FAcache[start_pos][295]);
            FAstate[start_pos][50] = STATE_FL;
            FAcache[start_pos][50].uappend(node_list);
            break;
          case 51:

            /* token_type_field_kv_list queue */
            stack.push([302, start_pos, only_new]);

            /* rule_Htype_field_kv___u159 */
            stack.push([298, start_pos, only_new]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 */
            stack.push([300, start_pos, only_new]);
            break;
          case 302:

            /* token_type_field_kv_list collect */
            node_list = [];

            /* rule_Htype_field_kv___u159 */
            node_list.append(FAcache[start_pos][298]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 */
            node_list.append(FAcache[start_pos][300]);
            FAstate[start_pos][51] = STATE_FL;
            FAcache[start_pos][51].uappend(node_list);
            break;
          case 52:

            /* token_type_field queue */
            stack.push([305, start_pos, only_new]);

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 */
            stack.push([303, start_pos, only_new]);
            break;
          case 305:

            /* token_type_field collect */
            node_list = [];

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 */
            node_list.append(FAcache[start_pos][303]);
            FAstate[start_pos][52] = STATE_FL;
            FAcache[start_pos][52].uappend(node_list);
            break;
          case 74:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 queue */
            chk_len = stack.push([74, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][22];
            if (state_1 !== STATE_FL) {
              if (request_make(22, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][22];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 75;
            }
            break;
          case 75:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][22];
            for (idx_1 = _q = _ref3 = FAcounter[b_0][0], _ref4 = list_1.length; _q < _ref4; idx_1 = _q += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hnum_const_ultEdeep_tiEpass__u1";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][0] = list_1.length;
            FAcache[start_pos][74].append(ret_list);
            break;
          case 76:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 queue */
            chk_len = stack.push([76, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][23];
            if (state_1 !== STATE_FL) {
              if (request_make(23, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][23];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 77;
            }
            break;
          case 77:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (idx_1 = _r = _ref5 = FAcounter[b_0][1], _ref6 = list_1.length; _r < _ref6; idx_1 = _r += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstr_const_ultEdeep_tiEpass__u2";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][1] = list_1.length;
            FAcache[start_pos][76].append(ret_list);
            break;
          case 79:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 queue */
            chk_len = stack.push([79, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][5];
            if (state_1 !== STATE_FL) {
              if (request_make(5, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][5];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 80;
            }
            break;
          case 80:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][5];
            for (idx_1 = _s = _ref7 = FAcounter[b_0][2], _ref8 = list_1.length; _s < _ref8; idx_1 = _s += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][2] = list_1.length;
            FAcache[start_pos][79].append(ret_list);
            break;
          case 81:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 queue */
            chk_len = stack.push([81, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][6];
            if (state_1 !== STATE_FL) {
              if (request_make(6, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][6];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 82;
            }
            break;
          case 82:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][6];
            for (idx_1 = _t = _ref9 = FAcounter[b_0][3], _ref10 = list_1.length; _t < _ref10; idx_1 = _t += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][3] = list_1.length;
            FAcache[start_pos][81].append(ret_list);
            break;
          case 83:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 queue */
            chk_len = stack.push([83, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][7];
            if (state_1 !== STATE_FL) {
              if (request_make(7, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][7];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 84;
            }
            break;
          case 84:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][7];
            for (idx_1 = _u = _ref11 = FAcounter[b_0][4], _ref12 = list_1.length; _u < _ref12; idx_1 = _u += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][4] = list_1.length;
            FAcache[start_pos][83].append(ret_list);
            break;
          case 85:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 queue */
            chk_len = stack.push([85, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][8];
            if (state_1 !== STATE_FL) {
              if (request_make(8, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][8];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 86;
            }
            break;
          case 86:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][8];
            for (idx_1 = _v = _ref13 = FAcounter[b_0][5], _ref14 = list_1.length; _v < _ref14; idx_1 = _v += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][5] = list_1.length;
            FAcache[start_pos][85].append(ret_list);
            break;
          case 87:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 queue */
            chk_len = stack.push([87, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][9];
            if (state_1 !== STATE_FL) {
              if (request_make(9, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][9];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 88;
            }
            break;
          case 88:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][9];
            for (idx_1 = _w = _ref15 = FAcounter[b_0][6], _ref16 = list_1.length; _w < _ref16; idx_1 = _w += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "float";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][6] = list_1.length;
            FAcache[start_pos][87].append(ret_list);
            break;
          case 90:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 queue */
            chk_len = stack.push([90, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][10];
            if (state_1 !== STATE_FL) {
              if (request_make(10, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][10];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 91;
            }
            break;
          case 91:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][10];
            for (idx_1 = _x = _ref17 = FAcounter[b_0][7], _ref18 = list_1.length; _x < _ref18; idx_1 = _x += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][7] = list_1.length;
            FAcache[start_pos][90].append(ret_list);
            break;
          case 92:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 queue */
            chk_len = stack.push([92, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][11];
            if (state_1 !== STATE_FL) {
              if (request_make(11, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][11];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 93;
            }
            break;
          case 93:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][11];
            for (idx_1 = _y = _ref19 = FAcounter[b_0][8], _ref20 = list_1.length; _y < _ref20; idx_1 = _y += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][8] = list_1.length;
            FAcache[start_pos][92].append(ret_list);
            break;
          case 95:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 queue */
            chk_len = stack.push([95, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][21];
            if (state_1 !== STATE_FL) {
              if (request_make(21, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][21];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 96;
            }
            break;
          case 96:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][21];
            for (idx_1 = _z = _ref21 = FAcounter[b_0][9], _ref22 = list_1.length; _z < _ref22; idx_1 = _z += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][9] = list_1.length;
            FAcache[start_pos][95].append(ret_list);
            break;
          case 97:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 queue */
            chk_len = stack.push([97, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 98;
            }
            break;
          case 98:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _aa = _ref23 = FAcounter[b_0][10], _ref24 = list_1.length; _aa < _ref24; idx_1 = _aa += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][10] = list_1.length;
            FAcache[start_pos][97].append(ret_list);
            break;
          case 99:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 queue */
            chk_len = stack.push([99, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ab = _ref25 = FAcounter[b_0][12], _ref26 = list_1.length; _ab < _ref26; idx_1 = _ab += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ac = 0, _len6 = list_2.length; _ac < _len6; _ac++) {
                tok = list_2[_ac];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 100;
            }
            break;
          case 100:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ad = _ref27 = FAcounter[b_0][15], _ref28 = list_1.length; _ad < _ref28; idx_1 = _ad += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ae = 0, _len7 = list_2.length; _ae < _len7; _ae++) {
                tok = list_2[_ae];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_af = 0, _len8 = list_3.length; _af < _len8; _af++) {
                  tok = list_3[_af];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][15] = list_1.length;
            FAcache[start_pos][99].append(ret_list);
            break;
          case 101:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 queue */
            chk_len = stack.push([101, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ag = _ref29 = FAcounter[b_0][17], _ref30 = list_1.length; _ag < _ref30; idx_1 = _ag += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ah = 0, _len9 = list_2.length; _ah < _len9; _ah++) {
                tok = list_2[_ah];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 102;
            }
            break;
          case 102:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ai = _ref31 = FAcounter[b_0][20], _ref32 = list_1.length; _ai < _ref32; idx_1 = _ai += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_aj = 0, _len10 = list_2.length; _aj < _len10; _aj++) {
                tok = list_2[_aj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ak = 0, _len11 = list_3.length; _ak < _len11; _ak++) {
                  tok = list_3[_ak];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.left_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][20] = list_1.length;
            FAcache[start_pos][101].append(ret_list);
            break;
          case 103:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 queue */
            chk_len = stack.push([103, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _al = _ref33 = FAcounter[b_0][22], _ref34 = list_1.length; _al < _ref34; idx_1 = _al += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_am = 0, _len12 = list_2.length; _am < _len12; _am++) {
                tok = list_2[_am];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 104;
            }
            break;
          case 104:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _an = _ref35 = FAcounter[b_0][25], _ref36 = list_1.length; _an < _ref36; idx_1 = _an += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ao = 0, _len13 = list_2.length; _ao < _len13; _ao++) {
                tok = list_2[_ao];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ap = 0, _len14 = list_3.length; _ap < _len14; _ap++) {
                  tok = list_3[_ap];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.right_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][25] = list_1.length;
            FAcache[start_pos][103].append(ret_list);
            break;
          case 105:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 queue */
            chk_len = stack.push([105, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _aq = _ref37 = FAcounter[b_0][27], _ref38 = list_1.length; _aq < _ref38; idx_1 = _aq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ar = 0, _len15 = list_2.length; _ar < _len15; _ar++) {
                tok = list_2[_ar];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 106;
            }
            break;
          case 106:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _as = _ref39 = FAcounter[b_0][30], _ref40 = list_1.length; _as < _ref40; idx_1 = _as += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_at = 0, _len16 = list_2.length; _at < _len16; _at++) {
                tok = list_2[_at];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_au = 0, _len17 = list_3.length; _au < _len17; _au++) {
                  tok = list_3[_au];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][30] = list_1.length;
            FAcache[start_pos][105].append(ret_list);
            break;
          case 107:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 queue */
            chk_len = stack.push([107, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _av = _ref41 = FAcounter[b_0][32], _ref42 = list_1.length; _av < _ref42; idx_1 = _av += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_aw = 0, _len18 = list_2.length; _aw < _len18; _aw++) {
                tok = list_2[_aw];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 108;
            }
            break;
          case 108:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ax = _ref43 = FAcounter[b_0][35], _ref44 = list_1.length; _ax < _ref44; idx_1 = _ax += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ay = 0, _len19 = list_2.length; _ay < _len19; _ay++) {
                tok = list_2[_ay];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_az = 0, _len20 = list_3.length; _az < _len20; _az++) {
                  tok = list_3[_az];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.left_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][35] = list_1.length;
            FAcache[start_pos][107].append(ret_list);
            break;
          case 109:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 queue */
            chk_len = stack.push([109, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ba = _ref45 = FAcounter[b_0][37], _ref46 = list_1.length; _ba < _ref46; idx_1 = _ba += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_bb = 0, _len21 = list_2.length; _bb < _len21; _bb++) {
                tok = list_2[_bb];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 110;
            }
            break;
          case 110:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bc = _ref47 = FAcounter[b_0][40], _ref48 = list_1.length; _bc < _ref48; idx_1 = _bc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_bd = 0, _len22 = list_2.length; _bd < _len22; _bd++) {
                tok = list_2[_bd];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_be = 0, _len23 = list_3.length; _be < _len23; _be++) {
                  tok = list_3[_be];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.right_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][40] = list_1.length;
            FAcache[start_pos][109].append(ret_list);
            break;
          case 111:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 queue */
            chk_len = stack.push([111, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][32];
            if (state_1 !== STATE_FL) {
              if (request_make(32, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][32];
            for (idx_1 = _bf = _ref49 = FAcounter[b_0][41], _ref50 = list_1.length; _bf < _ref50; idx_1 = _bf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 112;
            }
            break;
          case 112:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][32];
            for (idx_1 = _bg = _ref51 = FAcounter[b_0][43], _ref52 = list_1.length; _bg < _ref52; idx_1 = _bg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_bh = 0, _len24 = list_2.length; _bh < _len24; _bh++) {
                tok = list_2[_bh];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[1].mx_hash.priority <= arg_list[0].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = arg_list[0].mx_hash.priority;
                mx_hash_stub["ult"] = "pre_op";
                mx_hash_stub["ti"] = "pre_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][43] = list_1.length;
            FAcache[start_pos][111].append(ret_list);
            break;
          case 113:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 queue */
            chk_len = stack.push([113, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bi = _ref53 = FAcounter[b_0][44], _ref54 = list_1.length; _bi < _ref54; idx_1 = _bi += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][33];
              if (state_2 !== STATE_FL) {
                if (request_make(33, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][33];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 114;
            }
            break;
          case 114:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bj = _ref55 = FAcounter[b_0][46], _ref56 = list_1.length; _bj < _ref56; idx_1 = _bj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][33];
              for (_bk = 0, _len25 = list_2.length; _bk < _len25; _bk++) {
                tok = list_2[_bk];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                if (!(!arg_list[0].mx_hash.tail_space)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                mx_hash_stub["ult"] = "post_op";
                mx_hash_stub["ti"] = "post_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][46] = list_1.length;
            FAcache[start_pos][113].append(ret_list);
            break;
          case 115:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 queue */
            chk_len = stack.push([115, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bl = _ref57 = FAcounter[b_0][48], _ref58 = list_1.length; _bl < _ref58; idx_1 = _bl += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_bm = 0, _len26 = list_2.length; _bm < _len26; _bm++) {
                tok = list_2[_bm];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 116;
            }
            break;
          case 116:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bn = _ref59 = FAcounter[b_0][52], _ref60 = list_1.length; _bn < _ref60; idx_1 = _bn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_bo = 0, _len27 = list_2.length; _bo < _len27; _bo++) {
                tok = list_2[_bo];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_bp = 0, _len28 = list_3.length; _bp < _len28; _bp++) {
                  tok = list_3[_bp];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_bq = 0, _len29 = list_4.length; _bq < _len29; _bq++) {
                    tok = list_4[_bq];
                    if (tok.value !== ']') {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "index_access";
                    mx_hash_stub["ti"] = "index_access";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][52] = list_1.length;
            FAcache[start_pos][115].append(ret_list);
            break;
          case 117:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 queue */
            chk_len = stack.push([117, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _br = _ref61 = FAcounter[b_0][53], _ref62 = list_1.length; _br < _ref62; idx_1 = _br += 1) {
              tok = list_1[idx_1];
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 118;
            }
            break;
          case 118:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bs = _ref63 = FAcounter[b_0][56], _ref64 = list_1.length; _bs < _ref64; idx_1 = _bs += 1) {
              tok = list_1[idx_1];
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_bt = 0, _len30 = list_2.length; _bt < _len30; _bt++) {
                tok = list_2[_bt];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_bu = 0, _len31 = list_3.length; _bu < _len31; _bu++) {
                  tok = list_3[_bu];
                  if (tok.value !== ')') {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "bracket";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][56] = list_1.length;
            FAcache[start_pos][117].append(ret_list);
            break;
          case 119:

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 queue */
            chk_len = stack.push([119, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 120;
            }
            break;
          case 120:

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bv = _ref65 = FAcounter[b_0][57], _ref66 = list_1.length; _bv < _ref66; idx_1 = _bv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "at";
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][57] = list_1.length;
            FAcache[start_pos][119].append(ret_list);
            break;
          case 121:

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 queue */
            chk_len = stack.push([121, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][38];
            if (state_1 !== STATE_FL) {
              if (request_make(38, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][38];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 122;
            }
            break;
          case 122:

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][38];
            for (idx_1 = _bw = _ref67 = FAcounter[b_0][58], _ref68 = list_1.length; _bw < _ref68; idx_1 = _bw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "struct_init";
              mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][58] = list_1.length;
            FAcache[start_pos][121].append(ret_list);
            break;
          case 123:

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 queue */
            chk_len = stack.push([123, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][40];
            if (state_1 !== STATE_FL) {
              if (request_make(40, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][40];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 124;
            }
            break;
          case 124:

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][40];
            for (idx_1 = _bx = _ref69 = FAcounter[b_0][59], _ref70 = list_1.length; _bx < _ref70; idx_1 = _bx += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Harray_init_priorityEX9000_ultEarray_init__u113";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "array_init";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][59] = list_1.length;
            FAcache[start_pos][123].append(ret_list);
            break;
          case 125:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 queue */
            chk_len = stack.push([125, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _by = _ref71 = FAcounter[b_0][63], _ref72 = list_1.length; _by < _ref72; idx_1 = _by += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _bz = 0; _bz < 1; _i_2 = ++_bz) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ca = 0; _ca < 1; _i_2 = ++_ca) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_cb = 0, _len32 = list_2.length; _cb < _len32; _cb++) {
                  tok = list_2[_cb];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cc = 0, _len33 = hyp_list_2.length; _cc < _len33; _cc++) {
                tok_list = hyp_list_2[_cc];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_cd = 0, _len34 = list_3.length; _cd < _len34; _cd++) {
                  tok = list_3[_cd];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ce = 0, _len35 = list_4.length; _ce < _len35; _ce++) {
                    tok = list_4[_ce];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 126;
            }
            break;
          case 126:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _cf = _ref73 = FAcounter[b_0][69], _ref74 = list_1.length; _cf < _ref74; idx_1 = _cf += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cg = 0; _cg < 1; _i_2 = ++_cg) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ch = 0; _ch < 1; _i_2 = ++_ch) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_ci = 0, _len36 = list_2.length; _ci < _len36; _ci++) {
                  tok = list_2[_ci];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cj = 0, _len37 = hyp_list_2.length; _cj < _len37; _cj++) {
                tok_list = hyp_list_2[_cj];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ck = 0, _len38 = list_3.length; _ck < _len38; _ck++) {
                  tok = list_3[_ck];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cl = 0, _len39 = list_4.length; _cl < _len39; _cl++) {
                    tok = list_4[_cl];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_cm = 0, _len40 = list_5.length; _cm < _len40; _cm++) {
                      tok = list_5[_cm];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_cn = 0, _len41 = list_6.length; _cn < _len41; _cn++) {
                        tok = list_6[_cn];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139";
                        mx_hash_stub.hash_key = "rvalue";
                        mx_hash_stub.hash_key_idx = 24;
                        mx_hash_stub["priority"] = -9000;
                        mx_hash_stub["ult"] = "cl_decl";
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][69] = list_1.length;
            FAcache[start_pos][125].append(ret_list);
            break;
          case 127:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 queue */
            chk_len = stack.push([127, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _co = _ref75 = FAcounter[b_0][75], _ref76 = list_1.length; _co < _ref76; idx_1 = _co += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cp = 0; _cp < 1; _i_2 = ++_cp) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cq = 0; _cq < 1; _i_2 = ++_cq) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_cr = 0, _len42 = list_2.length; _cr < _len42; _cr++) {
                  tok = list_2[_cr];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cs = 0, _len43 = hyp_list_2.length; _cs < _len43; _cs++) {
                tok_list = hyp_list_2[_cs];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ct = 0, _len44 = list_3.length; _ct < _len44; _ct++) {
                  tok = list_3[_ct];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cu = 0, _len45 = list_4.length; _cu < _len45; _cu++) {
                    tok = list_4[_cu];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    for (_cv = 0, _len46 = list_5.length; _cv < _len46; _cv++) {
                      tok = list_5[_cv];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_cw = 0, _len47 = list_6.length; _cw < _len47; _cw++) {
                        tok = list_6[_cw];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][27];
                        if (state_7 !== STATE_FL) {
                          if (request_make(27, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][27];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 128;
            }
            break;
          case 128:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _cx = _ref77 = FAcounter[b_0][82], _ref78 = list_1.length; _cx < _ref78; idx_1 = _cx += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cy = 0; _cy < 1; _i_2 = ++_cy) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cz = 0; _cz < 1; _i_2 = ++_cz) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_da = 0, _len48 = list_2.length; _da < _len48; _da++) {
                  tok = list_2[_da];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_db = 0, _len49 = hyp_list_2.length; _db < _len49; _db++) {
                tok_list = hyp_list_2[_db];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_dc = 0, _len50 = list_3.length; _dc < _len50; _dc++) {
                  tok = list_3[_dc];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dd = 0, _len51 = list_4.length; _dd < _len51; _dd++) {
                    tok = list_4[_dd];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_de = 0, _len52 = list_5.length; _de < _len52; _de++) {
                      tok = list_5[_de];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_df = 0, _len53 = list_6.length; _df < _len53; _df++) {
                        tok = list_6[_df];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][27];
                        for (_dg = 0, _len54 = list_7.length; _dg < _len54; _dg++) {
                          tok = list_7[_dg];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][82] = list_1.length;
            FAcache[start_pos][127].append(ret_list);
            break;
          case 129:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 queue */
            chk_len = stack.push([129, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _dh = _ref79 = FAcounter[b_0][88], _ref80 = list_1.length; _dh < _ref80; idx_1 = _dh += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _di = 0; _di < 1; _i_2 = ++_di) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _dj = 0; _dj < 1; _i_2 = ++_dj) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_dk = 0, _len55 = list_2.length; _dk < _len55; _dk++) {
                  tok = list_2[_dk];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_dl = 0, _len56 = hyp_list_2.length; _dl < _len56; _dl++) {
                tok_list = hyp_list_2[_dl];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_dm = 0, _len57 = list_3.length; _dm < _len57; _dm++) {
                  tok = list_3[_dm];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dn = 0, _len58 = list_4.length; _dn < _len58; _dn++) {
                    tok = list_4[_dn];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    for (_do = 0, _len59 = list_5.length; _do < _len59; _do++) {
                      tok = list_5[_do];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_dp = 0, _len60 = list_6.length; _dp < _len60; _dp++) {
                        tok = list_6[_dp];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 130;
            }
            break;
          case 130:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _dq = _ref81 = FAcounter[b_0][95], _ref82 = list_1.length; _dq < _ref82; idx_1 = _dq += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _dr = 0; _dr < 1; _i_2 = ++_dr) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ds = 0; _ds < 1; _i_2 = ++_ds) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_dt = 0, _len61 = list_2.length; _dt < _len61; _dt++) {
                  tok = list_2[_dt];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_du = 0, _len62 = hyp_list_2.length; _du < _len62; _du++) {
                tok_list = hyp_list_2[_du];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_dv = 0, _len63 = list_3.length; _dv < _len63; _dv++) {
                  tok = list_3[_dv];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dw = 0, _len64 = list_4.length; _dw < _len64; _dw++) {
                    tok = list_4[_dw];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_dx = 0, _len65 = list_5.length; _dx < _len65; _dx++) {
                      tok = list_5[_dx];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_dy = 0, _len66 = list_6.length; _dy < _len66; _dy++) {
                        tok = list_6[_dy];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_dz = 0, _len67 = list_7.length; _dz < _len67; _dz++) {
                          tok = list_7[_dz];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][95] = list_1.length;
            FAcache[start_pos][129].append(ret_list);
            break;
          case 131:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 queue */
            chk_len = stack.push([131, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ea = _ref83 = FAcounter[b_0][97], _ref84 = list_1.length; _ea < _ref84; idx_1 = _ea += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _eb = 0; _eb < 1; _i_2 = ++_eb) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ec = 0; _ec < 1; _i_2 = ++_ec) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_ed = 0, _len68 = list_2.length; _ed < _len68; _ed++) {
                  tok = list_2[_ed];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ee = 0, _len69 = hyp_list_2.length; _ee < _len69; _ee++) {
                tok_list = hyp_list_2[_ee];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 132;
            }
            break;
          case 132:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ef = _ref85 = FAcounter[b_0][101], _ref86 = list_1.length; _ef < _ref86; idx_1 = _ef += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _eg = 0; _eg < 1; _i_2 = ++_eg) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _eh = 0; _eh < 1; _i_2 = ++_eh) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_ei = 0, _len70 = list_2.length; _ei < _len70; _ei++) {
                  tok = list_2[_ei];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ej = 0, _len71 = hyp_list_2.length; _ej < _len71; _ej++) {
                tok_list = hyp_list_2[_ej];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ek = 0, _len72 = list_3.length; _ek < _len72; _ek++) {
                  tok = list_3[_ek];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_el = 0, _len73 = list_4.length; _el < _len73; _el++) {
                    tok = list_4[_el];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "cl_decl";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][101] = list_1.length;
            FAcache[start_pos][131].append(ret_list);
            break;
          case 133:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 queue */
            chk_len = stack.push([133, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _em = _ref87 = FAcounter[b_0][105], _ref88 = list_1.length; _em < _ref88; idx_1 = _em += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _en = 0; _en < 1; _i_2 = ++_en) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _eo = 0; _eo < 1; _i_2 = ++_eo) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_ep = 0, _len74 = list_2.length; _ep < _len74; _ep++) {
                  tok = list_2[_ep];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_eq = 0, _len75 = hyp_list_2.length; _eq < _len75; _eq++) {
                tok_list = hyp_list_2[_eq];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_er = 0, _len76 = list_3.length; _er < _len76; _er++) {
                  tok = list_3[_er];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_es = 0, _len77 = list_4.length; _es < _len77; _es++) {
                    tok = list_4[_es];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 134;
            }
            break;
          case 134:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _et = _ref89 = FAcounter[b_0][110], _ref90 = list_1.length; _et < _ref90; idx_1 = _et += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _eu = 0; _eu < 1; _i_2 = ++_eu) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ev = 0; _ev < 1; _i_2 = ++_ev) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_ew = 0, _len78 = list_2.length; _ew < _len78; _ew++) {
                  tok = list_2[_ew];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ex = 0, _len79 = hyp_list_2.length; _ex < _len79; _ex++) {
                tok_list = hyp_list_2[_ex];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ey = 0, _len80 = list_3.length; _ey < _len80; _ey++) {
                  tok = list_3[_ey];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ez = 0, _len81 = list_4.length; _ez < _len81; _ez++) {
                    tok = list_4[_ez];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_fa = 0, _len82 = list_5.length; _fa < _len82; _fa++) {
                      tok = list_5[_fa];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143";
                      mx_hash_stub.hash_key = "rvalue";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "cl_decl";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][110] = list_1.length;
            FAcache[start_pos][133].append(ret_list);
            break;
          case 135:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 queue */
            chk_len = stack.push([135, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _fb = _ref91 = FAcounter[b_0][114], _ref92 = list_1.length; _fb < _ref92; idx_1 = _fb += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _fc = 0; _fc < 1; _i_2 = ++_fc) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _fd = 0; _fd < 1; _i_2 = ++_fd) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_fe = 0, _len83 = list_2.length; _fe < _len83; _fe++) {
                  tok = list_2[_fe];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ff = 0, _len84 = hyp_list_2.length; _ff < _len84; _ff++) {
                tok_list = hyp_list_2[_ff];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fg = 0, _len85 = list_3.length; _fg < _len85; _fg++) {
                  tok = list_3[_fg];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fh = 0, _len86 = list_4.length; _fh < _len86; _fh++) {
                    tok = list_4[_fh];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 136;
            }
            break;
          case 136:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _fi = _ref93 = FAcounter[b_0][119], _ref94 = list_1.length; _fi < _ref94; idx_1 = _fi += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _fj = 0; _fj < 1; _i_2 = ++_fj) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _fk = 0; _fk < 1; _i_2 = ++_fk) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_fl = 0, _len87 = list_2.length; _fl < _len87; _fl++) {
                  tok = list_2[_fl];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_fm = 0, _len88 = hyp_list_2.length; _fm < _len88; _fm++) {
                tok_list = hyp_list_2[_fm];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fn = 0, _len89 = list_3.length; _fn < _len89; _fn++) {
                  tok = list_3[_fn];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fo = 0, _len90 = list_4.length; _fo < _len90; _fo++) {
                    tok = list_4[_fo];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_fp = 0, _len91 = list_5.length; _fp < _len91; _fp++) {
                      tok = list_5[_fp];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144";
                      mx_hash_stub.hash_key = "rvalue";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "cl_decl";
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][119] = list_1.length;
            FAcache[start_pos][135].append(ret_list);
            break;
          case 137:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 queue */
            chk_len = stack.push([137, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _fq = _ref95 = FAcounter[b_0][122], _ref96 = list_1.length; _fq < _ref96; idx_1 = _fq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fr = 0, _len92 = list_2.length; _fr < _len92; _fr++) {
                tok = list_2[_fr];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _fs = 0; _fs < 1; _i_3 = ++_fs) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ft = 0; _ft < 1; _i_3 = ++_ft) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][47];
                  if (state_3 !== STATE_FL) {
                    if (request_make(47, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][47];
                  for (_fu = 0, _len93 = list_3.length; _fu < _len93; _fu++) {
                    tok = list_3[_fu];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_fv = 0, _len94 = hyp_list_3.length; _fv < _len94; _fv++) {
                  tok_list = hyp_list_3[_fv];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 138;
            }
            break;
          case 138:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _fw = _ref97 = FAcounter[b_0][126], _ref98 = list_1.length; _fw < _ref98; idx_1 = _fw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fx = 0, _len95 = list_2.length; _fx < _len95; _fx++) {
                tok = list_2[_fx];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _fy = 0; _fy < 1; _i_3 = ++_fy) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _fz = 0; _fz < 1; _i_3 = ++_fz) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][47];
                  for (_ga = 0, _len96 = list_3.length; _ga < _len96; _ga++) {
                    tok = list_3[_ga];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_gb = 0, _len97 = hyp_list_3.length; _gb < _len97; _gb++) {
                  tok_list = hyp_list_3[_gb];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_gc = 0, _len98 = list_4.length; _gc < _len98; _gc++) {
                    tok = list_4[_gc];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "fn_call";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][126] = list_1.length;
            FAcache[start_pos][137].append(ret_list);
            break;
          case 139:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 queue */
            chk_len = stack.push([139, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _gd = _ref99 = FAcounter[b_0][127], _ref100 = list_1.length; _gd < _ref100; idx_1 = _gd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][47];
              if (state_2 !== STATE_FL) {
                if (request_make(47, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][47];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 140;
            }
            break;
          case 140:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ge = _ref101 = FAcounter[b_0][129], _ref102 = list_1.length; _ge < _ref102; idx_1 = _ge += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][47];
              for (_gf = 0, _len99 = list_2.length; _gf < _len99; _gf++) {
                tok = list_2[_gf];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority === -9000)) {
                  node.value_array.pop();
                  continue;
                }
                if (!arg_list[0].mx_hash.tail_space) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = -9000;
                mx_hash_stub["ult"] = "fn_call";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][129] = list_1.length;
            FAcache[start_pos][139].append(ret_list);
            break;
          case 141:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 queue */
            chk_len = stack.push([141, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _gg = _ref103 = FAcounter[b_0][131], _ref104 = list_1.length; _gg < _ref104; idx_1 = _gg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_gh = 0, _len100 = list_2.length; _gh < _len100; _gh++) {
                tok = list_2[_gh];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][25];
                if (state_3 !== STATE_FL) {
                  if (request_make(25, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][25];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 142;
            }
            break;
          case 142:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _gi = _ref105 = FAcounter[b_0][134], _ref106 = list_1.length; _gi < _ref106; idx_1 = _gi += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_gj = 0, _len101 = list_2.length; _gj < _len101; _gj++) {
                tok = list_2[_gj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][25];
                for (_gk = 0, _len102 = list_3.length; _gk < _len102; _gk++) {
                  tok = list_3[_gk];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[2].mx_hash.ult === "directive_fn_call")) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][134] = list_1.length;
            FAcache[start_pos][141].append(ret_list);
            break;
          case 144:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 queue */
            chk_len = stack.push([144, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 145;
            }
            break;
          case 145:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _gl = _ref107 = FAcounter[b_0][135], _ref108 = list_1.length; _gl < _ref108; idx_1 = _gl += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][135] = list_1.length;
            FAcache[start_pos][144].append(ret_list);
            break;
          case 146:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 queue */
            chk_len = stack.push([146, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][13];
            if (state_1 !== STATE_FL) {
              if (request_make(13, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][13];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 147;
            }
            break;
          case 147:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][13];
            for (idx_1 = _gm = _ref109 = FAcounter[b_0][136], _ref110 = list_1.length; _gm < _ref110; idx_1 = _gm += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_inline_comment_ultEcomment_tiEpass__u81";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][136] = list_1.length;
            FAcache[start_pos][146].append(ret_list);
            break;
          case 148:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 queue */
            chk_len = stack.push([148, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][14];
            if (state_1 !== STATE_FL) {
              if (request_make(14, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][14];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 149;
            }
            break;
          case 149:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][14];
            for (idx_1 = _gn = _ref111 = FAcounter[b_0][137], _ref112 = list_1.length; _gn < _ref112; idx_1 = _gn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_multiline_comment_ultEcomment_tiEpass__u82";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][137] = list_1.length;
            FAcache[start_pos][148].append(ret_list);
            break;
          case 150:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 queue */
            chk_len = stack.push([150, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _go = _ref113 = FAcounter[b_0][140], _ref114 = list_1.length; _go < _ref114; idx_1 = _go += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_gp = 0, _len103 = list_2.length; _gp < _len103; _gp++) {
                tok = list_2[_gp];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gq = 0, _len104 = list_3.length; _gq < _len104; _gq++) {
                  tok = list_3[_gq];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][35];
                  if (state_4 !== STATE_FL) {
                    if (request_make(35, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][35];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 151;
            }
            break;
          case 151:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _gr = _ref115 = FAcounter[b_0][144], _ref116 = list_1.length; _gr < _ref116; idx_1 = _gr += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_gs = 0, _len105 = list_2.length; _gs < _len105; _gs++) {
                tok = list_2[_gs];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gt = 0, _len106 = list_3.length; _gt < _len106; _gt++) {
                  tok = list_3[_gt];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][35];
                  for (_gu = 0, _len107 = list_4.length; _gu < _len107; _gu++) {
                    tok = list_4[_gu];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 25;
                    mx_hash_stub["ult"] = "var_decl";
                    mx_hash_stub["ti"] = "var_decl";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][144] = list_1.length;
            FAcache[start_pos][150].append(ret_list);
            break;
          case 152:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 queue */
            chk_len = stack.push([152, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _gv = _ref117 = FAcounter[b_0][148], _ref118 = list_1.length; _gv < _ref118; idx_1 = _gv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_gw = 0, _len108 = list_2.length; _gw < _len108; _gw++) {
                tok = list_2[_gw];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_gx = 0, _len109 = list_3.length; _gx < _len109; _gx++) {
                  tok = list_3[_gx];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _gy = 0; _gy < 1; _i_4 = ++_gy) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _gz = 0; _gz < 1; _i_4 = ++_gz) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][41];
                    if (state_4 !== STATE_FL) {
                      if (request_make(41, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][41];
                    for (_ha = 0, _len110 = list_4.length; _ha < _len110; _ha++) {
                      tok = list_4[_ha];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_hb = 0, _len111 = hyp_list_4.length; _hb < _len111; _hb++) {
                    tok_list = hyp_list_4[_hb];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 153;
            }
            break;
          case 153:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hc = _ref119 = FAcounter[b_0][152], _ref120 = list_1.length; _hc < _ref120; idx_1 = _hc += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_hd = 0, _len112 = list_2.length; _hd < _len112; _hd++) {
                tok = list_2[_hd];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_he = 0, _len113 = list_3.length; _he < _len113; _he++) {
                  tok = list_3[_he];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _hf = 0; _hf < 1; _i_4 = ++_hf) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _hg = 0; _hg < 1; _i_4 = ++_hg) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][41];
                    for (_hh = 0, _len114 = list_4.length; _hh < _len114; _hh++) {
                      tok = list_4[_hh];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_hi = 0, _len115 = hyp_list_4.length; _hi < _len115; _hi++) {
                    tok_list = hyp_list_4[_hi];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 25;
                    mx_hash_stub["ult"] = "if";
                    mx_hash_stub["ti"] = "if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][152] = list_1.length;
            FAcache[start_pos][152].append(ret_list);
            break;
          case 154:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 queue */
            chk_len = stack.push([154, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _hj = _ref121 = FAcounter[b_0][154], _ref122 = list_1.length; _hj < _ref122; idx_1 = _hj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_hk = 0, _len116 = list_2.length; _hk < _len116; _hk++) {
                tok = list_2[_hk];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 155;
            }
            break;
          case 155:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _hl = _ref123 = FAcounter[b_0][157], _ref124 = list_1.length; _hl < _ref124; idx_1 = _hl += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_hm = 0, _len117 = list_2.length; _hm < _len117; _hm++) {
                tok = list_2[_hm];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_hn = 0, _len118 = list_3.length; _hn < _len118; _hn++) {
                  tok = list_3[_hn];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "if_postfix";
                  mx_hash_stub["ti"] = "if_postfix";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][157] = list_1.length;
            FAcache[start_pos][154].append(ret_list);
            break;
          case 156:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 queue */
            chk_len = stack.push([156, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ho = _ref125 = FAcounter[b_0][161], _ref126 = list_1.length; _ho < _ref126; idx_1 = _ho += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_hp = 0, _len119 = list_2.length; _hp < _len119; _hp++) {
                tok = list_2[_hp];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][28];
                if (state_3 !== STATE_FL) {
                  if (request_make(28, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][28];
                for (_hq = 0, _len120 = list_3.length; _hq < _len120; _hq++) {
                  tok = list_3[_hq];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][42];
                  if (state_4 !== STATE_FL) {
                    if (request_make(42, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][42];
                  for (_hr = 0, _len121 = list_4.length; _hr < _len121; _hr++) {
                    tok = list_4[_hr];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][30];
                    if (state_5 !== STATE_FL) {
                      if (request_make(30, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][30];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 157;
            }
            break;
          case 157:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hs = _ref127 = FAcounter[b_0][166], _ref128 = list_1.length; _hs < _ref128; idx_1 = _hs += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_ht = 0, _len122 = list_2.length; _ht < _len122; _ht++) {
                tok = list_2[_ht];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][28];
                for (_hu = 0, _len123 = list_3.length; _hu < _len123; _hu++) {
                  tok = list_3[_hu];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][42];
                  for (_hv = 0, _len124 = list_4.length; _hv < _len124; _hv++) {
                    tok = list_4[_hv];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][30];
                    for (_hw = 0, _len125 = list_5.length; _hw < _len125; _hw++) {
                      tok = list_5[_hw];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "switch";
                      mx_hash_stub["ti"] = "switch";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][166] = list_1.length;
            FAcache[start_pos][156].append(ret_list);
            break;
          case 158:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 queue */
            chk_len = stack.push([158, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hx = _ref129 = FAcounter[b_0][174], _ref130 = list_1.length; _hx < _ref130; idx_1 = _hx += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_hy = 0, _len126 = list_2.length; _hy < _len126; _hy++) {
                tok = list_2[_hy];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hz = 0, _len127 = list_3.length; _hz < _len127; _hz++) {
                  tok = list_3[_hz];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ia = 0, _len128 = list_4.length; _ia < _len128; _ia++) {
                    tok = list_4[_ia];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    for (_ib = 0, _len129 = list_5.length; _ib < _len129; _ib++) {
                      tok = list_5[_ib];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][43];
                      if (state_6 !== STATE_FL) {
                        if (request_make(43, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][43];
                      for (_ic = 0, _len130 = list_6.length; _ic < _len130; _ic++) {
                        tok = list_6[_ic];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        for (_id = 0, _len131 = list_7.length; _id < _len131; _id++) {
                          tok = list_7[_id];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_ie = 0, _len132 = list_8.length; _ie < _len132; _ie++) {
                            tok = list_8[_ie];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            state_9 = FAstate[b_8][27];
                            if (state_9 !== STATE_FL) {
                              if (request_make(27, b_8, 0)) {
                                continue;
                              }
                            }
                            list_9 = FAcache[b_8][27];
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 159;
            }
            break;
          case 159:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _if = _ref131 = FAcounter[b_0][183], _ref132 = list_1.length; _if < _ref132; idx_1 = _if += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_ig = 0, _len133 = list_2.length; _ig < _len133; _ig++) {
                tok = list_2[_ig];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ih = 0, _len134 = list_3.length; _ih < _len134; _ih++) {
                  tok = list_3[_ih];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ii = 0, _len135 = list_4.length; _ii < _len135; _ii++) {
                    tok = list_4[_ii];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_ij = 0, _len136 = list_5.length; _ij < _len136; _ij++) {
                      tok = list_5[_ij];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][43];
                      for (_ik = 0, _len137 = list_6.length; _ik < _len137; _ik++) {
                        tok = list_6[_ik];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_il = 0, _len138 = list_7.length; _il < _len138; _il++) {
                          tok = list_7[_il];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_im = 0, _len139 = list_8.length; _im < _len139; _im++) {
                            tok = list_8[_im];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][27];
                            for (_in = 0, _len140 = list_9.length; _in < _len140; _in++) {
                              tok = list_9[_in];
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              arg_list = node.value_array;
                              mx_hash_stub = node.mx_hash = {};
                              mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124";
                              mx_hash_stub.hash_key = "stmt";
                              mx_hash_stub.hash_key_idx = 25;
                              mx_hash_stub["ult"] = "for_range";
                              mx_hash_stub["ti"] = "macro";
                              mx_hash_stub["eol"] = 1;
                              node.b = node.value_array.last().b;
                              ret_list.push(node.clone());
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][183] = list_1.length;
            FAcache[start_pos][158].append(ret_list);
            break;
          case 160:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 queue */
            chk_len = stack.push([160, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _io = _ref133 = FAcounter[b_0][193], _ref134 = list_1.length; _io < _ref134; idx_1 = _io += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_ip = 0, _len141 = list_2.length; _ip < _len141; _ip++) {
                tok = list_2[_ip];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_iq = 0, _len142 = list_3.length; _iq < _len142; _iq++) {
                  tok = list_3[_iq];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ir = 0, _len143 = list_4.length; _ir < _len143; _ir++) {
                    tok = list_4[_ir];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    for (_is = 0, _len144 = list_5.length; _is < _len144; _is++) {
                      tok = list_5[_is];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][43];
                      if (state_6 !== STATE_FL) {
                        if (request_make(43, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][43];
                      for (_it = 0, _len145 = list_6.length; _it < _len145; _it++) {
                        tok = list_6[_it];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        for (_iu = 0, _len146 = list_7.length; _iu < _len146; _iu++) {
                          tok = list_7[_iu];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_iv = 0, _len147 = list_8.length; _iv < _len147; _iv++) {
                            tok = list_8[_iv];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_iw = 0, _len148 = list_9.length; _iw < _len148; _iw++) {
                              tok = list_9[_iw];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              state_10 = FAstate[b_9][24];
                              if (state_10 !== STATE_FL) {
                                if (request_make(24, b_9, 0)) {
                                  continue;
                                }
                              }
                              list_10 = FAcache[b_9][24];
                              for (_ix = 0, _len149 = list_10.length; _ix < _len149; _ix++) {
                                tok = list_10[_ix];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                state_11 = FAstate[b_10][27];
                                if (state_11 !== STATE_FL) {
                                  if (request_make(27, b_10, 0)) {
                                    continue;
                                  }
                                }
                                list_11 = FAcache[b_10][27];
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 161;
            }
            break;
          case 161:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _iy = _ref135 = FAcounter[b_0][204], _ref136 = list_1.length; _iy < _ref136; idx_1 = _iy += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_iz = 0, _len150 = list_2.length; _iz < _len150; _iz++) {
                tok = list_2[_iz];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ja = 0, _len151 = list_3.length; _ja < _len151; _ja++) {
                  tok = list_3[_ja];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_jb = 0, _len152 = list_4.length; _jb < _len152; _jb++) {
                    tok = list_4[_jb];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_jc = 0, _len153 = list_5.length; _jc < _len153; _jc++) {
                      tok = list_5[_jc];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][43];
                      for (_jd = 0, _len154 = list_6.length; _jd < _len154; _jd++) {
                        tok = list_6[_jd];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_je = 0, _len155 = list_7.length; _je < _len155; _je++) {
                          tok = list_7[_je];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_jf = 0, _len156 = list_8.length; _jf < _len156; _jf++) {
                            tok = list_8[_jf];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_jg = 0, _len157 = list_9.length; _jg < _len157; _jg++) {
                              tok = list_9[_jg];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              list_10 = FAcache[b_9][24];
                              for (_jh = 0, _len158 = list_10.length; _jh < _len158; _jh++) {
                                tok = list_10[_jh];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                list_11 = FAcache[b_10][27];
                                for (_ji = 0, _len159 = list_11.length; _ji < _len159; _ji++) {
                                  tok = list_11[_ji];
                                  b_11 = tok.b;
                                  node.value_array.push(tok);
                                  arg_list = node.value_array;
                                  mx_hash_stub = node.mx_hash = {};
                                  mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125";
                                  mx_hash_stub.hash_key = "stmt";
                                  mx_hash_stub.hash_key_idx = 25;
                                  mx_hash_stub["ult"] = "for_range";
                                  mx_hash_stub["ti"] = "macro";
                                  mx_hash_stub["eol"] = 1;
                                  node.b = node.value_array.last().b;
                                  ret_list.push(node.clone());
                                  node.value_array.pop();
                                }
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][204] = list_1.length;
            FAcache[start_pos][160].append(ret_list);
            break;
          case 162:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 queue */
            chk_len = stack.push([162, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jj = _ref137 = FAcounter[b_0][208], _ref138 = list_1.length; _jj < _ref138; idx_1 = _jj += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_jk = 0, _len160 = list_2.length; _jk < _len160; _jk++) {
                tok = list_2[_jk];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_jl = 0, _len161 = list_3.length; _jl < _len161; _jl++) {
                  tok = list_3[_jl];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][24];
                  if (state_4 !== STATE_FL) {
                    if (request_make(24, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][24];
                  for (_jm = 0, _len162 = list_4.length; _jm < _len162; _jm++) {
                    tok = list_4[_jm];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 163;
            }
            break;
          case 163:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jn = _ref139 = FAcounter[b_0][213], _ref140 = list_1.length; _jn < _ref140; idx_1 = _jn += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_jo = 0, _len163 = list_2.length; _jo < _len163; _jo++) {
                tok = list_2[_jo];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_jp = 0, _len164 = list_3.length; _jp < _len164; _jp++) {
                  tok = list_3[_jp];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][24];
                  for (_jq = 0, _len165 = list_4.length; _jq < _len165; _jq++) {
                    tok = list_4[_jq];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_jr = 0, _len166 = list_5.length; _jr < _len166; _jr++) {
                      tok = list_5[_jr];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "for_col";
                      mx_hash_stub["ti"] = "macro";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][213] = list_1.length;
            FAcache[start_pos][162].append(ret_list);
            break;
          case 164:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 queue */
            chk_len = stack.push([164, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _js = _ref141 = FAcounter[b_0][219], _ref142 = list_1.length; _js < _ref142; idx_1 = _js += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_jt = 0, _len167 = list_2.length; _jt < _len167; _jt++) {
                tok = list_2[_jt];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ju = 0, _len168 = list_3.length; _ju < _len168; _ju++) {
                  tok = list_3[_ju];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][2];
                  if (state_4 !== STATE_FL) {
                    if (request_make(2, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][2];
                  for (_jv = 0, _len169 = list_4.length; _jv < _len169; _jv++) {
                    tok = list_4[_jv];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_jw = 0, _len170 = list_5.length; _jw < _len170; _jw++) {
                      tok = list_5[_jw];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][24];
                      if (state_6 !== STATE_FL) {
                        if (request_make(24, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][24];
                      for (_jx = 0, _len171 = list_6.length; _jx < _len171; _jx++) {
                        tok = list_6[_jx];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][27];
                        if (state_7 !== STATE_FL) {
                          if (request_make(27, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][27];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 165;
            }
            break;
          case 165:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jy = _ref143 = FAcounter[b_0][226], _ref144 = list_1.length; _jy < _ref144; idx_1 = _jy += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_jz = 0, _len172 = list_2.length; _jz < _len172; _jz++) {
                tok = list_2[_jz];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ka = 0, _len173 = list_3.length; _ka < _len173; _ka++) {
                  tok = list_3[_ka];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][2];
                  for (_kb = 0, _len174 = list_4.length; _kb < _len174; _kb++) {
                    tok = list_4[_kb];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_kc = 0, _len175 = list_5.length; _kc < _len175; _kc++) {
                      tok = list_5[_kc];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][24];
                      for (_kd = 0, _len176 = list_6.length; _kd < _len176; _kd++) {
                        tok = list_6[_kd];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][27];
                        for (_ke = 0, _len177 = list_7.length; _ke < _len177; _ke++) {
                          tok = list_7[_ke];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 25;
                          mx_hash_stub["ult"] = "for_col";
                          mx_hash_stub["ti"] = "macro";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][226] = list_1.length;
            FAcache[start_pos][164].append(ret_list);
            break;
          case 166:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 queue */
            chk_len = stack.push([166, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][46];
            if (state_1 !== STATE_FL) {
              if (request_make(46, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][46];
            for (idx_1 = _kf = _ref145 = FAcounter[b_0][228], _ref146 = list_1.length; _kf < _ref146; idx_1 = _kf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _kg = 0; _kg < 1; _i_2 = ++_kg) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _kh = 0; _kh < 1; _i_2 = ++_kh) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][24];
                if (state_2 !== STATE_FL) {
                  if (request_make(24, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][24];
                for (_ki = 0, _len178 = list_2.length; _ki < _len178; _ki++) {
                  tok = list_2[_ki];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_kj = 0, _len179 = hyp_list_2.length; _kj < _len179; _kj++) {
                tok_list = hyp_list_2[_kj];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 167;
            }
            break;
          case 167:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][46];
            for (idx_1 = _kk = _ref147 = FAcounter[b_0][230], _ref148 = list_1.length; _kk < _ref148; idx_1 = _kk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _kl = 0; _kl < 1; _i_2 = ++_kl) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _km = 0; _km < 1; _i_2 = ++_km) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][24];
                for (_kn = 0, _len180 = list_2.length; _kn < _len180; _kn++) {
                  tok = list_2[_kn];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ko = 0, _len181 = hyp_list_2.length; _ko < _len181; _ko++) {
                tok_list = hyp_list_2[_ko];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "return";
                mx_hash_stub["ti"] = "return";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][230] = list_1.length;
            FAcache[start_pos][166].append(ret_list);
            break;
          case 168:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 queue */
            chk_len = stack.push([168, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _kp = _ref149 = FAcounter[b_0][235], _ref150 = list_1.length; _kp < _ref150; idx_1 = _kp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_kq = 0, _len182 = list_2.length; _kq < _len182; _kq++) {
                tok = list_2[_kq];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _kr = 0; _kr < 1; _i_3 = ++_kr) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ks = 0; _ks < 1; _i_3 = ++_ks) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_kt = 0, _len183 = list_3.length; _kt < _len183; _kt++) {
                    tok = list_3[_kt];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ku = 0, _len184 = hyp_list_3.length; _ku < _len184; _ku++) {
                  tok_list = hyp_list_3[_ku];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_kv = 0, _len185 = list_4.length; _kv < _len185; _kv++) {
                    tok = list_4[_kv];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_kw = 0, _len186 = list_5.length; _kw < _len186; _kw++) {
                      tok = list_5[_kw];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 169;
            }
            break;
          case 169:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _kx = _ref151 = FAcounter[b_0][242], _ref152 = list_1.length; _kx < _ref152; idx_1 = _kx += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ky = 0, _len187 = list_2.length; _ky < _len187; _ky++) {
                tok = list_2[_ky];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _kz = 0; _kz < 1; _i_3 = ++_kz) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _la = 0; _la < 1; _i_3 = ++_la) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_lb = 0, _len188 = list_3.length; _lb < _len188; _lb++) {
                    tok = list_3[_lb];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lc = 0, _len189 = hyp_list_3.length; _lc < _len189; _lc++) {
                  tok_list = hyp_list_3[_lc];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ld = 0, _len190 = list_4.length; _ld < _len190; _ld++) {
                    tok = list_4[_ld];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_le = 0, _len191 = list_5.length; _le < _len191; _le++) {
                      tok = list_5[_le];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lf = 0, _len192 = list_6.length; _lf < _len192; _lf++) {
                        tok = list_6[_lf];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_lg = 0, _len193 = list_7.length; _lg < _len193; _lg++) {
                          tok = list_7[_lg];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 25;
                          mx_hash_stub["ult"] = "fn_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][242] = list_1.length;
            FAcache[start_pos][168].append(ret_list);
            break;
          case 170:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 queue */
            chk_len = stack.push([170, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _lh = _ref153 = FAcounter[b_0][249], _ref154 = list_1.length; _lh < _ref154; idx_1 = _lh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_li = 0, _len194 = list_2.length; _li < _len194; _li++) {
                tok = list_2[_li];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _lj = 0; _lj < 1; _i_3 = ++_lj) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lk = 0; _lk < 1; _i_3 = ++_lk) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_ll = 0, _len195 = list_3.length; _ll < _len195; _ll++) {
                    tok = list_3[_ll];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lm = 0, _len196 = hyp_list_3.length; _lm < _len196; _lm++) {
                  tok_list = hyp_list_3[_lm];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ln = 0, _len197 = list_4.length; _ln < _len197; _ln++) {
                    tok = list_4[_ln];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_lo = 0, _len198 = list_5.length; _lo < _len198; _lo++) {
                      tok = list_5[_lo];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lp = 0, _len199 = list_6.length; _lp < _len199; _lp++) {
                        tok = list_6[_lp];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_lq = 0, _len200 = list_7.length; _lq < _len200; _lq++) {
                          tok = list_7[_lq];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          state_8 = FAstate[b_7][27];
                          if (state_8 !== STATE_FL) {
                            if (request_make(27, b_7, 0)) {
                              continue;
                            }
                          }
                          list_8 = FAcache[b_7][27];
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 171;
            }
            break;
          case 171:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _lr = _ref155 = FAcounter[b_0][257], _ref156 = list_1.length; _lr < _ref156; idx_1 = _lr += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ls = 0, _len201 = list_2.length; _ls < _len201; _ls++) {
                tok = list_2[_ls];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _lt = 0; _lt < 1; _i_3 = ++_lt) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lu = 0; _lu < 1; _i_3 = ++_lu) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_lv = 0, _len202 = list_3.length; _lv < _len202; _lv++) {
                    tok = list_3[_lv];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lw = 0, _len203 = hyp_list_3.length; _lw < _len203; _lw++) {
                  tok_list = hyp_list_3[_lw];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_lx = 0, _len204 = list_4.length; _lx < _len204; _lx++) {
                    tok = list_4[_lx];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ly = 0, _len205 = list_5.length; _ly < _len205; _ly++) {
                      tok = list_5[_ly];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lz = 0, _len206 = list_6.length; _lz < _len206; _lz++) {
                        tok = list_6[_lz];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ma = 0, _len207 = list_7.length; _ma < _len207; _ma++) {
                          tok = list_7[_ma];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][27];
                          for (_mb = 0, _len208 = list_8.length; _mb < _len208; _mb++) {
                            tok = list_8[_mb];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 25;
                            mx_hash_stub["ult"] = "fn_decl";
                            mx_hash_stub["eol"] = 1;
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][257] = list_1.length;
            FAcache[start_pos][170].append(ret_list);
            break;
          case 172:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 queue */
            chk_len = stack.push([172, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _mc = _ref157 = FAcounter[b_0][264], _ref158 = list_1.length; _mc < _ref158; idx_1 = _mc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_md = 0, _len209 = list_2.length; _md < _len209; _md++) {
                tok = list_2[_md];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _me = 0; _me < 1; _i_3 = ++_me) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mf = 0; _mf < 1; _i_3 = ++_mf) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_mg = 0, _len210 = list_3.length; _mg < _len210; _mg++) {
                    tok = list_3[_mg];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_mh = 0, _len211 = hyp_list_3.length; _mh < _len211; _mh++) {
                  tok_list = hyp_list_3[_mh];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_mi = 0, _len212 = list_4.length; _mi < _len212; _mi++) {
                    tok = list_4[_mi];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_mj = 0, _len213 = list_5.length; _mj < _len213; _mj++) {
                      tok = list_5[_mj];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      for (_mk = 0, _len214 = list_6.length; _mk < _len214; _mk++) {
                        tok = list_6[_mk];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ml = 0, _len215 = list_7.length; _ml < _len215; _ml++) {
                          tok = list_7[_ml];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          state_8 = FAstate[b_7][24];
                          if (state_8 !== STATE_FL) {
                            if (request_make(24, b_7, 0)) {
                              continue;
                            }
                          }
                          list_8 = FAcache[b_7][24];
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 173;
            }
            break;
          case 173:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _mm = _ref159 = FAcounter[b_0][272], _ref160 = list_1.length; _mm < _ref160; idx_1 = _mm += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_mn = 0, _len216 = list_2.length; _mn < _len216; _mn++) {
                tok = list_2[_mn];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _mo = 0; _mo < 1; _i_3 = ++_mo) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mp = 0; _mp < 1; _i_3 = ++_mp) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_mq = 0, _len217 = list_3.length; _mq < _len217; _mq++) {
                    tok = list_3[_mq];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_mr = 0, _len218 = hyp_list_3.length; _mr < _len218; _mr++) {
                  tok_list = hyp_list_3[_mr];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ms = 0, _len219 = list_4.length; _ms < _len219; _ms++) {
                    tok = list_4[_ms];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_mt = 0, _len220 = list_5.length; _mt < _len220; _mt++) {
                      tok = list_5[_mt];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_mu = 0, _len221 = list_6.length; _mu < _len221; _mu++) {
                        tok = list_6[_mu];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_mv = 0, _len222 = list_7.length; _mv < _len222; _mv++) {
                          tok = list_7[_mv];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][24];
                          for (_mw = 0, _len223 = list_8.length; _mw < _len223; _mw++) {
                            tok = list_8[_mw];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 25;
                            mx_hash_stub["ult"] = "fn_decl";
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][272] = list_1.length;
            FAcache[start_pos][172].append(ret_list);
            break;
          case 174:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 queue */
            chk_len = stack.push([174, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _mx = _ref161 = FAcounter[b_0][275], _ref162 = list_1.length; _mx < _ref162; idx_1 = _mx += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_my = 0, _len224 = list_2.length; _my < _len224; _my++) {
                tok = list_2[_my];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _mz = 0; _mz < 1; _i_3 = ++_mz) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _na = 0; _na < 1; _i_3 = ++_na) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_nb = 0, _len225 = list_3.length; _nb < _len225; _nb++) {
                    tok = list_3[_nb];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_nc = 0, _len226 = hyp_list_3.length; _nc < _len226; _nc++) {
                  tok_list = hyp_list_3[_nc];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 175;
            }
            break;
          case 175:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _nd = _ref163 = FAcounter[b_0][280], _ref164 = list_1.length; _nd < _ref164; idx_1 = _nd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ne = 0, _len227 = list_2.length; _ne < _len227; _ne++) {
                tok = list_2[_ne];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nf = 0; _nf < 1; _i_3 = ++_nf) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ng = 0; _ng < 1; _i_3 = ++_ng) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_nh = 0, _len228 = list_3.length; _nh < _len228; _nh++) {
                    tok = list_3[_nh];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ni = 0, _len229 = hyp_list_3.length; _ni < _len229; _ni++) {
                  tok_list = hyp_list_3[_ni];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_nj = 0, _len230 = list_4.length; _nj < _len230; _nj++) {
                    tok = list_4[_nj];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_nk = 0, _len231 = list_5.length; _nk < _len231; _nk++) {
                      tok = list_5[_nk];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "fn_decl";
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][280] = list_1.length;
            FAcache[start_pos][174].append(ret_list);
            break;
          case 176:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 queue */
            chk_len = stack.push([176, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _nl = _ref165 = FAcounter[b_0][285], _ref166 = list_1.length; _nl < _ref166; idx_1 = _nl += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_nm = 0, _len232 = list_2.length; _nm < _len232; _nm++) {
                tok = list_2[_nm];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nn = 0; _nn < 1; _i_3 = ++_nn) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _no = 0; _no < 1; _i_3 = ++_no) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_np = 0, _len233 = list_3.length; _np < _len233; _np++) {
                    tok = list_3[_np];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_nq = 0, _len234 = hyp_list_3.length; _nq < _len234; _nq++) {
                  tok_list = hyp_list_3[_nq];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_nr = 0, _len235 = list_4.length; _nr < _len235; _nr++) {
                    tok = list_4[_nr];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ns = 0, _len236 = list_5.length; _ns < _len236; _ns++) {
                      tok = list_5[_ns];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][27];
                      if (state_6 !== STATE_FL) {
                        if (request_make(27, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][27];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 177;
            }
            break;
          case 177:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _nt = _ref167 = FAcounter[b_0][291], _ref168 = list_1.length; _nt < _ref168; idx_1 = _nt += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_nu = 0, _len237 = list_2.length; _nu < _len237; _nu++) {
                tok = list_2[_nu];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nv = 0; _nv < 1; _i_3 = ++_nv) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _nw = 0; _nw < 1; _i_3 = ++_nw) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_nx = 0, _len238 = list_3.length; _nx < _len238; _nx++) {
                    tok = list_3[_nx];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ny = 0, _len239 = hyp_list_3.length; _ny < _len239; _ny++) {
                  tok_list = hyp_list_3[_ny];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_nz = 0, _len240 = list_4.length; _nz < _len240; _nz++) {
                    tok = list_4[_nz];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_oa = 0, _len241 = list_5.length; _oa < _len241; _oa++) {
                      tok = list_5[_oa];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][27];
                      for (_ob = 0, _len242 = list_6.length; _ob < _len242; _ob++) {
                        tok = list_6[_ob];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137";
                        mx_hash_stub.hash_key = "stmt";
                        mx_hash_stub.hash_key_idx = 25;
                        mx_hash_stub["ult"] = "fn_decl";
                        mx_hash_stub["eol"] = 1;
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][291] = list_1.length;
            FAcache[start_pos][176].append(ret_list);
            break;
          case 178:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 queue */
            chk_len = stack.push([178, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _oc = _ref169 = FAcounter[b_0][296], _ref170 = list_1.length; _oc < _ref170; idx_1 = _oc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_od = 0, _len243 = list_2.length; _od < _len243; _od++) {
                tok = list_2[_od];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _oe = 0; _oe < 1; _i_3 = ++_oe) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _of = 0; _of < 1; _i_3 = ++_of) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_og = 0, _len244 = list_3.length; _og < _len244; _og++) {
                    tok = list_3[_og];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_oh = 0, _len245 = hyp_list_3.length; _oh < _len245; _oh++) {
                  tok_list = hyp_list_3[_oh];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_oi = 0, _len246 = list_4.length; _oi < _len246; _oi++) {
                    tok = list_4[_oi];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_oj = 0, _len247 = list_5.length; _oj < _len247; _oj++) {
                      tok = list_5[_oj];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][24];
                      if (state_6 !== STATE_FL) {
                        if (request_make(24, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][24];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 179;
            }
            break;
          case 179:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _ok = _ref171 = FAcounter[b_0][302], _ref172 = list_1.length; _ok < _ref172; idx_1 = _ok += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ol = 0, _len248 = list_2.length; _ol < _len248; _ol++) {
                tok = list_2[_ol];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _om = 0; _om < 1; _i_3 = ++_om) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _on = 0; _on < 1; _i_3 = ++_on) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_oo = 0, _len249 = list_3.length; _oo < _len249; _oo++) {
                    tok = list_3[_oo];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_op = 0, _len250 = hyp_list_3.length; _op < _len250; _op++) {
                  tok_list = hyp_list_3[_op];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_oq = 0, _len251 = list_4.length; _oq < _len251; _oq++) {
                    tok = list_4[_oq];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_or = 0, _len252 = list_5.length; _or < _len252; _or++) {
                      tok = list_5[_or];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][24];
                      for (_os = 0, _len253 = list_6.length; _os < _len253; _os++) {
                        tok = list_6[_os];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138";
                        mx_hash_stub.hash_key = "stmt";
                        mx_hash_stub.hash_key_idx = 25;
                        mx_hash_stub["ult"] = "fn_decl";
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][302] = list_1.length;
            FAcache[start_pos][178].append(ret_list);
            break;
          case 180:

            /* rule_class_Htok_identifier_ultEclass_decl__u145 queue */
            chk_len = stack.push([180, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ot = _ref173 = FAcounter[b_0][303], _ref174 = list_1.length; _ot < _ref174; idx_1 = _ot += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 181;
            }
            break;
          case 181:

            /* rule_class_Htok_identifier_ultEclass_decl__u145 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ou = _ref175 = FAcounter[b_0][305], _ref176 = list_1.length; _ou < _ref176; idx_1 = _ou += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_ov = 0, _len254 = list_2.length; _ov < _len254; _ov++) {
                tok = list_2[_ov];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_class_Htok_identifier_ultEclass_decl__u145";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "class_decl";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][305] = list_1.length;
            FAcache[start_pos][180].append(ret_list);
            break;
          case 182:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 queue */
            chk_len = stack.push([182, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ow = _ref177 = FAcounter[b_0][307], _ref178 = list_1.length; _ow < _ref178; idx_1 = _ow += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_ox = 0, _len255 = list_2.length; _ox < _len255; _ox++) {
                tok = list_2[_ox];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 183;
            }
            break;
          case 183:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _oy = _ref179 = FAcounter[b_0][310], _ref180 = list_1.length; _oy < _ref180; idx_1 = _oy += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_oz = 0, _len256 = list_2.length; _oz < _len256; _oz++) {
                tok = list_2[_oz];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_pa = 0, _len257 = list_3.length; _pa < _len257; _pa++) {
                  tok = list_3[_pa];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "class_decl";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][310] = list_1.length;
            FAcache[start_pos][182].append(ret_list);
            break;
          case 184:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 queue */
            chk_len = stack.push([184, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pb = _ref181 = FAcounter[b_0][311], _ref182 = list_1.length; _pb < _ref182; idx_1 = _pb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 185;
            }
            break;
          case 185:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pc = _ref183 = FAcounter[b_0][313], _ref184 = list_1.length; _pc < _ref184; idx_1 = _pc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_pd = 0, _len258 = list_2.length; _pd < _len258; _pd++) {
                tok = list_2[_pd];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "directive_fn_call";
                mx_hash_stub["ti"] = "macro";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][313] = list_1.length;
            FAcache[start_pos][184].append(ret_list);
            break;
          case 186:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 queue */
            chk_len = stack.push([186, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pe = _ref185 = FAcounter[b_0][315], _ref186 = list_1.length; _pe < _ref186; idx_1 = _pe += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][47];
              if (state_2 !== STATE_FL) {
                if (request_make(47, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][47];
              for (_pf = 0, _len259 = list_2.length; _pf < _len259; _pf++) {
                tok = list_2[_pf];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 187;
            }
            break;
          case 187:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pg = _ref187 = FAcounter[b_0][318], _ref188 = list_1.length; _pg < _ref188; idx_1 = _pg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][47];
              for (_ph = 0, _len260 = list_2.length; _ph < _len260; _ph++) {
                tok = list_2[_ph];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_pi = 0, _len261 = list_3.length; _pi < _len261; _pi++) {
                  tok = list_3[_pi];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(!!arg_list[0].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "directive_fn_call";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][318] = list_1.length;
            FAcache[start_pos][186].append(ret_list);
            break;
          case 188:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 queue */
            chk_len = stack.push([188, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pj = _ref189 = FAcounter[b_0][322], _ref190 = list_1.length; _pj < _ref190; idx_1 = _pj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pk = 0, _len262 = list_2.length; _pk < _len262; _pk++) {
                tok = list_2[_pk];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _pl = 0; _pl < 1; _i_3 = ++_pl) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _pm = 0; _pm < 1; _i_3 = ++_pm) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][47];
                  if (state_3 !== STATE_FL) {
                    if (request_make(47, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][47];
                  for (_pn = 0, _len263 = list_3.length; _pn < _len263; _pn++) {
                    tok = list_3[_pn];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_po = 0, _len264 = hyp_list_3.length; _po < _len264; _po++) {
                  tok_list = hyp_list_3[_po];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_pp = 0, _len265 = list_4.length; _pp < _len265; _pp++) {
                    tok = list_4[_pp];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 189;
            }
            break;
          case 189:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pq = _ref191 = FAcounter[b_0][327], _ref192 = list_1.length; _pq < _ref192; idx_1 = _pq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pr = 0, _len266 = list_2.length; _pr < _len266; _pr++) {
                tok = list_2[_pr];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ps = 0; _ps < 1; _i_3 = ++_ps) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _pt = 0; _pt < 1; _i_3 = ++_pt) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][47];
                  for (_pu = 0, _len267 = list_3.length; _pu < _len267; _pu++) {
                    tok = list_3[_pu];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_pv = 0, _len268 = hyp_list_3.length; _pv < _len268; _pv++) {
                  tok_list = hyp_list_3[_pv];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_pw = 0, _len269 = list_4.length; _pw < _len269; _pw++) {
                    tok = list_4[_pw];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_px = 0, _len270 = list_5.length; _px < _len270; _px++) {
                      tok = list_5[_px];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      if (!(!arg_list[0].mx_hash.tail_space)) {
                        node.value_array.pop();
                        continue;
                      }
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "directive_fn_call";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][327] = list_1.length;
            FAcache[start_pos][188].append(ret_list);
            break;
          case 191:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 queue */
            chk_len = stack.push([191, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 192;
            }
            break;
          case 192:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _py = _ref193 = FAcounter[b_0][328], _ref194 = list_1.length; _py < _ref194; idx_1 = _py += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7";
              mx_hash_stub.hash_key = "lvalue";
              mx_hash_stub.hash_key_idx = 26;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "id";
              mx_hash_stub["ti"] = "id";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][328] = list_1.length;
            FAcache[start_pos][191].append(ret_list);
            break;
          case 193:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 queue */
            chk_len = stack.push([193, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _pz = _ref195 = FAcounter[b_0][330], _ref196 = list_1.length; _pz < _ref196; idx_1 = _pz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qa = 0, _len271 = list_2.length; _qa < _len271; _qa++) {
                tok = list_2[_qa];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][2];
                if (state_3 !== STATE_FL) {
                  if (request_make(2, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][2];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 194;
            }
            break;
          case 194:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _qb = _ref197 = FAcounter[b_0][333], _ref198 = list_1.length; _qb < _ref198; idx_1 = _qb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qc = 0, _len272 = list_2.length; _qc < _len272; _qc++) {
                tok = list_2[_qc];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][2];
                for (_qd = 0, _len273 = list_3.length; _qd < _len273; _qd++) {
                  tok = list_3[_qd];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === -9000)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91";
                  mx_hash_stub.hash_key = "lvalue";
                  mx_hash_stub.hash_key_idx = 26;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "field_access";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["tail_space"] = arg_list[2].mx_hash.tail_space;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][333] = list_1.length;
            FAcache[start_pos][193].append(ret_list);
            break;
          case 195:

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 queue */
            chk_len = stack.push([195, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _qe = _ref199 = FAcounter[b_0][334], _ref200 = list_1.length; _qe < _ref200; idx_1 = _qe += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 196;
            }
            break;
          case 196:

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _qf = _ref201 = FAcounter[b_0][336], _ref202 = list_1.length; _qf < _ref202; idx_1 = _qf += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_qg = 0, _len274 = list_2.length; _qg < _len274; _qg++) {
                tok = list_2[_qg];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93";
                mx_hash_stub.hash_key = "lvalue";
                mx_hash_stub.hash_key_idx = 26;
                mx_hash_stub["priority"] = -9000;
                mx_hash_stub["ult"] = "at_field_access";
                mx_hash_stub["ti"] = "macro";
                mx_hash_stub["tail_space"] = arg_list[1].mx_hash.tail_space;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][336] = list_1.length;
            FAcache[start_pos][195].append(ret_list);
            break;
          case 198:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 queue */
            chk_len = stack.push([198, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][28];
            if (state_1 !== STATE_FL) {
              if (request_make(28, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][28];
            for (idx_1 = _qh = _ref203 = FAcounter[b_0][338], _ref204 = list_1.length; _qh < _ref204; idx_1 = _qh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][29];
              if (state_2 !== STATE_FL) {
                if (request_make(29, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][29];
              for (_qi = 0, _len275 = list_2.length; _qi < _len275; _qi++) {
                tok = list_2[_qi];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][30];
                if (state_3 !== STATE_FL) {
                  if (request_make(30, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][30];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 199;
            }
            break;
          case 199:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][28];
            for (idx_1 = _qj = _ref205 = FAcounter[b_0][341], _ref206 = list_1.length; _qj < _ref206; idx_1 = _qj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][29];
              for (_qk = 0, _len276 = list_2.length; _qk < _len276; _qk++) {
                tok = list_2[_qk];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][30];
                for (_ql = 0, _len277 = list_3.length; _ql < _len277; _ql++) {
                  tok = list_3[_ql];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6";
                  mx_hash_stub.hash_key = "block";
                  mx_hash_stub.hash_key_idx = 27;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "block";
                  mx_hash_stub["ti"] = "block";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][341] = list_1.length;
            FAcache[start_pos][198].append(ret_list);
            break;
          case 202:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 queue */
            chk_len = stack.push([202, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 203;
            }
            break;
          case 203:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qm = _ref207 = FAcounter[b_0][342], _ref208 = list_1.length; _qm < _ref208; idx_1 = _qm += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstmt_ultEdeep_scope_tiEpass__u78";
              mx_hash_stub.hash_key = "stmt_plus";
              mx_hash_stub.hash_key_idx = 29;
              mx_hash_stub["ult"] = "deep_scope";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][342] = list_1.length;
            FAcache[start_pos][202].append(ret_list);
            break;
          case 204:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 queue */
            chk_len = stack.push([204, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qn = _ref209 = FAcounter[b_0][343], _ref210 = list_1.length; _qn < _ref210; idx_1 = _qn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][29];
              if (state_2 !== STATE_FL) {
                if (request_make(29, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][29];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 205;
            }
            break;
          case 205:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qo = _ref211 = FAcounter[b_0][345], _ref212 = list_1.length; _qo < _ref212; idx_1 = _qo += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][29];
              for (_qp = 0, _len278 = list_2.length; _qp < _len278; _qp++) {
                tok = list_2[_qp];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!arg_list[0].mx_hash.eol) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79";
                mx_hash_stub.hash_key = "stmt_plus";
                mx_hash_stub.hash_key_idx = 29;
                mx_hash_stub["ult"] = "deep_scope";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][345] = list_1.length;
            FAcache[start_pos][204].append(ret_list);
            break;
          case 206:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 queue */
            chk_len = stack.push([206, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qq = _ref213 = FAcounter[b_0][347], _ref214 = list_1.length; _qq < _ref214; idx_1 = _qq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_qr = 0, _len279 = list_2.length; _qr < _len279; _qr++) {
                tok = list_2[_qr];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][29];
                if (state_3 !== STATE_FL) {
                  if (request_make(29, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][29];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 207;
            }
            break;
          case 207:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qs = _ref215 = FAcounter[b_0][350], _ref216 = list_1.length; _qs < _ref216; idx_1 = _qs += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_qt = 0, _len280 = list_2.length; _qt < _len280; _qt++) {
                tok = list_2[_qt];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][29];
                for (_qu = 0, _len281 = list_3.length; _qu < _len281; _qu++) {
                  tok = list_3[_qu];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80";
                  mx_hash_stub.hash_key = "stmt_plus";
                  mx_hash_stub.hash_key_idx = 29;
                  mx_hash_stub["ult"] = "deep_scope";
                  mx_hash_stub["ti"] = "stmt_plus_last";
                  mx_hash_stub["eol_pass"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][350] = list_1.length;
            FAcache[start_pos][206].append(ret_list);
            break;
          case 214:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 queue */
            chk_len = stack.push([214, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _qv = _ref217 = FAcounter[b_0][353], _ref218 = list_1.length; _qv < _ref218; idx_1 = _qv += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _qw = 0; _qw < 1; _i_2 = ++_qw) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _qx = 0; _qx < 1; _i_2 = ++_qx) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][49];
                if (state_2 !== STATE_FL) {
                  if (request_make(49, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][49];
                for (_qy = 0, _len282 = list_2.length; _qy < _len282; _qy++) {
                  tok = list_2[_qy];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_qz = 0, _len283 = hyp_list_2.length; _qz < _len283; _qz++) {
                tok_list = hyp_list_2[_qz];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ra = 0; _ra < 1; _i_3 = ++_ra) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _rb = 0; _rb < 1; _i_3 = ++_rb) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][52];
                  if (state_3 !== STATE_FL) {
                    if (request_make(52, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][52];
                  for (_rc = 0, _len284 = list_3.length; _rc < _len284; _rc++) {
                    tok = list_3[_rc];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_rd = 0, _len285 = hyp_list_3.length; _rd < _len285; _rd++) {
                  tok_list = hyp_list_3[_rd];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 215;
            }
            break;
          case 215:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _re = _ref219 = FAcounter[b_0][356], _ref220 = list_1.length; _re < _ref220; idx_1 = _re += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _rf = 0; _rf < 1; _i_2 = ++_rf) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _rg = 0; _rg < 1; _i_2 = ++_rg) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][49];
                for (_rh = 0, _len286 = list_2.length; _rh < _len286; _rh++) {
                  tok = list_2[_rh];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ri = 0, _len287 = hyp_list_2.length; _ri < _len287; _ri++) {
                tok_list = hyp_list_2[_ri];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _rj = 0; _rj < 1; _i_3 = ++_rj) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _rk = 0; _rk < 1; _i_3 = ++_rk) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][52];
                  for (_rl = 0, _len288 = list_3.length; _rl < _len288; _rl++) {
                    tok = list_3[_rl];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_rm = 0, _len289 = hyp_list_3.length; _rm < _len289; _rm++) {
                  tok_list = hyp_list_3[_rm];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162";
                  mx_hash_stub.hash_key = "type";
                  mx_hash_stub.hash_key_idx = 35;
                  mx_hash_stub["ult"] = "type_name";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][356] = list_1.length;
            FAcache[start_pos][214].append(ret_list);
            break;
          case 217:

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 queue */
            chk_len = stack.push([217, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _rn = _ref221 = FAcounter[b_0][358], _ref222 = list_1.length; _rn < _ref222; idx_1 = _rn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ro = 0, _len290 = list_2.length; _ro < _len290; _ro++) {
                tok = list_2[_ro];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 218;
            }
            break;
          case 218:

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _rp = _ref223 = FAcounter[b_0][361], _ref224 = list_1.length; _rp < _ref224; idx_1 = _rp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rq = 0, _len291 = list_2.length; _rq < _len291; _rq++) {
                tok = list_2[_rq];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_rr = 0, _len292 = list_3.length; _rr < _len292; _rr++) {
                  tok = list_3[_rr];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][361] = list_1.length;
            FAcache[start_pos][217].append(ret_list);
            break;
          case 219:

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 queue */
            chk_len = stack.push([219, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][10];
            if (state_1 !== STATE_FL) {
              if (request_make(10, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][10];
            for (idx_1 = _rs = _ref225 = FAcounter[b_0][363], _ref226 = list_1.length; _rs < _ref226; idx_1 = _rs += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rt = 0, _len293 = list_2.length; _rt < _len293; _rt++) {
                tok = list_2[_rt];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 220;
            }
            break;
          case 220:

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][10];
            for (idx_1 = _ru = _ref227 = FAcounter[b_0][366], _ref228 = list_1.length; _ru < _ref228; idx_1 = _ru += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rv = 0, _len294 = list_2.length; _rv < _len294; _rv++) {
                tok = list_2[_rv];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_rw = 0, _len295 = list_3.length; _rw < _len295; _rw++) {
                  tok = list_3[_rw];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][366] = list_1.length;
            FAcache[start_pos][219].append(ret_list);
            break;
          case 221:

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 queue */
            chk_len = stack.push([221, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][11];
            if (state_1 !== STATE_FL) {
              if (request_make(11, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][11];
            for (idx_1 = _rx = _ref229 = FAcounter[b_0][368], _ref230 = list_1.length; _rx < _ref230; idx_1 = _rx += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ry = 0, _len296 = list_2.length; _ry < _len296; _ry++) {
                tok = list_2[_ry];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 222;
            }
            break;
          case 222:

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][11];
            for (idx_1 = _rz = _ref231 = FAcounter[b_0][371], _ref232 = list_1.length; _rz < _ref232; idx_1 = _rz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sa = 0, _len297 = list_2.length; _sa < _len297; _sa++) {
                tok = list_2[_sa];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_sb = 0, _len298 = list_3.length; _sb < _len298; _sb++) {
                  tok = list_3[_sb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][371] = list_1.length;
            FAcache[start_pos][221].append(ret_list);
            break;
          case 224:

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 queue */
            chk_len = stack.push([224, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 225;
            }
            break;
          case 225:

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sc = _ref233 = FAcounter[b_0][372], _ref234 = list_1.length; _sc < _ref234; idx_1 = _sc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97";
              mx_hash_stub.hash_key = "struct_init_list";
              mx_hash_stub.hash_key_idx = 37;
              mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
              mx_hash_stub["struct_init_inline"] = 1;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][372] = list_1.length;
            FAcache[start_pos][224].append(ret_list);
            break;
          case 226:

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 queue */
            chk_len = stack.push([226, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sd = _ref235 = FAcounter[b_0][373], _ref236 = list_1.length; _sd < _ref236; idx_1 = _sd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][37];
              if (state_2 !== STATE_FL) {
                if (request_make(37, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][37];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 227;
            }
            break;
          case 227:

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _se = _ref237 = FAcounter[b_0][375], _ref238 = list_1.length; _se < _ref238; idx_1 = _se += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][37];
              for (_sf = 0, _len299 = list_2.length; _sf < _len299; _sf++) {
                tok = list_2[_sf];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!arg_list[0].mx_hash.eol) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98";
                mx_hash_stub.hash_key = "struct_init_list";
                mx_hash_stub.hash_key_idx = 37;
                mx_hash_stub["struct_init_inline"] = 0;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][375] = list_1.length;
            FAcache[start_pos][226].append(ret_list);
            break;
          case 228:

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 queue */
            chk_len = stack.push([228, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sg = _ref239 = FAcounter[b_0][377], _ref240 = list_1.length; _sg < _ref240; idx_1 = _sg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_sh = 0, _len300 = list_2.length; _sh < _len300; _sh++) {
                tok = list_2[_sh];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][37];
                if (state_3 !== STATE_FL) {
                  if (request_make(37, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][37];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 229;
            }
            break;
          case 229:

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _si = _ref241 = FAcounter[b_0][380], _ref242 = list_1.length; _si < _ref242; idx_1 = _si += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_sj = 0, _len301 = list_2.length; _sj < _len301; _sj++) {
                tok = list_2[_sj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][37];
                for (_sk = 0, _len302 = list_3.length; _sk < _len302; _sk++) {
                  tok = list_3[_sk];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99";
                  mx_hash_stub.hash_key = "struct_init_list";
                  mx_hash_stub.hash_key_idx = 37;
                  mx_hash_stub["struct_init_inline"] = 0;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][380] = list_1.length;
            FAcache[start_pos][228].append(ret_list);
            break;
          case 230:

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 queue */
            chk_len = stack.push([230, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sl = _ref243 = FAcounter[b_0][382], _ref244 = list_1.length; _sl < _ref244; idx_1 = _sl += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sm = 0, _len303 = list_2.length; _sm < _len303; _sm++) {
                tok = list_2[_sm];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][37];
                if (state_3 !== STATE_FL) {
                  if (request_make(37, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][37];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 231;
            }
            break;
          case 231:

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sn = _ref245 = FAcounter[b_0][385], _ref246 = list_1.length; _sn < _ref246; idx_1 = _sn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_so = 0, _len304 = list_2.length; _so < _len304; _so++) {
                tok = list_2[_so];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][37];
                for (_sp = 0, _len305 = list_3.length; _sp < _len305; _sp++) {
                  tok = list_3[_sp];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100";
                  mx_hash_stub.hash_key = "struct_init_list";
                  mx_hash_stub.hash_key_idx = 37;
                  mx_hash_stub["struct_init_inline"] = arg_list[2].mx_hash.struct_init_inline;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][385] = list_1.length;
            FAcache[start_pos][230].append(ret_list);
            break;
          case 232:

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 queue */
            chk_len = stack.push([232, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sq = _ref247 = FAcounter[b_0][388], _ref248 = list_1.length; _sq < _ref248; idx_1 = _sq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sr = 0, _len306 = list_2.length; _sr < _len306; _sr++) {
                tok = list_2[_sr];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][34];
                if (state_3 !== STATE_FL) {
                  if (request_make(34, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][34];
                for (_ss = 0, _len307 = list_3.length; _ss < _len307; _ss++) {
                  tok = list_3[_ss];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][37];
                  if (state_4 !== STATE_FL) {
                    if (request_make(37, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][37];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 233;
            }
            break;
          case 233:

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _st = _ref249 = FAcounter[b_0][392], _ref250 = list_1.length; _st < _ref250; idx_1 = _st += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_su = 0, _len308 = list_2.length; _su < _len308; _su++) {
                tok = list_2[_su];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_sv = 0, _len309 = list_3.length; _sv < _len309; _sv++) {
                  tok = list_3[_sv];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][37];
                  for (_sw = 0, _len310 = list_4.length; _sw < _len310; _sw++) {
                    tok = list_4[_sw];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101";
                    mx_hash_stub.hash_key = "struct_init_list";
                    mx_hash_stub.hash_key_idx = 37;
                    mx_hash_stub["struct_init_inline"] = 0;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][392] = list_1.length;
            FAcache[start_pos][232].append(ret_list);
            break;
          case 235:

            /* rule_XXX_Hstruct_init_listO_XXX___u102 queue */
            chk_len = stack.push([235, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _sx = _ref251 = FAcounter[b_0][394], _ref252 = list_1.length; _sx < _ref252; idx_1 = _sx += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _sy = 0; _sy < 1; _i_2 = ++_sy) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _sz = 0; _sz < 1; _i_2 = ++_sz) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][37];
                if (state_2 !== STATE_FL) {
                  if (request_make(37, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][37];
                for (_ta = 0, _len311 = list_2.length; _ta < _len311; _ta++) {
                  tok = list_2[_ta];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_tb = 0, _len312 = hyp_list_2.length; _tb < _len312; _tb++) {
                tok_list = hyp_list_2[_tb];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 236;
            }
            break;
          case 236:

            /* rule_XXX_Hstruct_init_listO_XXX___u102 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _tc = _ref253 = FAcounter[b_0][397], _ref254 = list_1.length; _tc < _ref254; idx_1 = _tc += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _td = 0; _td < 1; _i_2 = ++_td) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _te = 0; _te < 1; _i_2 = ++_te) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][37];
                for (_tf = 0, _len313 = list_2.length; _tf < _len313; _tf++) {
                  tok = list_2[_tf];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_tg = 0, _len314 = hyp_list_2.length; _tg < _len314; _tg++) {
                tok_list = hyp_list_2[_tg];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_th = 0, _len315 = list_3.length; _th < _len315; _th++) {
                  tok = list_3[_th];
                  if (tok.value !== "}") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Hstruct_init_listO_XXX___u102";
                  mx_hash_stub.hash_key = "struct_init";
                  mx_hash_stub.hash_key_idx = 38;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][397] = list_1.length;
            FAcache[start_pos][235].append(ret_list);
            break;
          case 237:

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 queue */
            chk_len = stack.push([237, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ti = _ref255 = FAcounter[b_0][400], _ref256 = list_1.length; _ti < _ref256; idx_1 = _ti += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][28];
              if (state_2 !== STATE_FL) {
                if (request_make(28, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][28];
              for (_tj = 0, _len316 = list_2.length; _tj < _len316; _tj++) {
                tok = list_2[_tj];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _tk = 0; _tk < 1; _i_3 = ++_tk) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _tl = 0; _tl < 1; _i_3 = ++_tl) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][37];
                  if (state_3 !== STATE_FL) {
                    if (request_make(37, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][37];
                  for (_tm = 0, _len317 = list_3.length; _tm < _len317; _tm++) {
                    tok = list_3[_tm];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_tn = 0, _len318 = hyp_list_3.length; _tn < _len318; _tn++) {
                  tok_list = hyp_list_3[_tn];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][30];
                  if (state_4 !== STATE_FL) {
                    if (request_make(30, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][30];
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 238;
            }
            break;
          case 238:

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _to = _ref257 = FAcounter[b_0][405], _ref258 = list_1.length; _to < _ref258; idx_1 = _to += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_tp = 0, _len319 = list_2.length; _tp < _len319; _tp++) {
                tok = list_2[_tp];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _tq = 0; _tq < 1; _i_3 = ++_tq) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _tr = 0; _tr < 1; _i_3 = ++_tr) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][37];
                  for (_ts = 0, _len320 = list_3.length; _ts < _len320; _ts++) {
                    tok = list_3[_ts];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_tt = 0, _len321 = hyp_list_3.length; _tt < _len321; _tt++) {
                  tok_list = hyp_list_3[_tt];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][30];
                  for (_tu = 0, _len322 = list_4.length; _tu < _len322; _tu++) {
                    tok = list_4[_tu];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_tv = 0, _len323 = list_5.length; _tv < _len323; _tv++) {
                      tok = list_5[_tv];
                      if (tok.value !== "}") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103";
                      mx_hash_stub.hash_key = "struct_init";
                      mx_hash_stub.hash_key_idx = 38;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][405] = list_1.length;
            FAcache[start_pos][237].append(ret_list);
            break;
          case 239:

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 queue */
            chk_len = stack.push([239, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][28];
            if (state_1 !== STATE_FL) {
              if (request_make(28, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][28];
            for (idx_1 = _tw = _ref259 = FAcounter[b_0][407], _ref260 = list_1.length; _tw < _ref260; idx_1 = _tw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][37];
              if (state_2 !== STATE_FL) {
                if (request_make(37, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][37];
              for (_tx = 0, _len324 = list_2.length; _tx < _len324; _tx++) {
                tok = list_2[_tx];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][30];
                if (state_3 !== STATE_FL) {
                  if (request_make(30, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][30];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 240;
            }
            break;
          case 240:

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][28];
            for (idx_1 = _ty = _ref261 = FAcounter[b_0][410], _ref262 = list_1.length; _ty < _ref262; idx_1 = _ty += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][37];
              for (_tz = 0, _len325 = list_2.length; _tz < _len325; _tz++) {
                tok = list_2[_tz];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][30];
                for (_ua = 0, _len326 = list_3.length; _ua < _len326; _ua++) {
                  tok = list_3[_ua];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105";
                  mx_hash_stub.hash_key = "struct_init";
                  mx_hash_stub.hash_key_idx = 38;
                  mx_hash_stub["bracketless_hash"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][410] = list_1.length;
            FAcache[start_pos][239].append(ret_list);
            break;
          case 241:

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 queue */
            chk_len = stack.push([241, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][37];
            if (state_1 !== STATE_FL) {
              if (request_make(37, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][37];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 242;
            }
            break;
          case 242:

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][37];
            for (idx_1 = _ub = _ref263 = FAcounter[b_0][411], _ref264 = list_1.length; _ub < _ref264; idx_1 = _ub += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              if (!arg_list[0].mx_hash.struct_init_inline) {
                node.value_array.pop();
                continue;
              }
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106";
              mx_hash_stub.hash_key = "struct_init";
              mx_hash_stub.hash_key_idx = 38;
              mx_hash_stub["bracketless_hash"] = 1;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][411] = list_1.length;
            FAcache[start_pos][241].append(ret_list);
            break;
          case 244:

            /* rule_Hrvalue___u107 queue */
            chk_len = stack.push([244, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 245;
            }
            break;
          case 245:

            /* rule_Hrvalue___u107 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uc = _ref265 = FAcounter[b_0][412], _ref266 = list_1.length; _uc < _ref266; idx_1 = _uc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue___u107";
              mx_hash_stub.hash_key = "array_init_list";
              mx_hash_stub.hash_key_idx = 39;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][412] = list_1.length;
            FAcache[start_pos][244].append(ret_list);
            break;
          case 246:

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 queue */
            chk_len = stack.push([246, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ud = _ref267 = FAcounter[b_0][414], _ref268 = list_1.length; _ud < _ref268; idx_1 = _ud += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_ue = 0, _len327 = list_2.length; _ue < _len327; _ue++) {
                tok = list_2[_ue];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][39];
                if (state_3 !== STATE_FL) {
                  if (request_make(39, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][39];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 247;
            }
            break;
          case 247:

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uf = _ref269 = FAcounter[b_0][417], _ref270 = list_1.length; _uf < _ref270; idx_1 = _uf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_ug = 0, _len328 = list_2.length; _ug < _len328; _ug++) {
                tok = list_2[_ug];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                for (_uh = 0, _len329 = list_3.length; _uh < _len329; _uh++) {
                  tok = list_3[_uh];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Heol_____Harray_init_list___u108";
                  mx_hash_stub.hash_key = "array_init_list";
                  mx_hash_stub.hash_key_idx = 39;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][417] = list_1.length;
            FAcache[start_pos][246].append(ret_list);
            break;
          case 248:

            /* rule_Hrvalue_XXX______Harray_init_list___u109 queue */
            chk_len = stack.push([248, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ui = _ref271 = FAcounter[b_0][419], _ref272 = list_1.length; _ui < _ref272; idx_1 = _ui += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_uj = 0, _len330 = list_2.length; _uj < _len330; _uj++) {
                tok = list_2[_uj];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][39];
                if (state_3 !== STATE_FL) {
                  if (request_make(39, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][39];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 249;
            }
            break;
          case 249:

            /* rule_Hrvalue_XXX______Harray_init_list___u109 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uk = _ref273 = FAcounter[b_0][422], _ref274 = list_1.length; _uk < _ref274; idx_1 = _uk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ul = 0, _len331 = list_2.length; _ul < _len331; _ul++) {
                tok = list_2[_ul];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                for (_um = 0, _len332 = list_3.length; _um < _len332; _um++) {
                  tok = list_3[_um];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX______Harray_init_list___u109";
                  mx_hash_stub.hash_key = "array_init_list";
                  mx_hash_stub.hash_key_idx = 39;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][422] = list_1.length;
            FAcache[start_pos][248].append(ret_list);
            break;
          case 250:

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 queue */
            chk_len = stack.push([250, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _un = _ref275 = FAcounter[b_0][425], _ref276 = list_1.length; _un < _ref276; idx_1 = _un += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_uo = 0, _len333 = list_2.length; _uo < _len333; _uo++) {
                tok = list_2[_uo];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][34];
                if (state_3 !== STATE_FL) {
                  if (request_make(34, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][34];
                for (_up = 0, _len334 = list_3.length; _up < _len334; _up++) {
                  tok = list_3[_up];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][39];
                  if (state_4 !== STATE_FL) {
                    if (request_make(39, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][39];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 251;
            }
            break;
          case 251:

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uq = _ref277 = FAcounter[b_0][429], _ref278 = list_1.length; _uq < _ref278; idx_1 = _uq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ur = 0, _len335 = list_2.length; _ur < _len335; _ur++) {
                tok = list_2[_ur];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_us = 0, _len336 = list_3.length; _us < _len336; _us++) {
                  tok = list_3[_us];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][39];
                  for (_ut = 0, _len337 = list_4.length; _ut < _len337; _ut++) {
                    tok = list_4[_ut];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Heol_Harray_init_list___u110";
                    mx_hash_stub.hash_key = "array_init_list";
                    mx_hash_stub.hash_key_idx = 39;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][429] = list_1.length;
            FAcache[start_pos][250].append(ret_list);
            break;
          case 253:

            /* rule_XXX_Harray_init_listO_XXX___u111 queue */
            chk_len = stack.push([253, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _uu = _ref279 = FAcounter[b_0][431], _ref280 = list_1.length; _uu < _ref280; idx_1 = _uu += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _uv = 0; _uv < 1; _i_2 = ++_uv) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _uw = 0; _uw < 1; _i_2 = ++_uw) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][39];
                if (state_2 !== STATE_FL) {
                  if (request_make(39, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][39];
                for (_ux = 0, _len338 = list_2.length; _ux < _len338; _ux++) {
                  tok = list_2[_ux];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_uy = 0, _len339 = hyp_list_2.length; _uy < _len339; _uy++) {
                tok_list = hyp_list_2[_uy];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 254;
            }
            break;
          case 254:

            /* rule_XXX_Harray_init_listO_XXX___u111 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _uz = _ref281 = FAcounter[b_0][434], _ref282 = list_1.length; _uz < _ref282; idx_1 = _uz += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _va = 0; _va < 1; _i_2 = ++_va) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _vb = 0; _vb < 1; _i_2 = ++_vb) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                for (_vc = 0, _len340 = list_2.length; _vc < _len340; _vc++) {
                  tok = list_2[_vc];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_vd = 0, _len341 = hyp_list_2.length; _vd < _len341; _vd++) {
                tok_list = hyp_list_2[_vd];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ve = 0, _len342 = list_3.length; _ve < _len342; _ve++) {
                  tok = list_3[_ve];
                  if (tok.value !== "]") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Harray_init_listO_XXX___u111";
                  mx_hash_stub.hash_key = "array_init";
                  mx_hash_stub.hash_key_idx = 40;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][434] = list_1.length;
            FAcache[start_pos][253].append(ret_list);
            break;
          case 255:

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 queue */
            chk_len = stack.push([255, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vf = _ref283 = FAcounter[b_0][437], _ref284 = list_1.length; _vf < _ref284; idx_1 = _vf += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][28];
              if (state_2 !== STATE_FL) {
                if (request_make(28, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][28];
              for (_vg = 0, _len343 = list_2.length; _vg < _len343; _vg++) {
                tok = list_2[_vg];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _vh = 0; _vh < 1; _i_3 = ++_vh) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _vi = 0; _vi < 1; _i_3 = ++_vi) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][39];
                  if (state_3 !== STATE_FL) {
                    if (request_make(39, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][39];
                  for (_vj = 0, _len344 = list_3.length; _vj < _len344; _vj++) {
                    tok = list_3[_vj];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_vk = 0, _len345 = hyp_list_3.length; _vk < _len345; _vk++) {
                  tok_list = hyp_list_3[_vk];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][30];
                  if (state_4 !== STATE_FL) {
                    if (request_make(30, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][30];
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 256;
            }
            break;
          case 256:

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vl = _ref285 = FAcounter[b_0][442], _ref286 = list_1.length; _vl < _ref286; idx_1 = _vl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_vm = 0, _len346 = list_2.length; _vm < _len346; _vm++) {
                tok = list_2[_vm];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _vn = 0; _vn < 1; _i_3 = ++_vn) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _vo = 0; _vo < 1; _i_3 = ++_vo) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  for (_vp = 0, _len347 = list_3.length; _vp < _len347; _vp++) {
                    tok = list_3[_vp];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_vq = 0, _len348 = hyp_list_3.length; _vq < _len348; _vq++) {
                  tok_list = hyp_list_3[_vq];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][30];
                  for (_vr = 0, _len349 = list_4.length; _vr < _len349; _vr++) {
                    tok = list_4[_vr];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_vs = 0, _len350 = list_5.length; _vs < _len350; _vs++) {
                      tok = list_5[_vs];
                      if (tok.value !== "]") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112";
                      mx_hash_stub.hash_key = "array_init";
                      mx_hash_stub.hash_key_idx = 40;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][442] = list_1.length;
            FAcache[start_pos][255].append(ret_list);
            break;
          case 258:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 queue */
            chk_len = stack.push([258, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vt = _ref287 = FAcounter[b_0][447], _ref288 = list_1.length; _vt < _ref288; idx_1 = _vt += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_vu = 0, _len351 = list_2.length; _vu < _len351; _vu++) {
                tok = list_2[_vu];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                for (_vv = 0, _len352 = list_3.length; _vv < _len352; _vv++) {
                  tok = list_3[_vv];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][27];
                  if (state_4 !== STATE_FL) {
                    if (request_make(27, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][27];
                  for (_vw = 0, _len353 = list_4.length; _vw < _len353; _vw++) {
                    tok = list_4[_vw];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _vx = 0; _vx < 1; _i_5 = ++_vx) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _vy = 0; _vy < 1; _i_5 = ++_vy) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_5 = FAstate[b_4][41];
                      if (state_5 !== STATE_FL) {
                        if (request_make(41, b_4, 0)) {
                          continue;
                        }
                      }
                      list_5 = FAcache[b_4][41];
                      for (_vz = 0, _len354 = list_5.length; _vz < _len354; _vz++) {
                        tok = list_5[_vz];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_wa = 0, _len355 = hyp_list_5.length; _wa < _len355; _wa++) {
                      tok_list = hyp_list_5[_wa];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 259;
            }
            break;
          case 259:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wb = _ref289 = FAcounter[b_0][452], _ref290 = list_1.length; _wb < _ref290; idx_1 = _wb += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_wc = 0, _len356 = list_2.length; _wc < _len356; _wc++) {
                tok = list_2[_wc];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_wd = 0, _len357 = list_3.length; _wd < _len357; _wd++) {
                  tok = list_3[_wd];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][27];
                  for (_we = 0, _len358 = list_4.length; _we < _len358; _we++) {
                    tok = list_4[_we];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _wf = 0; _wf < 1; _i_5 = ++_wf) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _wg = 0; _wg < 1; _i_5 = ++_wg) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_5 = FAcache[b_4][41];
                      for (_wh = 0, _len359 = list_5.length; _wh < _len359; _wh++) {
                        tok = list_5[_wh];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_wi = 0, _len360 = hyp_list_5.length; _wi < _len360; _wi++) {
                      tok_list = hyp_list_5[_wi];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115";
                      mx_hash_stub.hash_key = "if_tail_stmt";
                      mx_hash_stub.hash_key_idx = 41;
                      mx_hash_stub["ult"] = "else_if";
                      mx_hash_stub["ti"] = "else_if";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][452] = list_1.length;
            FAcache[start_pos][258].append(ret_list);
            break;
          case 260:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 queue */
            chk_len = stack.push([260, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wj = _ref291 = FAcounter[b_0][456], _ref292 = list_1.length; _wj < _ref292; idx_1 = _wj += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wk = _ref293 = FAcounter[b_0][457], _ref294 = list_1.length; _wk < _ref294; idx_1 = _wk += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wl = _ref295 = FAcounter[b_0][458], _ref296 = list_1.length; _wl < _ref296; idx_1 = _wl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            node = old_node;
            for (_wm = 0, _len361 = hyp_list_1.length; _wm < _len361; _wm++) {
              tok_list = hyp_list_1[_wm];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_wn = 0, _len362 = list_2.length; _wn < _len362; _wn++) {
                tok = list_2[_wn];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_wo = 0, _len363 = list_3.length; _wo < _len363; _wo++) {
                  tok = list_3[_wo];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _wp = 0; _wp < 1; _i_4 = ++_wp) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _wq = 0; _wq < 1; _i_4 = ++_wq) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][41];
                    if (state_4 !== STATE_FL) {
                      if (request_make(41, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][41];
                    for (_wr = 0, _len364 = list_4.length; _wr < _len364; _wr++) {
                      tok = list_4[_wr];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_ws = 0, _len365 = hyp_list_4.length; _ws < _len365; _ws++) {
                    tok_list = hyp_list_4[_ws];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 261;
            }
            break;
          case 261:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wt = _ref297 = FAcounter[b_0][462], _ref298 = list_1.length; _wt < _ref298; idx_1 = _wt += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][462] = list_1.length;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wu = _ref299 = FAcounter[b_0][463], _ref300 = list_1.length; _wu < _ref300; idx_1 = _wu += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][463] = list_1.length;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wv = _ref301 = FAcounter[b_0][464], _ref302 = list_1.length; _wv < _ref302; idx_1 = _wv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][464] = list_1.length;
            node = old_node;
            for (_ww = 0, _len366 = hyp_list_1.length; _ww < _len366; _ww++) {
              tok_list = hyp_list_1[_ww];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_wx = 0, _len367 = list_2.length; _wx < _len367; _wx++) {
                tok = list_2[_wx];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_wy = 0, _len368 = list_3.length; _wy < _len368; _wy++) {
                  tok = list_3[_wy];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _wz = 0; _wz < 1; _i_4 = ++_wz) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _xa = 0; _xa < 1; _i_4 = ++_xa) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][41];
                    for (_xb = 0, _len369 = list_4.length; _xb < _len369; _xb++) {
                      tok = list_4[_xb];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_xc = 0, _len370 = hyp_list_4.length; _xc < _len370; _xc++) {
                    tok_list = hyp_list_4[_xc];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116";
                    mx_hash_stub.hash_key = "if_tail_stmt";
                    mx_hash_stub.hash_key_idx = 41;
                    mx_hash_stub["ult"] = "else_if";
                    mx_hash_stub["ti"] = "else_if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            FAcache[start_pos][260].append(ret_list);
            break;
          case 262:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 queue */
            chk_len = stack.push([262, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xd = _ref303 = FAcounter[b_0][465], _ref304 = list_1.length; _xd < _ref304; idx_1 = _xd += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 263;
            }
            break;
          case 263:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xe = _ref305 = FAcounter[b_0][467], _ref306 = list_1.length; _xe < _ref306; idx_1 = _xe += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_xf = 0, _len371 = list_2.length; _xf < _len371; _xf++) {
                tok = list_2[_xf];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEelse_tiEelse_eolE1__u117";
                mx_hash_stub.hash_key = "if_tail_stmt";
                mx_hash_stub.hash_key_idx = 41;
                mx_hash_stub["ult"] = "else";
                mx_hash_stub["ti"] = "else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][467] = list_1.length;
            FAcache[start_pos][262].append(ret_list);
            break;
          case 265:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 queue */
            chk_len = stack.push([265, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xg = _ref307 = FAcounter[b_0][471], _ref308 = list_1.length; _xg < _ref308; idx_1 = _xg += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_xh = 0, _len372 = list_2.length; _xh < _len372; _xh++) {
                tok = list_2[_xh];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_xi = 0, _len373 = list_3.length; _xi < _len373; _xi++) {
                  tok = list_3[_xi];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _xj = 0; _xj < 1; _i_4 = ++_xj) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _xk = 0; _xk < 1; _i_4 = ++_xk) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][42];
                    if (state_4 !== STATE_FL) {
                      if (request_make(42, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][42];
                    for (_xl = 0, _len374 = list_4.length; _xl < _len374; _xl++) {
                      tok = list_4[_xl];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_xm = 0, _len375 = hyp_list_4.length; _xm < _len375; _xm++) {
                    tok_list = hyp_list_4[_xm];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 266;
            }
            break;
          case 266:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xn = _ref309 = FAcounter[b_0][475], _ref310 = list_1.length; _xn < _ref310; idx_1 = _xn += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_xo = 0, _len376 = list_2.length; _xo < _len376; _xo++) {
                tok = list_2[_xo];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_xp = 0, _len377 = list_3.length; _xp < _len377; _xp++) {
                  tok = list_3[_xp];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _xq = 0; _xq < 1; _i_4 = ++_xq) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _xr = 0; _xr < 1; _i_4 = ++_xr) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][42];
                    for (_xs = 0, _len378 = list_4.length; _xs < _len378; _xs++) {
                      tok = list_4[_xs];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_xt = 0, _len379 = hyp_list_4.length; _xt < _len379; _xt++) {
                    tok_list = hyp_list_4[_xt];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120";
                    mx_hash_stub.hash_key = "switch_tail_stmt";
                    mx_hash_stub.hash_key_idx = 42;
                    mx_hash_stub["ult"] = "switch_when";
                    mx_hash_stub["ti"] = "switch_when";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][475] = list_1.length;
            FAcache[start_pos][265].append(ret_list);
            break;
          case 267:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 queue */
            chk_len = stack.push([267, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xu = _ref311 = FAcounter[b_0][476], _ref312 = list_1.length; _xu < _ref312; idx_1 = _xu += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 268;
            }
            break;
          case 268:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xv = _ref313 = FAcounter[b_0][478], _ref314 = list_1.length; _xv < _ref314; idx_1 = _xv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_xw = 0, _len380 = list_2.length; _xw < _len380; _xw++) {
                tok = list_2[_xw];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121";
                mx_hash_stub.hash_key = "switch_tail_stmt";
                mx_hash_stub.hash_key_idx = 42;
                mx_hash_stub["ult"] = "switch_else";
                mx_hash_stub["ti"] = "switch_else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][478] = list_1.length;
            FAcache[start_pos][267].append(ret_list);
            break;
          case 271:

            /* rule_Htok_identifier_XXX_Htype___u128 queue */
            chk_len = stack.push([271, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _xx = _ref315 = FAcounter[b_0][480], _ref316 = list_1.length; _xx < _ref316; idx_1 = _xx += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_xy = 0, _len381 = list_2.length; _xy < _len381; _xy++) {
                tok = list_2[_xy];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][35];
                if (state_3 !== STATE_FL) {
                  if (request_make(35, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][35];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 272;
            }
            break;
          case 272:

            /* rule_Htok_identifier_XXX_Htype___u128 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _xz = _ref317 = FAcounter[b_0][483], _ref318 = list_1.length; _xz < _ref318; idx_1 = _xz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ya = 0, _len382 = list_2.length; _ya < _len382; _ya++) {
                tok = list_2[_ya];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][35];
                for (_yb = 0, _len383 = list_3.length; _yb < _len383; _yb++) {
                  tok = list_3[_yb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u128";
                  mx_hash_stub.hash_key = "fn_decl_arg";
                  mx_hash_stub.hash_key_idx = 44;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][483] = list_1.length;
            FAcache[start_pos][271].append(ret_list);
            break;
          case 273:

            /* rule_Htok_identifier___u129 queue */
            chk_len = stack.push([273, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 274;
            }
            break;
          case 274:

            /* rule_Htok_identifier___u129 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _yc = _ref319 = FAcounter[b_0][484], _ref320 = list_1.length; _yc < _ref320; idx_1 = _yc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_identifier___u129";
              mx_hash_stub.hash_key = "fn_decl_arg";
              mx_hash_stub.hash_key_idx = 44;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][484] = list_1.length;
            FAcache[start_pos][273].append(ret_list);
            break;
          case 276:

            /* rule_Hfn_decl_arg___u130 queue */
            chk_len = stack.push([276, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][44];
            if (state_1 !== STATE_FL) {
              if (request_make(44, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][44];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 277;
            }
            break;
          case 277:

            /* rule_Hfn_decl_arg___u130 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (idx_1 = _yd = _ref321 = FAcounter[b_0][485], _ref322 = list_1.length; _yd < _ref322; idx_1 = _yd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hfn_decl_arg___u130";
              mx_hash_stub.hash_key = "fn_decl_arg_list";
              mx_hash_stub.hash_key_idx = 45;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][485] = list_1.length;
            FAcache[start_pos][276].append(ret_list);
            break;
          case 278:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 queue */
            chk_len = stack.push([278, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][44];
            if (state_1 !== STATE_FL) {
              if (request_make(44, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][44];
            for (idx_1 = _ye = _ref323 = FAcounter[b_0][487], _ref324 = list_1.length; _ye < _ref324; idx_1 = _ye += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yf = 0, _len384 = list_2.length; _yf < _len384; _yf++) {
                tok = list_2[_yf];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][45];
                if (state_3 !== STATE_FL) {
                  if (request_make(45, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][45];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 279;
            }
            break;
          case 279:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (idx_1 = _yg = _ref325 = FAcounter[b_0][490], _ref326 = list_1.length; _yg < _ref326; idx_1 = _yg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yh = 0, _len385 = list_2.length; _yh < _len385; _yh++) {
                tok = list_2[_yh];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][45];
                for (_yi = 0, _len386 = list_3.length; _yi < _len386; _yi++) {
                  tok = list_3[_yi];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131";
                  mx_hash_stub.hash_key = "fn_decl_arg_list";
                  mx_hash_stub.hash_key_idx = 45;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][490] = list_1.length;
            FAcache[start_pos][278].append(ret_list);
            break;
          case 282:

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 queue */
            chk_len = stack.push([282, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 283;
            }
            break;
          case 283:

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _yj = _ref327 = FAcounter[b_0][491], _ref328 = list_1.length; _yj < _ref328; idx_1 = _yj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147";
              mx_hash_stub.hash_key = "fn_call_arg_list";
              mx_hash_stub.hash_key_idx = 47;
              mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][491] = list_1.length;
            FAcache[start_pos][282].append(ret_list);
            break;
          case 284:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 queue */
            chk_len = stack.push([284, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _yk = _ref329 = FAcounter[b_0][493], _ref330 = list_1.length; _yk < _ref330; idx_1 = _yk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yl = 0, _len387 = list_2.length; _yl < _len387; _yl++) {
                tok = list_2[_yl];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][47];
                if (state_3 !== STATE_FL) {
                  if (request_make(47, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][47];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 285;
            }
            break;
          case 285:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ym = _ref331 = FAcounter[b_0][496], _ref332 = list_1.length; _ym < _ref332; idx_1 = _ym += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yn = 0, _len388 = list_2.length; _yn < _len388; _yn++) {
                tok = list_2[_yn];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][47];
                for (_yo = 0, _len389 = list_3.length; _yo < _len389; _yo++) {
                  tok = list_3[_yo];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(!arg_list[0].mx_hash.bracketless_hash || !arg_list[2].mx_hash.bracketless_hash)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148";
                  mx_hash_stub.hash_key = "fn_call_arg_list";
                  mx_hash_stub.hash_key_idx = 47;
                  mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][496] = list_1.length;
            FAcache[start_pos][284].append(ret_list);
            break;
          case 287:

            /* rule_Htype___u155 queue */
            chk_len = stack.push([287, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][35];
            if (state_1 !== STATE_FL) {
              if (request_make(35, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][35];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 288;
            }
            break;
          case 288:

            /* rule_Htype___u155 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][35];
            for (idx_1 = _yp = _ref333 = FAcounter[b_0][497], _ref334 = list_1.length; _yp < _ref334; idx_1 = _yp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype___u155";
              mx_hash_stub.hash_key = "type_list";
              mx_hash_stub.hash_key_idx = 48;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][497] = list_1.length;
            FAcache[start_pos][287].append(ret_list);
            break;
          case 289:

            /* rule_Htype_XXX_Htype_list___u156 queue */
            chk_len = stack.push([289, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][35];
            if (state_1 !== STATE_FL) {
              if (request_make(35, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][35];
            for (idx_1 = _yq = _ref335 = FAcounter[b_0][499], _ref336 = list_1.length; _yq < _ref336; idx_1 = _yq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yr = 0, _len390 = list_2.length; _yr < _len390; _yr++) {
                tok = list_2[_yr];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][48];
                if (state_3 !== STATE_FL) {
                  if (request_make(48, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][48];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 290;
            }
            break;
          case 290:

            /* rule_Htype_XXX_Htype_list___u156 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][35];
            for (idx_1 = _ys = _ref337 = FAcounter[b_0][502], _ref338 = list_1.length; _ys < _ref338; idx_1 = _ys += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yt = 0, _len391 = list_2.length; _yt < _len391; _yt++) {
                tok = list_2[_yt];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][48];
                for (_yu = 0, _len392 = list_3.length; _yu < _len392; _yu++) {
                  tok = list_3[_yu];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_XXX_Htype_list___u156";
                  mx_hash_stub.hash_key = "type_list";
                  mx_hash_stub.hash_key_idx = 48;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][502] = list_1.length;
            FAcache[start_pos][289].append(ret_list);
            break;
          case 292:

            /* rule_XXX_Htype_list_XXX___u157 queue */
            chk_len = stack.push([292, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _yv = _ref339 = FAcounter[b_0][503], _ref340 = list_1.length; _yv < _ref340; idx_1 = _yv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][48];
              if (state_2 !== STATE_FL) {
                if (request_make(48, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][48];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 293;
            }
            break;
          case 293:

            /* rule_XXX_Htype_list_XXX___u157 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _yw = _ref341 = FAcounter[b_0][506], _ref342 = list_1.length; _yw < _ref342; idx_1 = _yw += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][48];
              for (_yx = 0, _len393 = list_2.length; _yx < _len393; _yx++) {
                tok = list_2[_yx];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_yy = 0, _len394 = list_3.length; _yy < _len394; _yy++) {
                  tok = list_3[_yy];
                  if (tok.value !== ">") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_list_XXX___u157";
                  mx_hash_stub.hash_key = "type_nest";
                  mx_hash_stub.hash_key_idx = 49;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][506] = list_1.length;
            FAcache[start_pos][292].append(ret_list);
            break;
          case 295:

            /* rule_Htok_identifier_XXX_Htype___u158 queue */
            chk_len = stack.push([295, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _yz = _ref343 = FAcounter[b_0][508], _ref344 = list_1.length; _yz < _ref344; idx_1 = _yz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_za = 0, _len395 = list_2.length; _za < _len395; _za++) {
                tok = list_2[_za];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][35];
                if (state_3 !== STATE_FL) {
                  if (request_make(35, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][35];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 296;
            }
            break;
          case 296:

            /* rule_Htok_identifier_XXX_Htype___u158 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _zb = _ref345 = FAcounter[b_0][511], _ref346 = list_1.length; _zb < _ref346; idx_1 = _zb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_zc = 0, _len396 = list_2.length; _zc < _len396; _zc++) {
                tok = list_2[_zc];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][35];
                for (_zd = 0, _len397 = list_3.length; _zd < _len397; _zd++) {
                  tok = list_3[_zd];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u158";
                  mx_hash_stub.hash_key = "type_field_kv";
                  mx_hash_stub.hash_key_idx = 50;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][511] = list_1.length;
            FAcache[start_pos][295].append(ret_list);
            break;
          case 298:

            /* rule_Htype_field_kv___u159 queue */
            chk_len = stack.push([298, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][50];
            if (state_1 !== STATE_FL) {
              if (request_make(50, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][50];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 299;
            }
            break;
          case 299:

            /* rule_Htype_field_kv___u159 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][50];
            for (idx_1 = _ze = _ref347 = FAcounter[b_0][512], _ref348 = list_1.length; _ze < _ref348; idx_1 = _ze += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype_field_kv___u159";
              mx_hash_stub.hash_key = "type_field_kv_list";
              mx_hash_stub.hash_key_idx = 51;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][512] = list_1.length;
            FAcache[start_pos][298].append(ret_list);
            break;
          case 300:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 queue */
            chk_len = stack.push([300, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][50];
            if (state_1 !== STATE_FL) {
              if (request_make(50, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][50];
            for (idx_1 = _zf = _ref349 = FAcounter[b_0][514], _ref350 = list_1.length; _zf < _ref350; idx_1 = _zf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_zg = 0, _len398 = list_2.length; _zg < _len398; _zg++) {
                tok = list_2[_zg];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][51];
                if (state_3 !== STATE_FL) {
                  if (request_make(51, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][51];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 301;
            }
            break;
          case 301:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][50];
            for (idx_1 = _zh = _ref351 = FAcounter[b_0][517], _ref352 = list_1.length; _zh < _ref352; idx_1 = _zh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_zi = 0, _len399 = list_2.length; _zi < _len399; _zi++) {
                tok = list_2[_zi];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][51];
                for (_zj = 0, _len400 = list_3.length; _zj < _len400; _zj++) {
                  tok = list_3[_zj];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_field_kv_XXX_Htype_field_kv_list___u160";
                  mx_hash_stub.hash_key = "type_field_kv_list";
                  mx_hash_stub.hash_key_idx = 51;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][517] = list_1.length;
            FAcache[start_pos][300].append(ret_list);
            break;
          case 303:

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 queue */
            chk_len = stack.push([303, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _zk = _ref353 = FAcounter[b_0][519], _ref354 = list_1.length; _zk < _ref354; idx_1 = _zk += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _zl = 0; _zl < 1; _i_2 = ++_zl) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _zm = 0; _zm < 1; _i_2 = ++_zm) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][51];
                if (state_2 !== STATE_FL) {
                  if (request_make(51, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][51];
                for (_zn = 0, _len401 = list_2.length; _zn < _len401; _zn++) {
                  tok = list_2[_zn];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_zo = 0, _len402 = hyp_list_2.length; _zo < _len402; _zo++) {
                tok_list = hyp_list_2[_zo];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 304;
            }
            break;
          case 304:

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _zp = _ref355 = FAcounter[b_0][522], _ref356 = list_1.length; _zp < _ref356; idx_1 = _zp += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _zq = 0; _zq < 1; _i_2 = ++_zq) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _zr = 0; _zr < 1; _i_2 = ++_zr) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][51];
                for (_zs = 0, _len403 = list_2.length; _zs < _len403; _zs++) {
                  tok = list_2[_zs];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_zt = 0, _len404 = hyp_list_2.length; _zt < _len404; _zt++) {
                tok_list = hyp_list_2[_zt];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_zu = 0, _len405 = list_3.length; _zu < _len405; _zu++) {
                  tok = list_3[_zu];
                  if (tok.value !== "}") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_field_kv_listO_XXX___u161";
                  mx_hash_stub.hash_key = "type_field";
                  mx_hash_stub.hash_key_idx = 52;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][522] = list_1.length;
            FAcache[start_pos][303].append(ret_list);
        }
      }
    };

    return Parser;

  })();

}).call(this);
