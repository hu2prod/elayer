// Generated by IcedCoffeeScript 108.0.9
(function() {
  var cache_stub, drop_stub, hash_key_list, i, _i;

  require('fy');

  drop_stub = [];

  for (i = _i = 0; _i < 47; i = ++_i) {
    drop_stub.push(0);
  }

  cache_stub = new Array(230);

  hash_key_list = ["_", "Xdent", "tok_identifier", "tok_bin_op", "tok_un_op", "tok_decimal_literal", "tok_octal_literal", "tok_hexadecimal_literal", "tok_binary_literal", "tok_float_literal", "tok_string_sq", "tok_string_dq", "tok_fn_arrow", "tok_inline_comment", "tok_multiline_comment", "tok_bracket_square", "tok_pair_delimiter", "tok_bracket_curve", "tok_bracket_round", "tok_comma", "const", "num_const", "str_const", "rvalue", "stmt", "lvalue", "block", "indent", "stmt_plus", "dedent", "bin_op", "pre_op", "post_op", "eol", "type", "if_tail_stmt", "switch_tail_stmt", "ranger", "fn_decl_arg", "fn_decl_arg_list", "return", "fn_call_arg_list", "type_list", "type_nest", "type_field_kv", "type_field_kv_list", "type_field"];

  this.Parser = (function() {
    function Parser() {}

    Parser.prototype.length = 0;

    Parser.prototype.cache = [];

    Parser.prototype.drop = [];

    Parser.prototype.Node = null;

    Parser.prototype.proxy = null;

    Parser.prototype.proxy2 = null;

    Parser.prototype.go = function(token_list_list) {
      var arg_list, filter_list, idx, list, max_token, mx_hash_stub, node, stub, stub_idx, token, token_list, v, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len13, _len14, _len15, _len16, _len17, _len18, _len19, _len2, _len20, _len21, _len22, _len23, _len24, _len25, _len26, _len27, _len28, _len29, _len3, _len30, _len31, _len32, _len33, _len34, _len35, _len36, _len37, _len38, _len39, _len4, _len40, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len7, _len8, _len9, _m, _n, _o, _p, _pos_list, _q, _r, _ref, _ref1, _s, _t, _u, _v, _w, _x, _y, _z;
      this.cache = [];
      this.drop = [];
      this.length = token_list_list.length;
      if (this.length === 0) {
        return [];
      }
      this.Node = (_ref = token_list_list[0]) != null ? (_ref1 = _ref[0]) != null ? _ref1.constructor : void 0 : void 0;
      this.proxy = new this.Node;
      this.proxy2 = new this.Node;
      for (idx = _j = 0, _len = token_list_list.length; _j < _len; idx = ++_j) {
        token_list = token_list_list[idx];
        stub = cache_stub.slice();
        for (_k = 0, _len1 = token_list.length; _k < _len1; _k++) {
          token = token_list[_k];
          token.a = idx;
          token.b = idx + 1;
          if (-1 !== (stub_idx = hash_key_list.idx(token.mx_hash.hash_key))) {
            stub[stub_idx] = [token];
          }
          stub[0] = [token];
        }
        this.cache.push(stub);
        this.drop.push(drop_stub.slice());
      }
      for (idx = _l = 0, _len2 = token_list_list.length; _l < _len2; idx = ++_l) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1__u8";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _m = 0, _len3 = token_list_list.length; _m < _len3; idx = ++_m) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1__u9";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _n = 0, _len4 = token_list_list.length; _n < _len4; idx = ++_n) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1__u10";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _o = 0, _len5 = token_list_list.length; _o < _len5; idx = ++_o) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1__u11";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _p = 0, _len6 = token_list_list.length; _p < _len6; idx = ++_p) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1__u12";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _q = 0, _len7 = token_list_list.length; _q < _len7; idx = ++_q) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSX_priorityE4_tail_spaceEX1Xtail_space__left_assocE1__u13";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["left_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _r = 0, _len8 = token_list_list.length; _r < _len8; idx = ++_r) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1__u14";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _s = 0, _len9 = token_list_list.length; _s < _len9; idx = ++_s) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1__u15";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _t = 0, _len10 = token_list_list.length; _t < _len10; idx = ++_t) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1__u16";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _u = 0, _len11 = token_list_list.length; _u < _len11; idx = ++_u) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1__u17";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _v = 0, _len12 = token_list_list.length; _v < _len12; idx = ++_v) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1__u18";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _w = 0, _len13 = token_list_list.length; _w < _len13; idx = ++_w) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u19";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _x = 0, _len14 = token_list_list.length; _x < _len14; idx = ++_x) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u20";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _y = 0, _len15 = token_list_list.length; _y < _len15; idx = ++_y) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u21";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _z = 0, _len16 = token_list_list.length; _z < _len16; idx = ++_z) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u22";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _aa = 0, _len17 = token_list_list.length; _aa < _len17; idx = ++_aa) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u23";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ab = 0, _len18 = token_list_list.length; _ab < _len18; idx = ++_ab) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1__u24";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ac = 0, _len19 = token_list_list.length; _ac < _len19; idx = ++_ac) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space___u25";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ad = 0, _len20 = token_list_list.length; _ad < _len20; idx = ++_ad) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space___u26";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ae = 0, _len21 = token_list_list.length; _ae < _len21; idx = ++_ae) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space___u27";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _af = 0, _len22 = token_list_list.length; _af < _len22; idx = ++_af) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "==") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1__u28";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ag = 0, _len23 = token_list_list.length; _ag < _len23; idx = ++_ag) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1__u29";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ah = 0, _len24 = token_list_list.length; _ah < _len24; idx = ++_ah) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space___u30";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ai = 0, _len25 = token_list_list.length; _ai < _len25; idx = ++_ai) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space___u31";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _aj = 0, _len26 = token_list_list.length; _aj < _len26; idx = ++_aj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space___u32";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ak = 0, _len27 = token_list_list.length; _ak < _len27; idx = ++_ak) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space___u33";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _al = 0, _len28 = token_list_list.length; _al < _len28; idx = ++_al) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE9_tail_spaceEX1Xtail_space___u34";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _am = 0, _len29 = token_list_list.length; _am < _len29; idx = ++_am) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEX_priorityE12_tail_spaceEX1Xtail_space___u35";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _an = 0, _len30 = token_list_list.length; _an < _len30; idx = ++_an) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPEX_priorityE12_tail_spaceEX1Xtail_space___u36";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ao = 0, _len31 = token_list_list.length; _ao < _len31; idx = ++_ao) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u37";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ap = 0, _len32 = token_list_list.length; _ap < _len32; idx = ++_ap) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSEX_priorityE12_tail_spaceEX1Xtail_space___u38";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _aq = 0, _len33 = token_list_list.length; _aq < _len33; idx = ++_aq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u39";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ar = 0, _len34 = token_list_list.length; _ar < _len34; idx = ++_ar) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u40";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _as = 0, _len35 = token_list_list.length; _as < _len35; idx = ++_as) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSEX_priorityE12_tail_spaceEX1Xtail_space___u41";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _at = 0, _len36 = token_list_list.length; _at < _len36; idx = ++_at) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u42";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _au = 0, _len37 = token_list_list.length; _au < _len37; idx = ++_au) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u43";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _av = 0, _len38 = token_list_list.length; _av < _len38; idx = ++_av) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u44";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _aw = 0, _len39 = token_list_list.length; _aw < _len39; idx = ++_aw) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u45";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ax = 0, _len40 = token_list_list.length; _ax < _len40; idx = ++_ax) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXEX_priorityE12_tail_spaceEX1Xtail_space___u46";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ay = 0, _len41 = token_list_list.length; _ay < _len41; idx = ++_ay) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u47";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _az = 0, _len42 = token_list_list.length; _az < _len42; idx = ++_az) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u48";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _ba = 0, _len43 = token_list_list.length; _ba < _len43; idx = ++_ba) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space___u49";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bb = 0, _len44 = token_list_list.length; _bb < _len44; idx = ++_bb) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandEX_priorityE12_tail_spaceEX1Xtail_space___u50";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bc = 0, _len45 = token_list_list.length; _bc < _len45; idx = ++_bc) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorEX_priorityE12_tail_spaceEX1Xtail_space___u51";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bd = 0, _len46 = token_list_list.length; _bd < _len46; idx = ++_bd) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorEX_priorityE12_tail_spaceEX1Xtail_space___u52";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _be = 0, _len47 = token_list_list.length; _be < _len47; idx = ++_be) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u53";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bf = 0, _len48 = token_list_list.length; _bf < _len48; idx = ++_bf) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u54";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bg = 0, _len49 = token_list_list.length; _bg < _len49; idx = ++_bg) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space___u55";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 30;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[30] == null) {
          _pos_list[30] = [];
        }
        _pos_list[30].push(node);
      }
      for (idx = _bh = 0, _len50 = token_list_list.length; _bh < _len50; idx = ++_bh) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE1__XX1Xtail_space_u59";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bi = 0, _len51 = token_list_list.length; _bi < _len51; idx = ++_bi) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__XX1Xtail_space_u60";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bj = 0, _len52 = token_list_list.length; _bj < _len52; idx = ++_bj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u61";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bk = 0, _len53 = token_list_list.length; _bk < _len53; idx = ++_bk) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u62";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bl = 0, _len54 = token_list_list.length; _bl < _len54; idx = ++_bl) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u63";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bm = 0, _len55 = token_list_list.length; _bm < _len55; idx = ++_bm) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "~") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u64";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bn = 0, _len56 = token_list_list.length; _bn < _len56; idx = ++_bn) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "not") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnotX_priorityE1__u65";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bo = 0, _len57 = token_list_list.length; _bo < _len57; idx = ++_bo) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "new") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnewX_priorityE15__u66";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bp = 0, _len58 = token_list_list.length; _bp < _len58; idx = ++_bp) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "delete") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XdeleteX_priorityE15__u67";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bq = 0, _len59 = token_list_list.length; _bq < _len59; idx = ++_bq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u69";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _br = 0, _len60 = token_list_list.length; _br < _len60; idx = ++_br) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u70";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bs = 0, _len61 = token_list_list.length; _bs < _len61; idx = ++_bs) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "[QUESTION]") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXQUESTIONXX_priorityE1__u71";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bt = 0, _len62 = token_list_list.length; _bt < _len62; idx = ++_bt) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '..') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_ultEmacro_tiEmacro_eolE1__u97";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 37;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[37] == null) {
          _pos_list[37] = [];
        }
        _pos_list[37].push(node);
      }
      for (idx = _bu = 0, _len63 = token_list_list.length; _bu < _len63; idx = ++_bu) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '...') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_ultEmacro_tiEmacro_eolE1__u98";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 37;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[37] == null) {
          _pos_list[37] = [];
        }
        _pos_list[37].push(node);
      }
      list = this.fsm();
      max_token = token_list_list.length;
      filter_list = [];
      for (_bv = 0, _len64 = list.length; _bv < _len64; _bv++) {
        v = list[_bv];
        if (v.b === max_token) {
          this.node_fix(v);
          filter_list.push(v);
        }
      }
      return filter_list;
    };

    Parser.prototype.node_fix = function(node) {
      var walk;
      walk = function(node) {
        var v, vv_list, _j, _len, _ref;
        vv_list = [];
        _ref = node.value_array;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          v = _ref[_j];
          walk(v);
          vv_list.push(v.value_view || v.value);
        }
        node.value_view = vv_list.join(' ');
      };
      walk(node);
    };

    Parser.prototype.fsm = function() {
      var FAcache, FAdrop, append_list, arg_list, b_0, b_1, b_10, b_11, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, chk_len, cur, hki, hyp_list_1, hyp_list_2, hyp_list_3, hyp_list_4, hyp_list_5, length, list, list_1, list_10, list_11, list_2, list_3, list_4, list_5, list_6, list_7, list_8, list_9, mx_hash_stub, node, node_list, old_node, only_new, ret_list, stack, start_pos, tok, tok_list, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _bw, _bx, _by, _bz, _ca, _cb, _cc, _cd, _ce, _cf, _cg, _ch, _ci, _cj, _ck, _cl, _cm, _cn, _co, _cp, _cq, _cr, _cs, _ct, _cu, _cv, _cw, _cx, _cy, _cz, _da, _db, _dc, _dd, _de, _df, _dg, _dh, _di, _dj, _dk, _dl, _dm, _dn, _do, _dp, _dq, _dr, _ds, _dt, _du, _dv, _dw, _dx, _dy, _dz, _ea, _eb, _ec, _ed, _ee, _ef, _eg, _eh, _ei, _ej, _ek, _el, _em, _en, _eo, _ep, _eq, _er, _es, _et, _eu, _ev, _ew, _ex, _ey, _ez, _fa, _fb, _fc, _fd, _fe, _ff, _fg, _fh, _fi, _fj, _fk, _fl, _fm, _fn, _fo, _fp, _fq, _fr, _fs, _ft, _fu, _fv, _fw, _fx, _fy, _fz, _ga, _gb, _gc, _gd, _ge, _gf, _gg, _gh, _gi, _gj, _gk, _gl, _gm, _gn, _go, _gp, _gq, _gr, _gs, _gt, _gu, _gv, _gw, _gx, _gy, _gz, _ha, _hb, _hc, _hd, _he, _hf, _hg, _hh, _hi, _hj, _hk, _hl, _hm, _hn, _ho, _hp, _hq, _hr, _hs, _ht, _hu, _hv, _hw, _hx, _hy, _hz, _i_2, _i_3, _i_4, _i_5, _ia, _ib, _ic, _id, _ie, _if, _ig, _ih, _ii, _ij, _ik, _il, _im, _in, _io, _ip, _iq, _ir, _is, _it, _iu, _iv, _iw, _ix, _iy, _iz, _j, _ja, _jb, _jc, _jd, _je, _jf, _jg, _jh, _ji, _jj, _jk, _jl, _jm, _jn, _jo, _jp, _jq, _jr, _js, _jt, _ju, _jv, _jw, _jx, _jy, _jz, _k, _ka, _kb, _kc, _kd, _ke, _kf, _kg, _kh, _ki, _kj, _kk, _kl, _km, _kn, _ko, _kp, _kq, _kr, _ks, _kt, _ku, _kv, _kw, _kx, _ky, _kz, _l, _la, _lb, _lc, _ld, _le, _len, _len1, _len10, _len100, _len101, _len102, _len103, _len104, _len105, _len106, _len107, _len108, _len109, _len11, _len110, _len111, _len112, _len113, _len114, _len115, _len116, _len117, _len118, _len119, _len12, _len120, _len121, _len122, _len123, _len124, _len125, _len126, _len127, _len128, _len129, _len13, _len130, _len131, _len132, _len133, _len134, _len135, _len136, _len137, _len138, _len139, _len14, _len140, _len141, _len142, _len143, _len144, _len145, _len146, _len147, _len148, _len149, _len15, _len150, _len151, _len152, _len153, _len154, _len155, _len156, _len157, _len158, _len159, _len16, _len160, _len161, _len162, _len163, _len164, _len165, _len166, _len167, _len168, _len169, _len17, _len170, _len171, _len172, _len173, _len174, _len175, _len176, _len177, _len178, _len179, _len18, _len180, _len181, _len182, _len183, _len184, _len185, _len186, _len187, _len188, _len189, _len19, _len190, _len191, _len192, _len193, _len194, _len195, _len196, _len197, _len198, _len199, _len2, _len20, _len200, _len201, _len202, _len203, _len204, _len205, _len206, _len207, _len208, _len209, _len21, _len210, _len211, _len212, _len213, _len214, _len215, _len216, _len217, _len218, _len219, _len22, _len220, _len221, _len222, _len223, _len224, _len225, _len226, _len227, _len228, _len229, _len23, _len230, _len231, _len232, _len233, _len234, _len235, _len236, _len237, _len238, _len239, _len24, _len240, _len241, _len242, _len243, _len244, _len245, _len246, _len247, _len248, _len249, _len25, _len250, _len251, _len252, _len253, _len254, _len255, _len256, _len257, _len258, _len259, _len26, _len260, _len261, _len262, _len263, _len264, _len265, _len266, _len267, _len268, _len269, _len27, _len270, _len271, _len272, _len273, _len274, _len275, _len276, _len277, _len278, _len279, _len28, _len280, _len281, _len282, _len283, _len284, _len285, _len286, _len287, _len288, _len289, _len29, _len290, _len291, _len292, _len293, _len294, _len295, _len296, _len297, _len298, _len299, _len3, _len30, _len300, _len301, _len302, _len303, _len304, _len305, _len306, _len307, _len308, _len309, _len31, _len310, _len311, _len312, _len313, _len314, _len315, _len316, _len317, _len318, _len319, _len32, _len320, _len321, _len322, _len323, _len324, _len325, _len326, _len327, _len328, _len329, _len33, _len330, _len331, _len332, _len333, _len334, _len335, _len336, _len337, _len338, _len339, _len34, _len340, _len341, _len342, _len343, _len344, _len345, _len346, _len347, _len348, _len349, _len35, _len350, _len351, _len352, _len353, _len354, _len355, _len356, _len357, _len358, _len359, _len36, _len360, _len361, _len362, _len363, _len364, _len365, _len366, _len367, _len368, _len369, _len37, _len370, _len371, _len372, _len373, _len374, _len375, _len376, _len377, _len378, _len379, _len38, _len380, _len381, _len382, _len383, _len384, _len385, _len386, _len387, _len388, _len389, _len39, _len390, _len391, _len392, _len393, _len394, _len395, _len396, _len397, _len4, _len40, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len65, _len66, _len67, _len68, _len69, _len7, _len70, _len71, _len72, _len73, _len74, _len75, _len76, _len77, _len78, _len79, _len8, _len80, _len81, _len82, _len83, _len84, _len85, _len86, _len87, _len88, _len89, _len9, _len90, _len91, _len92, _len93, _len94, _len95, _len96, _len97, _len98, _len99, _lf, _lg, _lh, _li, _lj, _lk, _ll, _lm, _ln, _lo, _lp, _lq, _lr, _ls, _lt, _lu, _lv, _lw, _lx, _ly, _lz, _m, _ma, _mb, _mc, _md, _me, _mf, _mg, _mh, _mi, _mj, _mk, _ml, _mm, _mn, _mo, _mp, _mq, _mr, _ms, _mt, _mu, _mv, _mw, _mx, _my, _mz, _n, _na, _nb, _nc, _nd, _ne, _nf, _ng, _nh, _ni, _nj, _nk, _nl, _nm, _nn, _no, _np, _nq, _nr, _ns, _nt, _nu, _nv, _nw, _nx, _ny, _nz, _o, _oa, _ob, _oc, _od, _oe, _of, _og, _oh, _oi, _oj, _ok, _ol, _om, _on, _oo, _op, _oq, _or, _os, _ot, _ou, _ov, _ow, _ox, _oy, _oz, _p, _pa, _pb, _pc, _pd, _pe, _pf, _pg, _ph, _pi, _pj, _pk, _pl, _pm, _pn, _po, _pp, _pq, _pr, _ps, _pt, _pu, _pv, _pw, _px, _py, _pz, _q, _qa, _qb, _qc, _qd, _qe, _qf, _qg, _qh, _qi, _qj, _qk, _ql, _qm, _qn, _qo, _qp, _qq, _qr, _qs, _qt, _qu, _qv, _qw, _qx, _qy, _r, _ref, _ref1, _ref2, _s, _t, _u, _v, _w, _x, _y, _z;
      FAcache = this.cache;
      FAdrop = this.drop;
      stack = [[28, 0, 0]];
      length = this.length;
      while (cur = stack.pop()) {
        hki = cur[0], start_pos = cur[1], only_new = cur[2];
        if (start_pos >= length) {
          continue;
        }
        if (!only_new) {
          if (list = FAcache[start_pos][hki]) {
            continue;
          }
        }
        switch (hki) {
          case 0:

            /* token__ queue */
            stack.push([47, start_pos, only_new]);
            break;
          case 47:

            /* token__ collect */
            node_list = [];
            FAcache[start_pos][0] = node_list;
            break;
          case 1:

            /* token_Xdent queue */
            stack.push([48, start_pos, only_new]);
            break;
          case 48:

            /* token_Xdent collect */
            node_list = [];
            FAcache[start_pos][1] = node_list;
            break;
          case 2:

            /* token_tok_identifier queue */
            stack.push([49, start_pos, only_new]);
            break;
          case 49:

            /* token_tok_identifier collect */
            node_list = [];
            FAcache[start_pos][2] = node_list;
            break;
          case 3:

            /* token_tok_bin_op queue */
            stack.push([50, start_pos, only_new]);
            break;
          case 50:

            /* token_tok_bin_op collect */
            node_list = [];
            FAcache[start_pos][3] = node_list;
            break;
          case 4:

            /* token_tok_un_op queue */
            stack.push([51, start_pos, only_new]);
            break;
          case 51:

            /* token_tok_un_op collect */
            node_list = [];
            FAcache[start_pos][4] = node_list;
            break;
          case 5:

            /* token_tok_decimal_literal queue */
            stack.push([52, start_pos, only_new]);
            break;
          case 52:

            /* token_tok_decimal_literal collect */
            node_list = [];
            FAcache[start_pos][5] = node_list;
            break;
          case 6:

            /* token_tok_octal_literal queue */
            stack.push([53, start_pos, only_new]);
            break;
          case 53:

            /* token_tok_octal_literal collect */
            node_list = [];
            FAcache[start_pos][6] = node_list;
            break;
          case 7:

            /* token_tok_hexadecimal_literal queue */
            stack.push([54, start_pos, only_new]);
            break;
          case 54:

            /* token_tok_hexadecimal_literal collect */
            node_list = [];
            FAcache[start_pos][7] = node_list;
            break;
          case 8:

            /* token_tok_binary_literal queue */
            stack.push([55, start_pos, only_new]);
            break;
          case 55:

            /* token_tok_binary_literal collect */
            node_list = [];
            FAcache[start_pos][8] = node_list;
            break;
          case 9:

            /* token_tok_float_literal queue */
            stack.push([56, start_pos, only_new]);
            break;
          case 56:

            /* token_tok_float_literal collect */
            node_list = [];
            FAcache[start_pos][9] = node_list;
            break;
          case 10:

            /* token_tok_string_sq queue */
            stack.push([57, start_pos, only_new]);
            break;
          case 57:

            /* token_tok_string_sq collect */
            node_list = [];
            FAcache[start_pos][10] = node_list;
            break;
          case 11:

            /* token_tok_string_dq queue */
            stack.push([58, start_pos, only_new]);
            break;
          case 58:

            /* token_tok_string_dq collect */
            node_list = [];
            FAcache[start_pos][11] = node_list;
            break;
          case 12:

            /* token_tok_fn_arrow queue */
            stack.push([59, start_pos, only_new]);
            break;
          case 59:

            /* token_tok_fn_arrow collect */
            node_list = [];
            FAcache[start_pos][12] = node_list;
            break;
          case 13:

            /* token_tok_inline_comment queue */
            stack.push([60, start_pos, only_new]);
            break;
          case 60:

            /* token_tok_inline_comment collect */
            node_list = [];
            FAcache[start_pos][13] = node_list;
            break;
          case 14:

            /* token_tok_multiline_comment queue */
            stack.push([61, start_pos, only_new]);
            break;
          case 61:

            /* token_tok_multiline_comment collect */
            node_list = [];
            FAcache[start_pos][14] = node_list;
            break;
          case 15:

            /* token_tok_bracket_square queue */
            stack.push([62, start_pos, only_new]);
            break;
          case 62:

            /* token_tok_bracket_square collect */
            node_list = [];
            FAcache[start_pos][15] = node_list;
            break;
          case 16:

            /* token_tok_pair_delimiter queue */
            stack.push([63, start_pos, only_new]);
            break;
          case 63:

            /* token_tok_pair_delimiter collect */
            node_list = [];
            FAcache[start_pos][16] = node_list;
            break;
          case 17:

            /* token_tok_bracket_curve queue */
            stack.push([64, start_pos, only_new]);
            break;
          case 64:

            /* token_tok_bracket_curve collect */
            node_list = [];
            FAcache[start_pos][17] = node_list;
            break;
          case 18:

            /* token_tok_bracket_round queue */
            stack.push([65, start_pos, only_new]);
            break;
          case 65:

            /* token_tok_bracket_round collect */
            node_list = [];
            FAcache[start_pos][18] = node_list;
            break;
          case 19:

            /* token_tok_comma queue */
            stack.push([66, start_pos, only_new]);
            break;
          case 66:

            /* token_tok_comma collect */
            node_list = [];
            FAcache[start_pos][19] = node_list;
            break;
          case 20:

            /* token_const queue */
            stack.push([71, start_pos, only_new]);

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            stack.push([67, start_pos, only_new]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            stack.push([69, start_pos, only_new]);
            break;
          case 71:

            /* token_const collect */
            node_list = [];

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            node_list.append(FAcache[start_pos][67]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            node_list.append(FAcache[start_pos][69]);
            FAcache[start_pos][20] = node_list;
            break;
          case 21:

            /* token_num_const queue */
            stack.push([82, start_pos, only_new]);

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u80 */
            stack.push([72, start_pos, only_new]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u81 */
            stack.push([74, start_pos, only_new]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u82 */
            stack.push([76, start_pos, only_new]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u83 */
            stack.push([78, start_pos, only_new]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u84 */
            stack.push([80, start_pos, only_new]);
            break;
          case 82:

            /* token_num_const collect */
            node_list = [];

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u80 */
            node_list.append(FAcache[start_pos][72]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u81 */
            node_list.append(FAcache[start_pos][74]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u82 */
            node_list.append(FAcache[start_pos][76]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u83 */
            node_list.append(FAcache[start_pos][78]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u84 */
            node_list.append(FAcache[start_pos][80]);
            FAcache[start_pos][21] = node_list;
            break;
          case 22:

            /* token_str_const queue */
            stack.push([87, start_pos, only_new]);

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u85 */
            stack.push([83, start_pos, only_new]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u86 */
            stack.push([85, start_pos, only_new]);
            break;
          case 87:

            /* token_str_const collect */
            node_list = [];

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u85 */
            node_list.append(FAcache[start_pos][83]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u86 */
            node_list.append(FAcache[start_pos][85]);
            FAcache[start_pos][22] = node_list;
            break;
          case 23:

            /* token_rvalue queue */
            if (FAdrop[start_pos][23]) {
              if (FAcache[start_pos][23] == null) {
                FAcache[start_pos][23] = [];
              }
              continue;
            }
            FAdrop[start_pos][23] = 1;
            stack.push([118, start_pos, only_new]);

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            stack.push([88, start_pos, only_new]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            stack.push([90, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            stack.push([92, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            stack.push([94, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            stack.push([96, start_pos, only_new]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u68 */
            stack.push([98, start_pos, only_new]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72 */
            stack.push([100, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73 */
            stack.push([102, start_pos, only_new]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u74 */
            stack.push([104, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u110 */
            stack.push([106, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u111 */
            stack.push([108, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u112 */
            stack.push([110, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117 */
            stack.push([112, start_pos, only_new]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118 */
            stack.push([114, start_pos, only_new]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122 */
            stack.push([116, start_pos, only_new]);
            break;
          case 118:

            /* token_rvalue collect */
            node_list = [];

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            node_list.append(FAcache[start_pos][88]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            node_list.append(FAcache[start_pos][90]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            node_list.append(FAcache[start_pos][92]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            node_list.append(FAcache[start_pos][94]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            node_list.append(FAcache[start_pos][96]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u68 */
            node_list.append(FAcache[start_pos][98]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72 */
            node_list.append(FAcache[start_pos][100]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73 */
            node_list.append(FAcache[start_pos][102]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u74 */
            node_list.append(FAcache[start_pos][104]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u110 */
            node_list.append(FAcache[start_pos][106]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u111 */
            node_list.append(FAcache[start_pos][108]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u112 */
            node_list.append(FAcache[start_pos][110]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117 */
            node_list.append(FAcache[start_pos][112]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118 */
            node_list.append(FAcache[start_pos][114]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122 */
            node_list.append(FAcache[start_pos][116]);
            for (_j = 0, _len = node_list.length; _j < _len; _j++) {
              node = node_list[_j];
              node._is_new = true;
            }
            if (append_list = FAcache[start_pos][23]) {
              for (_k = 0, _len1 = append_list.length; _k < _len1; _k++) {
                node = append_list[_k];
                node._is_new = false;
              }
              append_list.uappend(node_list);
            } else {
              FAcache[start_pos][23] = node_list;
            }
            if (FAdrop[start_pos][23]) {
              if ((_ref = node_list.last()) != null ? _ref._is_new : void 0) {
                FAdrop[start_pos][20] = 0;
                FAdrop[start_pos][25] = 0;
                FAdrop[start_pos][31] = 0;
                stack.push([118, start_pos, 1]);

                /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
                stack.push([90, start_pos, 1]);

                /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
                stack.push([92, start_pos, 1]);

                /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
                stack.push([94, start_pos, 1]);

                /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
                stack.push([96, start_pos, 1]);

                /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72 */
                stack.push([100, start_pos, 1]);

                /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73 */
                stack.push([102, start_pos, 1]);

                /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117 */
                stack.push([112, start_pos, 1]);

                /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118 */
                stack.push([114, start_pos, 1]);

                /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122 */
                stack.push([116, start_pos, 1]);
                stack.push([25, start_pos, 1]);
                stack.push([23, start_pos, 1]);
              }
            }
            break;
          case 24:

            /* token_stmt queue */
            if (FAdrop[start_pos][24]) {
              if (FAcache[start_pos][24] == null) {
                FAcache[start_pos][24] = [];
              }
              continue;
            }
            FAdrop[start_pos][24] = 1;
            stack.push([159, start_pos, only_new]);

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            stack.push([119, start_pos, only_new]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u78 */
            stack.push([121, start_pos, only_new]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u79 */
            stack.push([123, start_pos, only_new]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u87 */
            stack.push([125, start_pos, only_new]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u89 */
            stack.push([127, start_pos, only_new]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93 */
            stack.push([129, start_pos, only_new]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u94 */
            stack.push([131, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u99 */
            stack.push([133, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u100 */
            stack.push([135, start_pos, only_new]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u101 */
            stack.push([137, start_pos, only_new]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u102 */
            stack.push([139, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u106 */
            stack.push([141, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u107 */
            stack.push([143, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u108 */
            stack.push([145, start_pos, only_new]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u109 */
            stack.push([147, start_pos, only_new]);

            /* rule_class_Htok_identifier_ultEclass_decl__u113 */
            stack.push([149, start_pos, only_new]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u114 */
            stack.push([151, start_pos, only_new]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u119 */
            stack.push([153, start_pos, only_new]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u120 */
            stack.push([155, start_pos, only_new]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u121 */
            stack.push([157, start_pos, only_new]);
            break;
          case 159:

            /* token_stmt collect */
            node_list = [];

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            node_list.append(FAcache[start_pos][119]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u78 */
            node_list.append(FAcache[start_pos][121]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u79 */
            node_list.append(FAcache[start_pos][123]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u87 */
            node_list.append(FAcache[start_pos][125]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u89 */
            node_list.append(FAcache[start_pos][127]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93 */
            node_list.append(FAcache[start_pos][129]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u94 */
            node_list.append(FAcache[start_pos][131]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u99 */
            node_list.append(FAcache[start_pos][133]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u100 */
            node_list.append(FAcache[start_pos][135]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u101 */
            node_list.append(FAcache[start_pos][137]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u102 */
            node_list.append(FAcache[start_pos][139]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u106 */
            node_list.append(FAcache[start_pos][141]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u107 */
            node_list.append(FAcache[start_pos][143]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u108 */
            node_list.append(FAcache[start_pos][145]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u109 */
            node_list.append(FAcache[start_pos][147]);

            /* rule_class_Htok_identifier_ultEclass_decl__u113 */
            node_list.append(FAcache[start_pos][149]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u114 */
            node_list.append(FAcache[start_pos][151]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u119 */
            node_list.append(FAcache[start_pos][153]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u120 */
            node_list.append(FAcache[start_pos][155]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u121 */
            node_list.append(FAcache[start_pos][157]);
            for (_l = 0, _len2 = node_list.length; _l < _len2; _l++) {
              node = node_list[_l];
              node._is_new = true;
            }
            if (append_list = FAcache[start_pos][24]) {
              for (_m = 0, _len3 = append_list.length; _m < _len3; _m++) {
                node = append_list[_m];
                node._is_new = false;
              }
              append_list.uappend(node_list);
            } else {
              FAcache[start_pos][24] = node_list;
            }
            if (FAdrop[start_pos][24]) {
              if ((_ref1 = node_list.last()) != null ? _ref1._is_new : void 0) {
                FAdrop[start_pos][23] = 0;
                FAdrop[start_pos][13] = 0;
                FAdrop[start_pos][14] = 0;
                FAdrop[start_pos][2] = 0;
                FAdrop[start_pos][40] = 0;
                FAdrop[start_pos][25] = 0;
                stack.push([159, start_pos, 1]);

                /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93 */
                stack.push([129, start_pos, 1]);
                stack.push([24, start_pos, 1]);
              }
            }
            break;
          case 25:

            /* token_lvalue queue */
            if (FAdrop[start_pos][25]) {
              if (FAcache[start_pos][25] == null) {
                FAcache[start_pos][25] = [];
              }
              continue;
            }
            FAdrop[start_pos][25] = 1;
            stack.push([164, start_pos, only_new]);

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            stack.push([160, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88 */
            stack.push([162, start_pos, only_new]);
            break;
          case 164:

            /* token_lvalue collect */
            node_list = [];

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            node_list.append(FAcache[start_pos][160]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88 */
            node_list.append(FAcache[start_pos][162]);
            for (_n = 0, _len4 = node_list.length; _n < _len4; _n++) {
              node = node_list[_n];
              node._is_new = true;
            }
            if (append_list = FAcache[start_pos][25]) {
              for (_o = 0, _len5 = append_list.length; _o < _len5; _o++) {
                node = append_list[_o];
                node._is_new = false;
              }
              append_list.uappend(node_list);
            } else {
              FAcache[start_pos][25] = node_list;
            }
            if (FAdrop[start_pos][25]) {
              if ((_ref2 = node_list.last()) != null ? _ref2._is_new : void 0) {
                FAdrop[start_pos][2] = 0;
                FAdrop[start_pos][23] = 0;
                stack.push([164, start_pos, 1]);

                /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88 */
                stack.push([162, start_pos, 1]);
                stack.push([23, start_pos, 1]);
              }
            }
            break;
          case 26:

            /* token_block queue */
            stack.push([167, start_pos, only_new]);

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            stack.push([165, start_pos, only_new]);
            break;
          case 167:

            /* token_block collect */
            node_list = [];

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            node_list.append(FAcache[start_pos][165]);
            FAcache[start_pos][26] = node_list;
            break;
          case 27:

            /* token_indent queue */
            stack.push([168, start_pos, only_new]);
            break;
          case 168:

            /* token_indent collect */
            node_list = [];
            FAcache[start_pos][27] = node_list;
            break;
          case 28:

            /* token_stmt_plus queue */
            stack.push([175, start_pos, only_new]);

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u75 */
            stack.push([169, start_pos, only_new]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u76 */
            stack.push([171, start_pos, only_new]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u77 */
            stack.push([173, start_pos, only_new]);
            break;
          case 175:

            /* token_stmt_plus collect */
            node_list = [];

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u75 */
            node_list.append(FAcache[start_pos][169]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u76 */
            node_list.append(FAcache[start_pos][171]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u77 */
            node_list.append(FAcache[start_pos][173]);
            FAcache[start_pos][28] = node_list;
            break;
          case 29:

            /* token_dedent queue */
            stack.push([176, start_pos, only_new]);
            break;
          case 176:

            /* token_dedent collect */
            node_list = [];
            FAcache[start_pos][29] = node_list;
            break;
          case 30:

            /* token_bin_op queue */
            stack.push([177, start_pos, only_new]);
            break;
          case 177:

            /* token_bin_op collect */
            node_list = [];
            FAcache[start_pos][30] = node_list;
            break;
          case 31:

            /* token_pre_op queue */
            stack.push([178, start_pos, only_new]);
            break;
          case 178:

            /* token_pre_op collect */
            node_list = [];
            FAcache[start_pos][31] = node_list;
            break;
          case 32:

            /* token_post_op queue */
            stack.push([179, start_pos, only_new]);
            break;
          case 179:

            /* token_post_op collect */
            node_list = [];
            FAcache[start_pos][32] = node_list;
            break;
          case 33:

            /* token_eol queue */
            stack.push([180, start_pos, only_new]);
            break;
          case 180:

            /* token_eol collect */
            node_list = [];
            FAcache[start_pos][33] = node_list;
            break;
          case 34:

            /* token_type queue */
            stack.push([183, start_pos, only_new]);

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u130 */
            stack.push([181, start_pos, only_new]);
            break;
          case 183:

            /* token_type collect */
            node_list = [];

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u130 */
            node_list.append(FAcache[start_pos][181]);
            FAcache[start_pos][34] = node_list;
            break;
          case 35:

            /* token_if_tail_stmt queue */
            stack.push([190, start_pos, only_new]);

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u90 */
            stack.push([184, start_pos, only_new]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u91 */
            stack.push([186, start_pos, only_new]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u92 */
            stack.push([188, start_pos, only_new]);
            break;
          case 190:

            /* token_if_tail_stmt collect */
            node_list = [];

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u90 */
            node_list.append(FAcache[start_pos][184]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u91 */
            node_list.append(FAcache[start_pos][186]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u92 */
            node_list.append(FAcache[start_pos][188]);
            FAcache[start_pos][35] = node_list;
            break;
          case 36:

            /* token_switch_tail_stmt queue */
            stack.push([195, start_pos, only_new]);

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u95 */
            stack.push([191, start_pos, only_new]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u96 */
            stack.push([193, start_pos, only_new]);
            break;
          case 195:

            /* token_switch_tail_stmt collect */
            node_list = [];

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u95 */
            node_list.append(FAcache[start_pos][191]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u96 */
            node_list.append(FAcache[start_pos][193]);
            FAcache[start_pos][36] = node_list;
            break;
          case 37:

            /* token_ranger queue */
            stack.push([196, start_pos, only_new]);
            break;
          case 196:

            /* token_ranger collect */
            node_list = [];
            FAcache[start_pos][37] = node_list;
            break;
          case 38:

            /* token_fn_decl_arg queue */
            stack.push([199, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u103 */
            stack.push([197, start_pos, only_new]);
            break;
          case 199:

            /* token_fn_decl_arg collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u103 */
            node_list.append(FAcache[start_pos][197]);
            FAcache[start_pos][38] = node_list;
            break;
          case 39:

            /* token_fn_decl_arg_list queue */
            stack.push([204, start_pos, only_new]);

            /* rule_Hfn_decl_arg___u104 */
            stack.push([200, start_pos, only_new]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u105 */
            stack.push([202, start_pos, only_new]);
            break;
          case 204:

            /* token_fn_decl_arg_list collect */
            node_list = [];

            /* rule_Hfn_decl_arg___u104 */
            node_list.append(FAcache[start_pos][200]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u105 */
            node_list.append(FAcache[start_pos][202]);
            FAcache[start_pos][39] = node_list;
            break;
          case 40:

            /* token_return queue */
            stack.push([205, start_pos, only_new]);
            break;
          case 205:

            /* token_return collect */
            node_list = [];
            FAcache[start_pos][40] = node_list;
            break;
          case 41:

            /* token_fn_call_arg_list queue */
            stack.push([210, start_pos, only_new]);

            /* rule_Hrvalue___u115 */
            stack.push([206, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list___u116 */
            stack.push([208, start_pos, only_new]);
            break;
          case 210:

            /* token_fn_call_arg_list collect */
            node_list = [];

            /* rule_Hrvalue___u115 */
            node_list.append(FAcache[start_pos][206]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list___u116 */
            node_list.append(FAcache[start_pos][208]);
            FAcache[start_pos][41] = node_list;
            break;
          case 42:

            /* token_type_list queue */
            stack.push([215, start_pos, only_new]);

            /* rule_Htype___u123 */
            stack.push([211, start_pos, only_new]);

            /* rule_Htype_XXX_Htype_list___u124 */
            stack.push([213, start_pos, only_new]);
            break;
          case 215:

            /* token_type_list collect */
            node_list = [];

            /* rule_Htype___u123 */
            node_list.append(FAcache[start_pos][211]);

            /* rule_Htype_XXX_Htype_list___u124 */
            node_list.append(FAcache[start_pos][213]);
            FAcache[start_pos][42] = node_list;
            break;
          case 43:

            /* token_type_nest queue */
            stack.push([218, start_pos, only_new]);

            /* rule_XXX_Htype_list_XXX___u125 */
            stack.push([216, start_pos, only_new]);
            break;
          case 218:

            /* token_type_nest collect */
            node_list = [];

            /* rule_XXX_Htype_list_XXX___u125 */
            node_list.append(FAcache[start_pos][216]);
            FAcache[start_pos][43] = node_list;
            break;
          case 44:

            /* token_type_field_kv queue */
            stack.push([221, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u126 */
            stack.push([219, start_pos, only_new]);
            break;
          case 221:

            /* token_type_field_kv collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u126 */
            node_list.append(FAcache[start_pos][219]);
            FAcache[start_pos][44] = node_list;
            break;
          case 45:

            /* token_type_field_kv_list queue */
            stack.push([226, start_pos, only_new]);

            /* rule_Htype_field_kv___u127 */
            stack.push([222, start_pos, only_new]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u128 */
            stack.push([224, start_pos, only_new]);
            break;
          case 226:

            /* token_type_field_kv_list collect */
            node_list = [];

            /* rule_Htype_field_kv___u127 */
            node_list.append(FAcache[start_pos][222]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u128 */
            node_list.append(FAcache[start_pos][224]);
            FAcache[start_pos][45] = node_list;
            break;
          case 46:

            /* token_type_field queue */
            stack.push([229, start_pos, only_new]);

            /* rule_XXX_Htype_field_kv_list_XXX___u129 */
            stack.push([227, start_pos, only_new]);
            break;
          case 229:

            /* token_type_field collect */
            node_list = [];

            /* rule_XXX_Htype_field_kv_list_XXX___u129 */
            node_list.append(FAcache[start_pos][227]);
            FAcache[start_pos][46] = node_list;
            break;
          case 67:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 queue */
            chk_len = stack.push([67, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][21];
            if (!list_1) {
              stack.push([21, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 68;
            }
            break;
          case 68:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][21];
            for (_p = 0, _len6 = list_1.length; _p < _len6; _p++) {
              tok = list_1[_p];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hnum_const_ultEdeep_tiEpass__u1";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 20;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][67] != null) {
              FAcache[start_pos][67].append(ret_list);
            } else {
              FAcache[start_pos][67] = ret_list;
            }
            break;
          case 69:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 queue */
            chk_len = stack.push([69, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][22];
            if (!list_1) {
              stack.push([22, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 70;
            }
            break;
          case 70:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][22];
            for (_q = 0, _len7 = list_1.length; _q < _len7; _q++) {
              tok = list_1[_q];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstr_const_ultEdeep_tiEpass__u2";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 20;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][69] != null) {
              FAcache[start_pos][69].append(ret_list);
            } else {
              FAcache[start_pos][69] = ret_list;
            }
            break;
          case 72:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u80 queue */
            chk_len = stack.push([72, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][5];
            if (!list_1) {
              stack.push([5, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 73;
            }
            break;
          case 73:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u80 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][5];
            for (_r = 0, _len8 = list_1.length; _r < _len8; _r++) {
              tok = list_1[_r];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u80";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][72] != null) {
              FAcache[start_pos][72].append(ret_list);
            } else {
              FAcache[start_pos][72] = ret_list;
            }
            break;
          case 74:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u81 queue */
            chk_len = stack.push([74, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][6];
            if (!list_1) {
              stack.push([6, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 75;
            }
            break;
          case 75:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u81 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][6];
            for (_s = 0, _len9 = list_1.length; _s < _len9; _s++) {
              tok = list_1[_s];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u81";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][74] != null) {
              FAcache[start_pos][74].append(ret_list);
            } else {
              FAcache[start_pos][74] = ret_list;
            }
            break;
          case 76:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u82 queue */
            chk_len = stack.push([76, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][7];
            if (!list_1) {
              stack.push([7, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 77;
            }
            break;
          case 77:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u82 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][7];
            for (_t = 0, _len10 = list_1.length; _t < _len10; _t++) {
              tok = list_1[_t];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u82";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][76] != null) {
              FAcache[start_pos][76].append(ret_list);
            } else {
              FAcache[start_pos][76] = ret_list;
            }
            break;
          case 78:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u83 queue */
            chk_len = stack.push([78, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][8];
            if (!list_1) {
              stack.push([8, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 79;
            }
            break;
          case 79:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u83 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][8];
            for (_u = 0, _len11 = list_1.length; _u < _len11; _u++) {
              tok = list_1[_u];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u83";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][78] != null) {
              FAcache[start_pos][78].append(ret_list);
            } else {
              FAcache[start_pos][78] = ret_list;
            }
            break;
          case 80:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u84 queue */
            chk_len = stack.push([80, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][9];
            if (!list_1) {
              stack.push([9, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 81;
            }
            break;
          case 81:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u84 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][9];
            for (_v = 0, _len12 = list_1.length; _v < _len12; _v++) {
              tok = list_1[_v];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u84";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "float";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][80] != null) {
              FAcache[start_pos][80].append(ret_list);
            } else {
              FAcache[start_pos][80] = ret_list;
            }
            break;
          case 83:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u85 queue */
            chk_len = stack.push([83, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][10];
            if (!list_1) {
              stack.push([10, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 84;
            }
            break;
          case 84:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u85 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][10];
            for (_w = 0, _len13 = list_1.length; _w < _len13; _w++) {
              tok = list_1[_w];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u85";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][83] != null) {
              FAcache[start_pos][83].append(ret_list);
            } else {
              FAcache[start_pos][83] = ret_list;
            }
            break;
          case 85:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u86 queue */
            chk_len = stack.push([85, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][11];
            if (!list_1) {
              stack.push([11, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 86;
            }
            break;
          case 86:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u86 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][11];
            for (_x = 0, _len14 = list_1.length; _x < _len14; _x++) {
              tok = list_1[_x];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u86";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][85] != null) {
              FAcache[start_pos][85].append(ret_list);
            } else {
              FAcache[start_pos][85] = ret_list;
            }
            break;
          case 88:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 queue */
            chk_len = stack.push([88, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][20];
            if (!list_1) {
              stack.push([20, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 89;
            }
            break;
          case 89:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][20];
            for (_y = 0, _len15 = list_1.length; _y < _len15; _y++) {
              tok = list_1[_y];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][88] != null) {
              FAcache[start_pos][88].append(ret_list);
            } else {
              FAcache[start_pos][88] = ret_list;
            }
            break;
          case 90:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 queue */
            chk_len = stack.push([90, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][25];
            if (!list_1) {
              stack.push([25, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 91;
            }
            break;
          case 91:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (_z = 0, _len16 = list_1.length; _z < _len16; _z++) {
              tok = list_1[_z];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][90] != null) {
              FAcache[start_pos][90].append(ret_list);
            } else {
              FAcache[start_pos][90] = ret_list;
            }
            break;
          case 92:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 queue */
            chk_len = stack.push([92, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_aa = 0, _len17 = list_1.length; _aa < _len17; _aa++) {
              tok = list_1[_aa];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              if (!list_2) {
                stack.push([30, b_1, 0]);
                continue;
              }
              for (_ab = 0, _len18 = list_2.length; _ab < _len18; _ab++) {
                tok = list_2[_ab];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 93;
            }
            break;
          case 93:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_ac = 0, _len19 = list_1.length; _ac < _len19; _ac++) {
              tok = list_1[_ac];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              for (_ad = 0, _len20 = list_2.length; _ad < _len20; _ad++) {
                tok = list_2[_ad];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_ae = 0, _len21 = list_3.length; _ae < _len21; _ae++) {
                  tok = list_3[_ae];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 23;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][92] != null) {
              FAcache[start_pos][92].append(ret_list);
            } else {
              FAcache[start_pos][92] = ret_list;
            }
            break;
          case 94:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 queue */
            chk_len = stack.push([94, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_af = 0, _len22 = list_1.length; _af < _len22; _af++) {
              tok = list_1[_af];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              if (!list_2) {
                stack.push([30, b_1, 0]);
                continue;
              }
              for (_ag = 0, _len23 = list_2.length; _ag < _len23; _ag++) {
                tok = list_2[_ag];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 95;
            }
            break;
          case 95:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_ah = 0, _len24 = list_1.length; _ah < _len24; _ah++) {
              tok = list_1[_ah];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              for (_ai = 0, _len25 = list_2.length; _ai < _len25; _ai++) {
                tok = list_2[_ai];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_aj = 0, _len26 = list_3.length; _aj < _len26; _aj++) {
                  tok = list_3[_aj];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.left_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 23;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][94] != null) {
              FAcache[start_pos][94].append(ret_list);
            } else {
              FAcache[start_pos][94] = ret_list;
            }
            break;
          case 96:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 queue */
            chk_len = stack.push([96, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_ak = 0, _len27 = list_1.length; _ak < _len27; _ak++) {
              tok = list_1[_ak];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              if (!list_2) {
                stack.push([30, b_1, 0]);
                continue;
              }
              for (_al = 0, _len28 = list_2.length; _al < _len28; _al++) {
                tok = list_2[_al];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 97;
            }
            break;
          case 97:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_am = 0, _len29 = list_1.length; _am < _len29; _am++) {
              tok = list_1[_am];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              for (_an = 0, _len30 = list_2.length; _an < _len30; _an++) {
                tok = list_2[_an];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_ao = 0, _len31 = list_3.length; _ao < _len31; _ao++) {
                  tok = list_3[_ao];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.right_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 23;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][96] != null) {
              FAcache[start_pos][96].append(ret_list);
            } else {
              FAcache[start_pos][96] = ret_list;
            }
            break;
          case 98:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u68 queue */
            chk_len = stack.push([98, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][31];
            if (!list_1) {
              stack.push([31, b_0, 0]);
              continue;
            }
            for (_ap = 0, _len32 = list_1.length; _ap < _len32; _ap++) {
              tok = list_1[_ap];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 99;
            }
            break;
          case 99:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u68 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][31];
            for (_aq = 0, _len33 = list_1.length; _aq < _len33; _aq++) {
              tok = list_1[_aq];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_ar = 0, _len34 = list_2.length; _ar < _len34; _ar++) {
                tok = list_2[_ar];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[1].mx_hash.priority <= arg_list[0].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u68";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 23;
                mx_hash_stub["priority"] = arg_list[0].mx_hash.priority;
                mx_hash_stub["ult"] = "pre_op";
                mx_hash_stub["ti"] = "pre_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][98] != null) {
              FAcache[start_pos][98].append(ret_list);
            } else {
              FAcache[start_pos][98] = ret_list;
            }
            break;
          case 100:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72 queue */
            chk_len = stack.push([100, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_as = 0, _len35 = list_1.length; _as < _len35; _as++) {
              tok = list_1[_as];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][32];
              if (!list_2) {
                stack.push([32, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 101;
            }
            break;
          case 101:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_at = 0, _len36 = list_1.length; _at < _len36; _at++) {
              tok = list_1[_at];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][32];
              for (_au = 0, _len37 = list_2.length; _au < _len37; _au++) {
                tok = list_2[_au];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                if (!(!arg_list[0].mx_hash.tail_space)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u72";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 23;
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                mx_hash_stub["ult"] = "post_op";
                mx_hash_stub["ti"] = "post_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][100] != null) {
              FAcache[start_pos][100].append(ret_list);
            } else {
              FAcache[start_pos][100] = ret_list;
            }
            break;
          case 102:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73 queue */
            chk_len = stack.push([102, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_av = 0, _len38 = list_1.length; _av < _len38; _av++) {
              tok = list_1[_av];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_aw = 0, _len39 = list_2.length; _aw < _len39; _aw++) {
                tok = list_2[_aw];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 103;
            }
            break;
          case 103:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_ax = 0, _len40 = list_1.length; _ax < _len40; _ax++) {
              tok = list_1[_ax];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ay = 0, _len41 = list_2.length; _ay < _len41; _ay++) {
                tok = list_2[_ay];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_az = 0, _len42 = list_3.length; _az < _len42; _az++) {
                  tok = list_3[_az];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ba = 0, _len43 = list_4.length; _ba < _len43; _ba++) {
                    tok = list_4[_ba];
                    if (tok.value !== ']') {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u73";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 23;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "index_access";
                    mx_hash_stub["ti"] = "index_access";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][102] != null) {
              FAcache[start_pos][102].append(ret_list);
            } else {
              FAcache[start_pos][102] = ret_list;
            }
            break;
          case 104:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u74 queue */
            chk_len = stack.push([104, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_bb = 0, _len44 = list_1.length; _bb < _len44; _bb++) {
              tok = list_1[_bb];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 105;
            }
            break;
          case 105:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u74 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_bc = 0, _len45 = list_1.length; _bc < _len45; _bc++) {
              tok = list_1[_bc];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_bd = 0, _len46 = list_2.length; _bd < _len46; _bd++) {
                tok = list_2[_bd];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_be = 0, _len47 = list_3.length; _be < _len47; _be++) {
                  tok = list_3[_be];
                  if (tok.value !== ')') {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u74";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 23;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "bracket";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][104] != null) {
              FAcache[start_pos][104].append(ret_list);
            } else {
              FAcache[start_pos][104] = ret_list;
            }
            break;
          case 106:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u110 queue */
            chk_len = stack.push([106, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_bf = 0, _len48 = list_1.length; _bf < _len48; _bf++) {
              tok = list_1[_bf];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _bg = 0; _bg < 1; _i_2 = ++_bg) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _bh = 0; _bh < 1; _i_2 = ++_bh) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                if (!list_2) {
                  stack.push([39, b_1, 0]);
                  continue;
                }
                for (_bi = 0, _len49 = list_2.length; _bi < _len49; _bi++) {
                  tok = list_2[_bi];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_bj = 0, _len50 = hyp_list_2.length; _bj < _len50; _bj++) {
                tok_list = hyp_list_2[_bj];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_bk = 0, _len51 = list_3.length; _bk < _len51; _bk++) {
                  tok = list_3[_bk];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_bl = 0, _len52 = list_4.length; _bl < _len52; _bl++) {
                    tok = list_4[_bl];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    if (!list_5) {
                      stack.push([34, b_4, 0]);
                      continue;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 107;
            }
            break;
          case 107:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u110 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_bm = 0, _len53 = list_1.length; _bm < _len53; _bm++) {
              tok = list_1[_bm];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _bn = 0; _bn < 1; _i_2 = ++_bn) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _bo = 0; _bo < 1; _i_2 = ++_bo) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                for (_bp = 0, _len54 = list_2.length; _bp < _len54; _bp++) {
                  tok = list_2[_bp];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_bq = 0, _len55 = hyp_list_2.length; _bq < _len55; _bq++) {
                tok_list = hyp_list_2[_bq];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_br = 0, _len56 = list_3.length; _br < _len56; _br++) {
                  tok = list_3[_br];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_bs = 0, _len57 = list_4.length; _bs < _len57; _bs++) {
                    tok = list_4[_bs];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    for (_bt = 0, _len58 = list_5.length; _bt < _len58; _bt++) {
                      tok = list_5[_bt];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_bu = 0, _len59 = list_6.length; _bu < _len59; _bu++) {
                        tok = list_6[_bu];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u110";
                        mx_hash_stub.hash_key = "rvalue";
                        mx_hash_stub.hash_key_idx = 23;
                        mx_hash_stub["priority"] = -9000;
                        mx_hash_stub["ult"] = "cl_decl";
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][106] != null) {
              FAcache[start_pos][106].append(ret_list);
            } else {
              FAcache[start_pos][106] = ret_list;
            }
            break;
          case 108:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u111 queue */
            chk_len = stack.push([108, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_bv = 0, _len60 = list_1.length; _bv < _len60; _bv++) {
              tok = list_1[_bv];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _bw = 0; _bw < 1; _i_2 = ++_bw) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _bx = 0; _bx < 1; _i_2 = ++_bx) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                if (!list_2) {
                  stack.push([39, b_1, 0]);
                  continue;
                }
                for (_by = 0, _len61 = list_2.length; _by < _len61; _by++) {
                  tok = list_2[_by];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_bz = 0, _len62 = hyp_list_2.length; _bz < _len62; _bz++) {
                tok_list = hyp_list_2[_bz];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ca = 0, _len63 = list_3.length; _ca < _len63; _ca++) {
                  tok = list_3[_ca];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cb = 0, _len64 = list_4.length; _cb < _len64; _cb++) {
                    tok = list_4[_cb];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    if (!list_5) {
                      stack.push([34, b_4, 0]);
                      continue;
                    }
                    for (_cc = 0, _len65 = list_5.length; _cc < _len65; _cc++) {
                      tok = list_5[_cc];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_cd = 0, _len66 = list_6.length; _cd < _len66; _cd++) {
                        tok = list_6[_cd];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][26];
                        if (!list_7) {
                          stack.push([26, b_6, 0]);
                          continue;
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 109;
            }
            break;
          case 109:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u111 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_ce = 0, _len67 = list_1.length; _ce < _len67; _ce++) {
              tok = list_1[_ce];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cf = 0; _cf < 1; _i_2 = ++_cf) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cg = 0; _cg < 1; _i_2 = ++_cg) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                for (_ch = 0, _len68 = list_2.length; _ch < _len68; _ch++) {
                  tok = list_2[_ch];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ci = 0, _len69 = hyp_list_2.length; _ci < _len69; _ci++) {
                tok_list = hyp_list_2[_ci];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_cj = 0, _len70 = list_3.length; _cj < _len70; _cj++) {
                  tok = list_3[_cj];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ck = 0, _len71 = list_4.length; _ck < _len71; _ck++) {
                    tok = list_4[_ck];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    for (_cl = 0, _len72 = list_5.length; _cl < _len72; _cl++) {
                      tok = list_5[_cl];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_cm = 0, _len73 = list_6.length; _cm < _len73; _cm++) {
                        tok = list_6[_cm];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][26];
                        for (_cn = 0, _len74 = list_7.length; _cn < _len74; _cn++) {
                          tok = list_7[_cn];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u111";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 23;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][108] != null) {
              FAcache[start_pos][108].append(ret_list);
            } else {
              FAcache[start_pos][108] = ret_list;
            }
            break;
          case 110:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u112 queue */
            chk_len = stack.push([110, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_co = 0, _len75 = list_1.length; _co < _len75; _co++) {
              tok = list_1[_co];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cp = 0; _cp < 1; _i_2 = ++_cp) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cq = 0; _cq < 1; _i_2 = ++_cq) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                if (!list_2) {
                  stack.push([39, b_1, 0]);
                  continue;
                }
                for (_cr = 0, _len76 = list_2.length; _cr < _len76; _cr++) {
                  tok = list_2[_cr];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cs = 0, _len77 = hyp_list_2.length; _cs < _len77; _cs++) {
                tok_list = hyp_list_2[_cs];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ct = 0, _len78 = list_3.length; _ct < _len78; _ct++) {
                  tok = list_3[_ct];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cu = 0, _len79 = list_4.length; _cu < _len79; _cu++) {
                    tok = list_4[_cu];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    if (!list_5) {
                      stack.push([34, b_4, 0]);
                      continue;
                    }
                    for (_cv = 0, _len80 = list_5.length; _cv < _len80; _cv++) {
                      tok = list_5[_cv];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_cw = 0, _len81 = list_6.length; _cw < _len81; _cw++) {
                        tok = list_6[_cw];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        if (!list_7) {
                          stack.push([23, b_6, 0]);
                          continue;
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 111;
            }
            break;
          case 111:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u112 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_cx = 0, _len82 = list_1.length; _cx < _len82; _cx++) {
              tok = list_1[_cx];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cy = 0; _cy < 1; _i_2 = ++_cy) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cz = 0; _cz < 1; _i_2 = ++_cz) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                for (_da = 0, _len83 = list_2.length; _da < _len83; _da++) {
                  tok = list_2[_da];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_db = 0, _len84 = hyp_list_2.length; _db < _len84; _db++) {
                tok_list = hyp_list_2[_db];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_dc = 0, _len85 = list_3.length; _dc < _len85; _dc++) {
                  tok = list_3[_dc];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dd = 0, _len86 = list_4.length; _dd < _len86; _dd++) {
                    tok = list_4[_dd];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][34];
                    for (_de = 0, _len87 = list_5.length; _de < _len87; _de++) {
                      tok = list_5[_de];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_df = 0, _len88 = list_6.length; _df < _len88; _df++) {
                        tok = list_6[_df];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        for (_dg = 0, _len89 = list_7.length; _dg < _len89; _dg++) {
                          tok = list_7[_dg];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u112";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 23;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][110] != null) {
              FAcache[start_pos][110].append(ret_list);
            } else {
              FAcache[start_pos][110] = ret_list;
            }
            break;
          case 112:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117 queue */
            chk_len = stack.push([112, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_dh = 0, _len90 = list_1.length; _dh < _len90; _dh++) {
              tok = list_1[_dh];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_di = 0, _len91 = list_2.length; _di < _len91; _di++) {
                tok = list_2[_di];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _dj = 0; _dj < 1; _i_3 = ++_dj) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _dk = 0; _dk < 1; _i_3 = ++_dk) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][41];
                  if (!list_3) {
                    stack.push([41, b_2, 0]);
                    continue;
                  }
                  for (_dl = 0, _len92 = list_3.length; _dl < _len92; _dl++) {
                    tok = list_3[_dl];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_dm = 0, _len93 = hyp_list_3.length; _dm < _len93; _dm++) {
                  tok_list = hyp_list_3[_dm];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 113;
            }
            break;
          case 113:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_dn = 0, _len94 = list_1.length; _dn < _len94; _dn++) {
              tok = list_1[_dn];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_do = 0, _len95 = list_2.length; _do < _len95; _do++) {
                tok = list_2[_do];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _dp = 0; _dp < 1; _i_3 = ++_dp) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _dq = 0; _dq < 1; _i_3 = ++_dq) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][41];
                  for (_dr = 0, _len96 = list_3.length; _dr < _len96; _dr++) {
                    tok = list_3[_dr];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ds = 0, _len97 = hyp_list_3.length; _ds < _len97; _ds++) {
                  tok_list = hyp_list_3[_ds];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dt = 0, _len98 = list_4.length; _dt < _len98; _dt++) {
                    tok = list_4[_dt];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u117";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 23;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "fn_call";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][112] != null) {
              FAcache[start_pos][112].append(ret_list);
            } else {
              FAcache[start_pos][112] = ret_list;
            }
            break;
          case 114:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118 queue */
            chk_len = stack.push([114, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_du = 0, _len99 = list_1.length; _du < _len99; _du++) {
              tok = list_1[_du];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][41];
              if (!list_2) {
                stack.push([41, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 115;
            }
            break;
          case 115:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_dv = 0, _len100 = list_1.length; _dv < _len100; _dv++) {
              tok = list_1[_dv];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][41];
              for (_dw = 0, _len101 = list_2.length; _dw < _len101; _dw++) {
                tok = list_2[_dw];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority === -9000)) {
                  node.value_array.pop();
                  continue;
                }
                if (!arg_list[0].mx_hash.tail_space) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u118";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 23;
                mx_hash_stub["priority"] = -9000;
                mx_hash_stub["ult"] = "fn_call";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][114] != null) {
              FAcache[start_pos][114].append(ret_list);
            } else {
              FAcache[start_pos][114] = ret_list;
            }
            break;
          case 116:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122 queue */
            chk_len = stack.push([116, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][25];
            if (!list_1) {
              stack.push([25, b_0, 0]);
              continue;
            }
            for (_dx = 0, _len102 = list_1.length; _dx < _len102; _dx++) {
              tok = list_1[_dx];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              if (!list_2) {
                stack.push([30, b_1, 0]);
                continue;
              }
              for (_dy = 0, _len103 = list_2.length; _dy < _len103; _dy++) {
                tok = list_2[_dy];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                if (!list_3) {
                  stack.push([24, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 117;
            }
            break;
          case 117:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (_dz = 0, _len104 = list_1.length; _dz < _len104; _dz++) {
              tok = list_1[_dz];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][30];
              for (_ea = 0, _len105 = list_2.length; _ea < _len105; _ea++) {
                tok = list_2[_ea];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_eb = 0, _len106 = list_3.length; _eb < _len106; _eb++) {
                  tok = list_3[_eb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[2].mx_hash.ult === "directive_fn_call")) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u122";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 23;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][116] != null) {
              FAcache[start_pos][116].append(ret_list);
            } else {
              FAcache[start_pos][116] = ret_list;
            }
            break;
          case 119:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 queue */
            chk_len = stack.push([119, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 120;
            }
            break;
          case 120:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_ec = 0, _len107 = list_1.length; _ec < _len107; _ec++) {
              tok = list_1[_ec];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][119] != null) {
              FAcache[start_pos][119].append(ret_list);
            } else {
              FAcache[start_pos][119] = ret_list;
            }
            break;
          case 121:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u78 queue */
            chk_len = stack.push([121, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][13];
            if (!list_1) {
              stack.push([13, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 122;
            }
            break;
          case 122:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u78 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][13];
            for (_ed = 0, _len108 = list_1.length; _ed < _len108; _ed++) {
              tok = list_1[_ed];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_inline_comment_ultEcomment_tiEpass__u78";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][121] != null) {
              FAcache[start_pos][121].append(ret_list);
            } else {
              FAcache[start_pos][121] = ret_list;
            }
            break;
          case 123:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u79 queue */
            chk_len = stack.push([123, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][14];
            if (!list_1) {
              stack.push([14, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 124;
            }
            break;
          case 124:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u79 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][14];
            for (_ee = 0, _len109 = list_1.length; _ee < _len109; _ee++) {
              tok = list_1[_ee];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_multiline_comment_ultEcomment_tiEpass__u79";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][123] != null) {
              FAcache[start_pos][123].append(ret_list);
            } else {
              FAcache[start_pos][123] = ret_list;
            }
            break;
          case 125:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u87 queue */
            chk_len = stack.push([125, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_ef = 0, _len110 = list_1.length; _ef < _len110; _ef++) {
              tok = list_1[_ef];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_eg = 0, _len111 = list_2.length; _eg < _len111; _eg++) {
                tok = list_2[_eg];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_eh = 0, _len112 = list_3.length; _eh < _len112; _eh++) {
                  tok = list_3[_eh];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][34];
                  if (!list_4) {
                    stack.push([34, b_3, 0]);
                    continue;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 126;
            }
            break;
          case 126:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u87 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_ei = 0, _len113 = list_1.length; _ei < _len113; _ei++) {
              tok = list_1[_ei];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_ej = 0, _len114 = list_2.length; _ej < _len114; _ej++) {
                tok = list_2[_ej];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ek = 0, _len115 = list_3.length; _ek < _len115; _ek++) {
                  tok = list_3[_ek];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][34];
                  for (_el = 0, _len116 = list_4.length; _el < _len116; _el++) {
                    tok = list_4[_el];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u87";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["ult"] = "var_decl";
                    mx_hash_stub["ti"] = "var_decl";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][125] != null) {
              FAcache[start_pos][125].append(ret_list);
            } else {
              FAcache[start_pos][125] = ret_list;
            }
            break;
          case 127:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u89 queue */
            chk_len = stack.push([127, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_em = 0, _len117 = list_1.length; _em < _len117; _em++) {
              tok = list_1[_em];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              for (_en = 0, _len118 = list_2.length; _en < _len118; _en++) {
                tok = list_2[_en];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                if (!list_3) {
                  stack.push([26, b_2, 0]);
                  continue;
                }
                for (_eo = 0, _len119 = list_3.length; _eo < _len119; _eo++) {
                  tok = list_3[_eo];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ep = 0; _ep < 1; _i_4 = ++_ep) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _eq = 0; _eq < 1; _i_4 = ++_eq) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][35];
                    if (!list_4) {
                      stack.push([35, b_3, 0]);
                      continue;
                    }
                    for (_er = 0, _len120 = list_4.length; _er < _len120; _er++) {
                      tok = list_4[_er];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_es = 0, _len121 = hyp_list_4.length; _es < _len121; _es++) {
                    tok_list = hyp_list_4[_es];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 128;
            }
            break;
          case 128:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u89 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_et = 0, _len122 = list_1.length; _et < _len122; _et++) {
              tok = list_1[_et];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_eu = 0, _len123 = list_2.length; _eu < _len123; _eu++) {
                tok = list_2[_eu];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                for (_ev = 0, _len124 = list_3.length; _ev < _len124; _ev++) {
                  tok = list_3[_ev];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ew = 0; _ew < 1; _i_4 = ++_ew) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _ex = 0; _ex < 1; _i_4 = ++_ex) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][35];
                    for (_ey = 0, _len125 = list_4.length; _ey < _len125; _ey++) {
                      tok = list_4[_ey];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_ez = 0, _len126 = hyp_list_4.length; _ez < _len126; _ez++) {
                    tok_list = hyp_list_4[_ez];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u89";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["ult"] = "if";
                    mx_hash_stub["ti"] = "if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][127] != null) {
              FAcache[start_pos][127].append(ret_list);
            } else {
              FAcache[start_pos][127] = ret_list;
            }
            break;
          case 129:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93 queue */
            chk_len = stack.push([129, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][24];
            if (!list_1) {
              stack.push([24, b_0, 0]);
              continue;
            }
            for (_fa = 0, _len127 = list_1.length; _fa < _len127; _fa++) {
              tok = list_1[_fa];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fb = 0, _len128 = list_2.length; _fb < _len128; _fb++) {
                tok = list_2[_fb];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 130;
            }
            break;
          case 130:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (_fc = 0, _len129 = list_1.length; _fc < _len129; _fc++) {
              tok = list_1[_fc];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fd = 0, _len130 = list_2.length; _fd < _len130; _fd++) {
                tok = list_2[_fd];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_fe = 0, _len131 = list_3.length; _fe < _len131; _fe++) {
                  tok = list_3[_fe];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u93";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["ult"] = "if_postfix";
                  mx_hash_stub["ti"] = "if_postfix";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][129] != null) {
              FAcache[start_pos][129].append(ret_list);
            } else {
              FAcache[start_pos][129] = ret_list;
            }
            break;
          case 131:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u94 queue */
            chk_len = stack.push([131, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_ff = 0, _len132 = list_1.length; _ff < _len132; _ff++) {
              tok = list_1[_ff];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              for (_fg = 0, _len133 = list_2.length; _fg < _len133; _fg++) {
                tok = list_2[_fg];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                if (!list_3) {
                  stack.push([27, b_2, 0]);
                  continue;
                }
                for (_fh = 0, _len134 = list_3.length; _fh < _len134; _fh++) {
                  tok = list_3[_fh];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][36];
                  if (!list_4) {
                    stack.push([36, b_3, 0]);
                    continue;
                  }
                  for (_fi = 0, _len135 = list_4.length; _fi < _len135; _fi++) {
                    tok = list_4[_fi];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][29];
                    if (!list_5) {
                      stack.push([29, b_4, 0]);
                      continue;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 132;
            }
            break;
          case 132:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u94 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_fj = 0, _len136 = list_1.length; _fj < _len136; _fj++) {
              tok = list_1[_fj];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_fk = 0, _len137 = list_2.length; _fk < _len137; _fk++) {
                tok = list_2[_fk];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_fl = 0, _len138 = list_3.length; _fl < _len138; _fl++) {
                  tok = list_3[_fl];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][36];
                  for (_fm = 0, _len139 = list_4.length; _fm < _len139; _fm++) {
                    tok = list_4[_fm];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][29];
                    for (_fn = 0, _len140 = list_5.length; _fn < _len140; _fn++) {
                      tok = list_5[_fn];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u94";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["ult"] = "switch";
                      mx_hash_stub["ti"] = "switch";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][131] != null) {
              FAcache[start_pos][131].append(ret_list);
            } else {
              FAcache[start_pos][131] = ret_list;
            }
            break;
          case 133:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u99 queue */
            chk_len = stack.push([133, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_fo = 0, _len141 = list_1.length; _fo < _len141; _fo++) {
              tok = list_1[_fo];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_fp = 0, _len142 = list_2.length; _fp < _len142; _fp++) {
                tok = list_2[_fp];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fq = 0, _len143 = list_3.length; _fq < _len143; _fq++) {
                  tok = list_3[_fq];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fr = 0, _len144 = list_4.length; _fr < _len144; _fr++) {
                    tok = list_4[_fr];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][23];
                    if (!list_5) {
                      stack.push([23, b_4, 0]);
                      continue;
                    }
                    for (_fs = 0, _len145 = list_5.length; _fs < _len145; _fs++) {
                      tok = list_5[_fs];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][37];
                      if (!list_6) {
                        stack.push([37, b_5, 0]);
                        continue;
                      }
                      for (_ft = 0, _len146 = list_6.length; _ft < _len146; _ft++) {
                        tok = list_6[_ft];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        if (!list_7) {
                          stack.push([23, b_6, 0]);
                          continue;
                        }
                        for (_fu = 0, _len147 = list_7.length; _fu < _len147; _fu++) {
                          tok = list_7[_fu];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_fv = 0, _len148 = list_8.length; _fv < _len148; _fv++) {
                            tok = list_8[_fv];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][26];
                            if (!list_9) {
                              stack.push([26, b_8, 0]);
                              continue;
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 134;
            }
            break;
          case 134:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u99 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_fw = 0, _len149 = list_1.length; _fw < _len149; _fw++) {
              tok = list_1[_fw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_fx = 0, _len150 = list_2.length; _fx < _len150; _fx++) {
                tok = list_2[_fx];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fy = 0, _len151 = list_3.length; _fy < _len151; _fy++) {
                  tok = list_3[_fy];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fz = 0, _len152 = list_4.length; _fz < _len152; _fz++) {
                    tok = list_4[_fz];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][23];
                    for (_ga = 0, _len153 = list_5.length; _ga < _len153; _ga++) {
                      tok = list_5[_ga];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][37];
                      for (_gb = 0, _len154 = list_6.length; _gb < _len154; _gb++) {
                        tok = list_6[_gb];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        for (_gc = 0, _len155 = list_7.length; _gc < _len155; _gc++) {
                          tok = list_7[_gc];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_gd = 0, _len156 = list_8.length; _gd < _len156; _gd++) {
                            tok = list_8[_gd];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][26];
                            for (_ge = 0, _len157 = list_9.length; _ge < _len157; _ge++) {
                              tok = list_9[_ge];
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              arg_list = node.value_array;
                              mx_hash_stub = node.mx_hash = {};
                              mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u99";
                              mx_hash_stub.hash_key = "stmt";
                              mx_hash_stub.hash_key_idx = 24;
                              mx_hash_stub["ult"] = "for_range";
                              mx_hash_stub["ti"] = "macro";
                              mx_hash_stub["eol"] = 1;
                              node.b = node.value_array.last().b;
                              ret_list.push(node.clone());
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][133] != null) {
              FAcache[start_pos][133].append(ret_list);
            } else {
              FAcache[start_pos][133] = ret_list;
            }
            break;
          case 135:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u100 queue */
            chk_len = stack.push([135, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_gf = 0, _len158 = list_1.length; _gf < _len158; _gf++) {
              tok = list_1[_gf];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_gg = 0, _len159 = list_2.length; _gg < _len159; _gg++) {
                tok = list_2[_gg];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gh = 0, _len160 = list_3.length; _gh < _len160; _gh++) {
                  tok = list_3[_gh];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_gi = 0, _len161 = list_4.length; _gi < _len161; _gi++) {
                    tok = list_4[_gi];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][23];
                    if (!list_5) {
                      stack.push([23, b_4, 0]);
                      continue;
                    }
                    for (_gj = 0, _len162 = list_5.length; _gj < _len162; _gj++) {
                      tok = list_5[_gj];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][37];
                      if (!list_6) {
                        stack.push([37, b_5, 0]);
                        continue;
                      }
                      for (_gk = 0, _len163 = list_6.length; _gk < _len163; _gk++) {
                        tok = list_6[_gk];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        if (!list_7) {
                          stack.push([23, b_6, 0]);
                          continue;
                        }
                        for (_gl = 0, _len164 = list_7.length; _gl < _len164; _gl++) {
                          tok = list_7[_gl];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_gm = 0, _len165 = list_8.length; _gm < _len165; _gm++) {
                            tok = list_8[_gm];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_gn = 0, _len166 = list_9.length; _gn < _len166; _gn++) {
                              tok = list_9[_gn];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              list_10 = FAcache[b_9][23];
                              if (!list_10) {
                                stack.push([23, b_9, 0]);
                                continue;
                              }
                              for (_go = 0, _len167 = list_10.length; _go < _len167; _go++) {
                                tok = list_10[_go];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                list_11 = FAcache[b_10][26];
                                if (!list_11) {
                                  stack.push([26, b_10, 0]);
                                  continue;
                                }
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 136;
            }
            break;
          case 136:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u100 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_gp = 0, _len168 = list_1.length; _gp < _len168; _gp++) {
              tok = list_1[_gp];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_gq = 0, _len169 = list_2.length; _gq < _len169; _gq++) {
                tok = list_2[_gq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gr = 0, _len170 = list_3.length; _gr < _len170; _gr++) {
                  tok = list_3[_gr];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_gs = 0, _len171 = list_4.length; _gs < _len171; _gs++) {
                    tok = list_4[_gs];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][23];
                    for (_gt = 0, _len172 = list_5.length; _gt < _len172; _gt++) {
                      tok = list_5[_gt];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][37];
                      for (_gu = 0, _len173 = list_6.length; _gu < _len173; _gu++) {
                        tok = list_6[_gu];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][23];
                        for (_gv = 0, _len174 = list_7.length; _gv < _len174; _gv++) {
                          tok = list_7[_gv];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_gw = 0, _len175 = list_8.length; _gw < _len175; _gw++) {
                            tok = list_8[_gw];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_gx = 0, _len176 = list_9.length; _gx < _len176; _gx++) {
                              tok = list_9[_gx];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              list_10 = FAcache[b_9][23];
                              for (_gy = 0, _len177 = list_10.length; _gy < _len177; _gy++) {
                                tok = list_10[_gy];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                list_11 = FAcache[b_10][26];
                                for (_gz = 0, _len178 = list_11.length; _gz < _len178; _gz++) {
                                  tok = list_11[_gz];
                                  b_11 = tok.b;
                                  node.value_array.push(tok);
                                  arg_list = node.value_array;
                                  mx_hash_stub = node.mx_hash = {};
                                  mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u100";
                                  mx_hash_stub.hash_key = "stmt";
                                  mx_hash_stub.hash_key_idx = 24;
                                  mx_hash_stub["ult"] = "for_range";
                                  mx_hash_stub["ti"] = "macro";
                                  mx_hash_stub["eol"] = 1;
                                  node.b = node.value_array.last().b;
                                  ret_list.push(node.clone());
                                  node.value_array.pop();
                                }
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][135] != null) {
              FAcache[start_pos][135].append(ret_list);
            } else {
              FAcache[start_pos][135] = ret_list;
            }
            break;
          case 137:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u101 queue */
            chk_len = stack.push([137, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_ha = 0, _len179 = list_1.length; _ha < _len179; _ha++) {
              tok = list_1[_ha];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_hb = 0, _len180 = list_2.length; _hb < _len180; _hb++) {
                tok = list_2[_hb];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hc = 0, _len181 = list_3.length; _hc < _len181; _hc++) {
                  tok = list_3[_hc];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][23];
                  if (!list_4) {
                    stack.push([23, b_3, 0]);
                    continue;
                  }
                  for (_hd = 0, _len182 = list_4.length; _hd < _len182; _hd++) {
                    tok = list_4[_hd];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][26];
                    if (!list_5) {
                      stack.push([26, b_4, 0]);
                      continue;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 138;
            }
            break;
          case 138:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u101 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_he = 0, _len183 = list_1.length; _he < _len183; _he++) {
              tok = list_1[_he];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_hf = 0, _len184 = list_2.length; _hf < _len184; _hf++) {
                tok = list_2[_hf];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hg = 0, _len185 = list_3.length; _hg < _len185; _hg++) {
                  tok = list_3[_hg];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][23];
                  for (_hh = 0, _len186 = list_4.length; _hh < _len186; _hh++) {
                    tok = list_4[_hh];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][26];
                    for (_hi = 0, _len187 = list_5.length; _hi < _len187; _hi++) {
                      tok = list_5[_hi];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u101";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["ult"] = "for_col";
                      mx_hash_stub["ti"] = "macro";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][137] != null) {
              FAcache[start_pos][137].append(ret_list);
            } else {
              FAcache[start_pos][137] = ret_list;
            }
            break;
          case 139:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u102 queue */
            chk_len = stack.push([139, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_hj = 0, _len188 = list_1.length; _hj < _len188; _hj++) {
              tok = list_1[_hj];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_hk = 0, _len189 = list_2.length; _hk < _len189; _hk++) {
                tok = list_2[_hk];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hl = 0, _len190 = list_3.length; _hl < _len190; _hl++) {
                  tok = list_3[_hl];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][2];
                  if (!list_4) {
                    stack.push([2, b_3, 0]);
                    continue;
                  }
                  for (_hm = 0, _len191 = list_4.length; _hm < _len191; _hm++) {
                    tok = list_4[_hm];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_hn = 0, _len192 = list_5.length; _hn < _len192; _hn++) {
                      tok = list_5[_hn];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][23];
                      if (!list_6) {
                        stack.push([23, b_5, 0]);
                        continue;
                      }
                      for (_ho = 0, _len193 = list_6.length; _ho < _len193; _ho++) {
                        tok = list_6[_ho];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][26];
                        if (!list_7) {
                          stack.push([26, b_6, 0]);
                          continue;
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 140;
            }
            break;
          case 140:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u102 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_hp = 0, _len194 = list_1.length; _hp < _len194; _hp++) {
              tok = list_1[_hp];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_hq = 0, _len195 = list_2.length; _hq < _len195; _hq++) {
                tok = list_2[_hq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hr = 0, _len196 = list_3.length; _hr < _len196; _hr++) {
                  tok = list_3[_hr];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][2];
                  for (_hs = 0, _len197 = list_4.length; _hs < _len197; _hs++) {
                    tok = list_4[_hs];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ht = 0, _len198 = list_5.length; _ht < _len198; _ht++) {
                      tok = list_5[_ht];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][23];
                      for (_hu = 0, _len199 = list_6.length; _hu < _len199; _hu++) {
                        tok = list_6[_hu];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][26];
                        for (_hv = 0, _len200 = list_7.length; _hv < _len200; _hv++) {
                          tok = list_7[_hv];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u102";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["ult"] = "for_col";
                          mx_hash_stub["ti"] = "macro";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][139] != null) {
              FAcache[start_pos][139].append(ret_list);
            } else {
              FAcache[start_pos][139] = ret_list;
            }
            break;
          case 141:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u106 queue */
            chk_len = stack.push([141, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_hw = 0, _len201 = list_1.length; _hw < _len201; _hw++) {
              tok = list_1[_hw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_hx = 0, _len202 = list_2.length; _hx < _len202; _hx++) {
                tok = list_2[_hx];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _hy = 0; _hy < 1; _i_3 = ++_hy) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _hz = 0; _hz < 1; _i_3 = ++_hz) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  if (!list_3) {
                    stack.push([39, b_2, 0]);
                    continue;
                  }
                  for (_ia = 0, _len203 = list_3.length; _ia < _len203; _ia++) {
                    tok = list_3[_ia];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ib = 0, _len204 = hyp_list_3.length; _ib < _len204; _ib++) {
                  tok_list = hyp_list_3[_ib];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ic = 0, _len205 = list_4.length; _ic < _len205; _ic++) {
                    tok = list_4[_ic];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_id = 0, _len206 = list_5.length; _id < _len206; _id++) {
                      tok = list_5[_id];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      if (!list_6) {
                        stack.push([34, b_5, 0]);
                        continue;
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 142;
            }
            break;
          case 142:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u106 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_ie = 0, _len207 = list_1.length; _ie < _len207; _ie++) {
              tok = list_1[_ie];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_if = 0, _len208 = list_2.length; _if < _len208; _if++) {
                tok = list_2[_if];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ig = 0; _ig < 1; _i_3 = ++_ig) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ih = 0; _ih < 1; _i_3 = ++_ih) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  for (_ii = 0, _len209 = list_3.length; _ii < _len209; _ii++) {
                    tok = list_3[_ii];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ij = 0, _len210 = hyp_list_3.length; _ij < _len210; _ij++) {
                  tok_list = hyp_list_3[_ij];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ik = 0, _len211 = list_4.length; _ik < _len211; _ik++) {
                    tok = list_4[_ik];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_il = 0, _len212 = list_5.length; _il < _len212; _il++) {
                      tok = list_5[_il];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      for (_im = 0, _len213 = list_6.length; _im < _len213; _im++) {
                        tok = list_6[_im];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_in = 0, _len214 = list_7.length; _in < _len214; _in++) {
                          tok = list_7[_in];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u106";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["ult"] = "fn_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][141] != null) {
              FAcache[start_pos][141].append(ret_list);
            } else {
              FAcache[start_pos][141] = ret_list;
            }
            break;
          case 143:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u107 queue */
            chk_len = stack.push([143, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_io = 0, _len215 = list_1.length; _io < _len215; _io++) {
              tok = list_1[_io];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ip = 0, _len216 = list_2.length; _ip < _len216; _ip++) {
                tok = list_2[_ip];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _iq = 0; _iq < 1; _i_3 = ++_iq) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ir = 0; _ir < 1; _i_3 = ++_ir) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  if (!list_3) {
                    stack.push([39, b_2, 0]);
                    continue;
                  }
                  for (_is = 0, _len217 = list_3.length; _is < _len217; _is++) {
                    tok = list_3[_is];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_it = 0, _len218 = hyp_list_3.length; _it < _len218; _it++) {
                  tok_list = hyp_list_3[_it];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_iu = 0, _len219 = list_4.length; _iu < _len219; _iu++) {
                    tok = list_4[_iu];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_iv = 0, _len220 = list_5.length; _iv < _len220; _iv++) {
                      tok = list_5[_iv];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      if (!list_6) {
                        stack.push([34, b_5, 0]);
                        continue;
                      }
                      for (_iw = 0, _len221 = list_6.length; _iw < _len221; _iw++) {
                        tok = list_6[_iw];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ix = 0, _len222 = list_7.length; _ix < _len222; _ix++) {
                          tok = list_7[_ix];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][26];
                          if (!list_8) {
                            stack.push([26, b_7, 0]);
                            continue;
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 144;
            }
            break;
          case 144:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u107 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_iy = 0, _len223 = list_1.length; _iy < _len223; _iy++) {
              tok = list_1[_iy];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_iz = 0, _len224 = list_2.length; _iz < _len224; _iz++) {
                tok = list_2[_iz];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ja = 0; _ja < 1; _i_3 = ++_ja) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _jb = 0; _jb < 1; _i_3 = ++_jb) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  for (_jc = 0, _len225 = list_3.length; _jc < _len225; _jc++) {
                    tok = list_3[_jc];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_jd = 0, _len226 = hyp_list_3.length; _jd < _len226; _jd++) {
                  tok_list = hyp_list_3[_jd];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_je = 0, _len227 = list_4.length; _je < _len227; _je++) {
                    tok = list_4[_je];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_jf = 0, _len228 = list_5.length; _jf < _len228; _jf++) {
                      tok = list_5[_jf];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      for (_jg = 0, _len229 = list_6.length; _jg < _len229; _jg++) {
                        tok = list_6[_jg];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_jh = 0, _len230 = list_7.length; _jh < _len230; _jh++) {
                          tok = list_7[_jh];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][26];
                          for (_ji = 0, _len231 = list_8.length; _ji < _len231; _ji++) {
                            tok = list_8[_ji];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u107";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 24;
                            mx_hash_stub["ult"] = "fn_decl";
                            mx_hash_stub["eol"] = 1;
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][143] != null) {
              FAcache[start_pos][143].append(ret_list);
            } else {
              FAcache[start_pos][143] = ret_list;
            }
            break;
          case 145:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u108 queue */
            chk_len = stack.push([145, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_jj = 0, _len232 = list_1.length; _jj < _len232; _jj++) {
              tok = list_1[_jj];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_jk = 0, _len233 = list_2.length; _jk < _len233; _jk++) {
                tok = list_2[_jk];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _jl = 0; _jl < 1; _i_3 = ++_jl) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _jm = 0; _jm < 1; _i_3 = ++_jm) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  if (!list_3) {
                    stack.push([39, b_2, 0]);
                    continue;
                  }
                  for (_jn = 0, _len234 = list_3.length; _jn < _len234; _jn++) {
                    tok = list_3[_jn];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_jo = 0, _len235 = hyp_list_3.length; _jo < _len235; _jo++) {
                  tok_list = hyp_list_3[_jo];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_jp = 0, _len236 = list_4.length; _jp < _len236; _jp++) {
                    tok = list_4[_jp];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_jq = 0, _len237 = list_5.length; _jq < _len237; _jq++) {
                      tok = list_5[_jq];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      if (!list_6) {
                        stack.push([34, b_5, 0]);
                        continue;
                      }
                      for (_jr = 0, _len238 = list_6.length; _jr < _len238; _jr++) {
                        tok = list_6[_jr];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_js = 0, _len239 = list_7.length; _js < _len239; _js++) {
                          tok = list_7[_js];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][23];
                          if (!list_8) {
                            stack.push([23, b_7, 0]);
                            continue;
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 146;
            }
            break;
          case 146:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u108 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_jt = 0, _len240 = list_1.length; _jt < _len240; _jt++) {
              tok = list_1[_jt];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ju = 0, _len241 = list_2.length; _ju < _len241; _ju++) {
                tok = list_2[_ju];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _jv = 0; _jv < 1; _i_3 = ++_jv) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _jw = 0; _jw < 1; _i_3 = ++_jw) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  for (_jx = 0, _len242 = list_3.length; _jx < _len242; _jx++) {
                    tok = list_3[_jx];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_jy = 0, _len243 = hyp_list_3.length; _jy < _len243; _jy++) {
                  tok_list = hyp_list_3[_jy];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_jz = 0, _len244 = list_4.length; _jz < _len244; _jz++) {
                    tok = list_4[_jz];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ka = 0, _len245 = list_5.length; _ka < _len245; _ka++) {
                      tok = list_5[_ka];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][34];
                      for (_kb = 0, _len246 = list_6.length; _kb < _len246; _kb++) {
                        tok = list_6[_kb];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_kc = 0, _len247 = list_7.length; _kc < _len247; _kc++) {
                          tok = list_7[_kc];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][23];
                          for (_kd = 0, _len248 = list_8.length; _kd < _len248; _kd++) {
                            tok = list_8[_kd];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u108";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 24;
                            mx_hash_stub["ult"] = "fn_decl";
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][145] != null) {
              FAcache[start_pos][145].append(ret_list);
            } else {
              FAcache[start_pos][145] = ret_list;
            }
            break;
          case 147:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u109 queue */
            chk_len = stack.push([147, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][40];
            if (!list_1) {
              stack.push([40, b_0, 0]);
              continue;
            }
            for (_ke = 0, _len249 = list_1.length; _ke < _len249; _ke++) {
              tok = list_1[_ke];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _kf = 0; _kf < 1; _i_2 = ++_kf) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _kg = 0; _kg < 1; _i_2 = ++_kg) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][23];
                if (!list_2) {
                  stack.push([23, b_1, 0]);
                  continue;
                }
                for (_kh = 0, _len250 = list_2.length; _kh < _len250; _kh++) {
                  tok = list_2[_kh];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_ki = 0, _len251 = hyp_list_2.length; _ki < _len251; _ki++) {
                tok_list = hyp_list_2[_ki];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 148;
            }
            break;
          case 148:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u109 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][40];
            for (_kj = 0, _len252 = list_1.length; _kj < _len252; _kj++) {
              tok = list_1[_kj];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _kk = 0; _kk < 1; _i_2 = ++_kk) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _kl = 0; _kl < 1; _i_2 = ++_kl) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][23];
                for (_km = 0, _len253 = list_2.length; _km < _len253; _km++) {
                  tok = list_2[_km];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_kn = 0, _len254 = hyp_list_2.length; _kn < _len254; _kn++) {
                tok_list = hyp_list_2[_kn];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u109";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["ult"] = "return";
                mx_hash_stub["ti"] = "return";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][147] != null) {
              FAcache[start_pos][147].append(ret_list);
            } else {
              FAcache[start_pos][147] = ret_list;
            }
            break;
          case 149:

            /* rule_class_Htok_identifier_ultEclass_decl__u113 queue */
            chk_len = stack.push([149, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_ko = 0, _len255 = list_1.length; _ko < _len255; _ko++) {
              tok = list_1[_ko];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 150;
            }
            break;
          case 150:

            /* rule_class_Htok_identifier_ultEclass_decl__u113 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_kp = 0, _len256 = list_1.length; _kp < _len256; _kp++) {
              tok = list_1[_kp];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_kq = 0, _len257 = list_2.length; _kq < _len257; _kq++) {
                tok = list_2[_kq];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_class_Htok_identifier_ultEclass_decl__u113";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["ult"] = "class_decl";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][149] != null) {
              FAcache[start_pos][149].append(ret_list);
            } else {
              FAcache[start_pos][149] = ret_list;
            }
            break;
          case 151:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u114 queue */
            chk_len = stack.push([151, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_kr = 0, _len258 = list_1.length; _kr < _len258; _kr++) {
              tok = list_1[_kr];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              if (!list_2) {
                stack.push([2, b_1, 0]);
                continue;
              }
              for (_ks = 0, _len259 = list_2.length; _ks < _len259; _ks++) {
                tok = list_2[_ks];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                if (!list_3) {
                  stack.push([26, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 152;
            }
            break;
          case 152:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u114 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_kt = 0, _len260 = list_1.length; _kt < _len260; _kt++) {
              tok = list_1[_kt];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_ku = 0, _len261 = list_2.length; _ku < _len261; _ku++) {
                tok = list_2[_ku];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                for (_kv = 0, _len262 = list_3.length; _kv < _len262; _kv++) {
                  tok = list_3[_kv];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u114";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["ult"] = "class_decl";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][151] != null) {
              FAcache[start_pos][151].append(ret_list);
            } else {
              FAcache[start_pos][151] = ret_list;
            }
            break;
          case 153:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u119 queue */
            chk_len = stack.push([153, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][25];
            if (!list_1) {
              stack.push([25, b_0, 0]);
              continue;
            }
            for (_kw = 0, _len263 = list_1.length; _kw < _len263; _kw++) {
              tok = list_1[_kw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              if (!list_2) {
                stack.push([26, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 154;
            }
            break;
          case 154:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u119 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (_kx = 0, _len264 = list_1.length; _kx < _len264; _kx++) {
              tok = list_1[_kx];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              for (_ky = 0, _len265 = list_2.length; _ky < _len265; _ky++) {
                tok = list_2[_ky];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u119";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["ult"] = "directive_fn_call";
                mx_hash_stub["ti"] = "macro";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][153] != null) {
              FAcache[start_pos][153].append(ret_list);
            } else {
              FAcache[start_pos][153] = ret_list;
            }
            break;
          case 155:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u120 queue */
            chk_len = stack.push([155, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][25];
            if (!list_1) {
              stack.push([25, b_0, 0]);
              continue;
            }
            for (_kz = 0, _len266 = list_1.length; _kz < _len266; _kz++) {
              tok = list_1[_kz];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][41];
              if (!list_2) {
                stack.push([41, b_1, 0]);
                continue;
              }
              for (_la = 0, _len267 = list_2.length; _la < _len267; _la++) {
                tok = list_2[_la];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                if (!list_3) {
                  stack.push([26, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 156;
            }
            break;
          case 156:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u120 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (_lb = 0, _len268 = list_1.length; _lb < _len268; _lb++) {
              tok = list_1[_lb];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][41];
              for (_lc = 0, _len269 = list_2.length; _lc < _len269; _lc++) {
                tok = list_2[_lc];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                for (_ld = 0, _len270 = list_3.length; _ld < _len270; _ld++) {
                  tok = list_3[_ld];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(!!arg_list[0].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u120";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["ult"] = "directive_fn_call";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][155] != null) {
              FAcache[start_pos][155].append(ret_list);
            } else {
              FAcache[start_pos][155] = ret_list;
            }
            break;
          case 157:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u121 queue */
            chk_len = stack.push([157, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][25];
            if (!list_1) {
              stack.push([25, b_0, 0]);
              continue;
            }
            for (_le = 0, _len271 = list_1.length; _le < _len271; _le++) {
              tok = list_1[_le];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lf = 0, _len272 = list_2.length; _lf < _len272; _lf++) {
                tok = list_2[_lf];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _lg = 0; _lg < 1; _i_3 = ++_lg) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lh = 0; _lh < 1; _i_3 = ++_lh) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][41];
                  if (!list_3) {
                    stack.push([41, b_2, 0]);
                    continue;
                  }
                  for (_li = 0, _len273 = list_3.length; _li < _len273; _li++) {
                    tok = list_3[_li];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lj = 0, _len274 = hyp_list_3.length; _lj < _len274; _lj++) {
                  tok_list = hyp_list_3[_lj];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_lk = 0, _len275 = list_4.length; _lk < _len275; _lk++) {
                    tok = list_4[_lk];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][26];
                    if (!list_5) {
                      stack.push([26, b_4, 0]);
                      continue;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 158;
            }
            break;
          case 158:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u121 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (_ll = 0, _len276 = list_1.length; _ll < _len276; _ll++) {
              tok = list_1[_ll];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lm = 0, _len277 = list_2.length; _lm < _len277; _lm++) {
                tok = list_2[_lm];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ln = 0; _ln < 1; _i_3 = ++_ln) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lo = 0; _lo < 1; _i_3 = ++_lo) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][41];
                  for (_lp = 0, _len278 = list_3.length; _lp < _len278; _lp++) {
                    tok = list_3[_lp];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lq = 0, _len279 = hyp_list_3.length; _lq < _len279; _lq++) {
                  tok_list = hyp_list_3[_lq];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_lr = 0, _len280 = list_4.length; _lr < _len280; _lr++) {
                    tok = list_4[_lr];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][26];
                    for (_ls = 0, _len281 = list_5.length; _ls < _len281; _ls++) {
                      tok = list_5[_ls];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      if (!(!arg_list[0].mx_hash.tail_space)) {
                        node.value_array.pop();
                        continue;
                      }
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u121";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "directive_fn_call";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][157] != null) {
              FAcache[start_pos][157].append(ret_list);
            } else {
              FAcache[start_pos][157] = ret_list;
            }
            break;
          case 160:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 queue */
            chk_len = stack.push([160, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 161;
            }
            break;
          case 161:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_lt = 0, _len282 = list_1.length; _lt < _len282; _lt++) {
              tok = list_1[_lt];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7";
              mx_hash_stub.hash_key = "lvalue";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "id";
              mx_hash_stub["ti"] = "id";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][160] != null) {
              FAcache[start_pos][160].append(ret_list);
            } else {
              FAcache[start_pos][160] = ret_list;
            }
            break;
          case 162:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88 queue */
            chk_len = stack.push([162, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_lu = 0, _len283 = list_1.length; _lu < _len283; _lu++) {
              tok = list_1[_lu];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lv = 0, _len284 = list_2.length; _lv < _len284; _lv++) {
                tok = list_2[_lv];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][2];
                if (!list_3) {
                  stack.push([2, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 163;
            }
            break;
          case 163:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_lw = 0, _len285 = list_1.length; _lw < _len285; _lw++) {
              tok = list_1[_lw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lx = 0, _len286 = list_2.length; _lx < _len286; _lx++) {
                tok = list_2[_lx];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][2];
                for (_ly = 0, _len287 = list_3.length; _ly < _len287; _ly++) {
                  tok = list_3[_ly];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === -9000)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u88";
                  mx_hash_stub.hash_key = "lvalue";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "field_access";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["tail_space"] = arg_list[2].mx_hash.tail_space;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][162] != null) {
              FAcache[start_pos][162].append(ret_list);
            } else {
              FAcache[start_pos][162] = ret_list;
            }
            break;
          case 165:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 queue */
            chk_len = stack.push([165, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][27];
            if (!list_1) {
              stack.push([27, b_0, 0]);
              continue;
            }
            for (_lz = 0, _len288 = list_1.length; _lz < _len288; _lz++) {
              tok = list_1[_lz];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              if (!list_2) {
                stack.push([28, b_1, 0]);
                continue;
              }
              for (_ma = 0, _len289 = list_2.length; _ma < _len289; _ma++) {
                tok = list_2[_ma];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][29];
                if (!list_3) {
                  stack.push([29, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 166;
            }
            break;
          case 166:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][27];
            for (_mb = 0, _len290 = list_1.length; _mb < _len290; _mb++) {
              tok = list_1[_mb];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_mc = 0, _len291 = list_2.length; _mc < _len291; _mc++) {
                tok = list_2[_mc];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][29];
                for (_md = 0, _len292 = list_3.length; _md < _len292; _md++) {
                  tok = list_3[_md];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6";
                  mx_hash_stub.hash_key = "block";
                  mx_hash_stub.hash_key_idx = 26;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "block";
                  mx_hash_stub["ti"] = "block";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][165] != null) {
              FAcache[start_pos][165].append(ret_list);
            } else {
              FAcache[start_pos][165] = ret_list;
            }
            break;
          case 169:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u75 queue */
            chk_len = stack.push([169, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][24];
            if (!list_1) {
              stack.push([24, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 170;
            }
            break;
          case 170:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u75 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (_me = 0, _len293 = list_1.length; _me < _len293; _me++) {
              tok = list_1[_me];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstmt_ultEdeep_scope_tiEpass__u75";
              mx_hash_stub.hash_key = "stmt_plus";
              mx_hash_stub.hash_key_idx = 28;
              mx_hash_stub["ult"] = "deep_scope";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][169] != null) {
              FAcache[start_pos][169].append(ret_list);
            } else {
              FAcache[start_pos][169] = ret_list;
            }
            break;
          case 171:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u76 queue */
            chk_len = stack.push([171, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][24];
            if (!list_1) {
              stack.push([24, b_0, 0]);
              continue;
            }
            for (_mf = 0, _len294 = list_1.length; _mf < _len294; _mf++) {
              tok = list_1[_mf];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              if (!list_2) {
                stack.push([28, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 172;
            }
            break;
          case 172:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u76 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (_mg = 0, _len295 = list_1.length; _mg < _len295; _mg++) {
              tok = list_1[_mg];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_mh = 0, _len296 = list_2.length; _mh < _len296; _mh++) {
                tok = list_2[_mh];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!arg_list[0].mx_hash.eol) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u76";
                mx_hash_stub.hash_key = "stmt_plus";
                mx_hash_stub.hash_key_idx = 28;
                mx_hash_stub["ult"] = "deep_scope";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][171] != null) {
              FAcache[start_pos][171].append(ret_list);
            } else {
              FAcache[start_pos][171] = ret_list;
            }
            break;
          case 173:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u77 queue */
            chk_len = stack.push([173, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][24];
            if (!list_1) {
              stack.push([24, b_0, 0]);
              continue;
            }
            for (_mi = 0, _len297 = list_1.length; _mi < _len297; _mi++) {
              tok = list_1[_mi];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][33];
              if (!list_2) {
                stack.push([33, b_1, 0]);
                continue;
              }
              for (_mj = 0, _len298 = list_2.length; _mj < _len298; _mj++) {
                tok = list_2[_mj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][28];
                if (!list_3) {
                  stack.push([28, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 174;
            }
            break;
          case 174:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u77 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (_mk = 0, _len299 = list_1.length; _mk < _len299; _mk++) {
              tok = list_1[_mk];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][33];
              for (_ml = 0, _len300 = list_2.length; _ml < _len300; _ml++) {
                tok = list_2[_ml];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][28];
                for (_mm = 0, _len301 = list_3.length; _mm < _len301; _mm++) {
                  tok = list_3[_mm];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u77";
                  mx_hash_stub.hash_key = "stmt_plus";
                  mx_hash_stub.hash_key_idx = 28;
                  mx_hash_stub["ult"] = "deep_scope";
                  mx_hash_stub["ti"] = "stmt_plus_last";
                  mx_hash_stub["eol_pass"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][173] != null) {
              FAcache[start_pos][173].append(ret_list);
            } else {
              FAcache[start_pos][173] = ret_list;
            }
            break;
          case 181:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u130 queue */
            chk_len = stack.push([181, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_mn = 0, _len302 = list_1.length; _mn < _len302; _mn++) {
              tok = list_1[_mn];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _mo = 0; _mo < 1; _i_2 = ++_mo) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _mp = 0; _mp < 1; _i_2 = ++_mp) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][43];
                if (!list_2) {
                  stack.push([43, b_1, 0]);
                  continue;
                }
                for (_mq = 0, _len303 = list_2.length; _mq < _len303; _mq++) {
                  tok = list_2[_mq];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_mr = 0, _len304 = hyp_list_2.length; _mr < _len304; _mr++) {
                tok_list = hyp_list_2[_mr];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ms = 0; _ms < 1; _i_3 = ++_ms) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mt = 0; _mt < 1; _i_3 = ++_mt) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][46];
                  if (!list_3) {
                    stack.push([46, b_2, 0]);
                    continue;
                  }
                  for (_mu = 0, _len305 = list_3.length; _mu < _len305; _mu++) {
                    tok = list_3[_mu];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_mv = 0, _len306 = hyp_list_3.length; _mv < _len306; _mv++) {
                  tok_list = hyp_list_3[_mv];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 182;
            }
            break;
          case 182:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u130 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_mw = 0, _len307 = list_1.length; _mw < _len307; _mw++) {
              tok = list_1[_mw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _mx = 0; _mx < 1; _i_2 = ++_mx) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _my = 0; _my < 1; _i_2 = ++_my) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][43];
                for (_mz = 0, _len308 = list_2.length; _mz < _len308; _mz++) {
                  tok = list_2[_mz];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_na = 0, _len309 = hyp_list_2.length; _na < _len309; _na++) {
                tok_list = hyp_list_2[_na];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nb = 0; _nb < 1; _i_3 = ++_nb) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _nc = 0; _nc < 1; _i_3 = ++_nc) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][46];
                  for (_nd = 0, _len310 = list_3.length; _nd < _len310; _nd++) {
                    tok = list_3[_nd];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ne = 0, _len311 = hyp_list_3.length; _ne < _len311; _ne++) {
                  tok_list = hyp_list_3[_ne];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u130";
                  mx_hash_stub.hash_key = "type";
                  mx_hash_stub.hash_key_idx = 34;
                  mx_hash_stub["ult"] = "type_name";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][181] != null) {
              FAcache[start_pos][181].append(ret_list);
            } else {
              FAcache[start_pos][181] = ret_list;
            }
            break;
          case 184:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u90 queue */
            chk_len = stack.push([184, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_nf = 0, _len312 = list_1.length; _nf < _len312; _nf++) {
              tok = list_1[_nf];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ng = 0, _len313 = list_2.length; _ng < _len313; _ng++) {
                tok = list_2[_ng];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                if (!list_3) {
                  stack.push([23, b_2, 0]);
                  continue;
                }
                for (_nh = 0, _len314 = list_3.length; _nh < _len314; _nh++) {
                  tok = list_3[_nh];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][26];
                  if (!list_4) {
                    stack.push([26, b_3, 0]);
                    continue;
                  }
                  for (_ni = 0, _len315 = list_4.length; _ni < _len315; _ni++) {
                    tok = list_4[_ni];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _nj = 0; _nj < 1; _i_5 = ++_nj) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _nk = 0; _nk < 1; _i_5 = ++_nk) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_5 = FAcache[b_4][35];
                      if (!list_5) {
                        stack.push([35, b_4, 0]);
                        continue;
                      }
                      for (_nl = 0, _len316 = list_5.length; _nl < _len316; _nl++) {
                        tok = list_5[_nl];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_nm = 0, _len317 = hyp_list_5.length; _nm < _len317; _nm++) {
                      tok_list = hyp_list_5[_nm];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 185;
            }
            break;
          case 185:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u90 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_nn = 0, _len318 = list_1.length; _nn < _len318; _nn++) {
              tok = list_1[_nn];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_no = 0, _len319 = list_2.length; _no < _len319; _no++) {
                tok = list_2[_no];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][23];
                for (_np = 0, _len320 = list_3.length; _np < _len320; _np++) {
                  tok = list_3[_np];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][26];
                  for (_nq = 0, _len321 = list_4.length; _nq < _len321; _nq++) {
                    tok = list_4[_nq];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _nr = 0; _nr < 1; _i_5 = ++_nr) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _ns = 0; _ns < 1; _i_5 = ++_ns) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_5 = FAcache[b_4][35];
                      for (_nt = 0, _len322 = list_5.length; _nt < _len322; _nt++) {
                        tok = list_5[_nt];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_nu = 0, _len323 = hyp_list_5.length; _nu < _len323; _nu++) {
                      tok_list = hyp_list_5[_nu];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u90";
                      mx_hash_stub.hash_key = "if_tail_stmt";
                      mx_hash_stub.hash_key_idx = 35;
                      mx_hash_stub["ult"] = "else_if";
                      mx_hash_stub["ti"] = "else_if";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][184] != null) {
              FAcache[start_pos][184].append(ret_list);
            } else {
              FAcache[start_pos][184] = ret_list;
            }
            break;
          case 186:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u91 queue */
            chk_len = stack.push([186, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (_nv = 0, _len324 = list_1.length; _nv < _len324; _nv++) {
              tok = list_1[_nv];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (_nw = 0, _len325 = list_1.length; _nw < _len325; _nw++) {
              tok = list_1[_nw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (_nx = 0, _len326 = list_1.length; _nx < _len326; _nx++) {
              tok = list_1[_nx];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            node = old_node;
            for (_ny = 0, _len327 = hyp_list_1.length; _ny < _len327; _ny++) {
              tok_list = hyp_list_1[_ny];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              for (_nz = 0, _len328 = list_2.length; _nz < _len328; _nz++) {
                tok = list_2[_nz];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                if (!list_3) {
                  stack.push([26, b_2, 0]);
                  continue;
                }
                for (_oa = 0, _len329 = list_3.length; _oa < _len329; _oa++) {
                  tok = list_3[_oa];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ob = 0; _ob < 1; _i_4 = ++_ob) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _oc = 0; _oc < 1; _i_4 = ++_oc) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][35];
                    if (!list_4) {
                      stack.push([35, b_3, 0]);
                      continue;
                    }
                    for (_od = 0, _len330 = list_4.length; _od < _len330; _od++) {
                      tok = list_4[_od];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_oe = 0, _len331 = hyp_list_4.length; _oe < _len331; _oe++) {
                    tok_list = hyp_list_4[_oe];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 187;
            }
            break;
          case 187:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u91 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (_of = 0, _len332 = list_1.length; _of < _len332; _of++) {
              tok = list_1[_of];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (_og = 0, _len333 = list_1.length; _og < _len333; _og++) {
              tok = list_1[_og];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (_oh = 0, _len334 = list_1.length; _oh < _len334; _oh++) {
              tok = list_1[_oh];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            node = old_node;
            for (_oi = 0, _len335 = hyp_list_1.length; _oi < _len335; _oi++) {
              tok_list = hyp_list_1[_oi];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_oj = 0, _len336 = list_2.length; _oj < _len336; _oj++) {
                tok = list_2[_oj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                for (_ok = 0, _len337 = list_3.length; _ok < _len337; _ok++) {
                  tok = list_3[_ok];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ol = 0; _ol < 1; _i_4 = ++_ol) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _om = 0; _om < 1; _i_4 = ++_om) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][35];
                    for (_on = 0, _len338 = list_4.length; _on < _len338; _on++) {
                      tok = list_4[_on];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_oo = 0, _len339 = hyp_list_4.length; _oo < _len339; _oo++) {
                    tok_list = hyp_list_4[_oo];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u91";
                    mx_hash_stub.hash_key = "if_tail_stmt";
                    mx_hash_stub.hash_key_idx = 35;
                    mx_hash_stub["ult"] = "else_if";
                    mx_hash_stub["ti"] = "else_if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            if (FAcache[start_pos][186] != null) {
              FAcache[start_pos][186].append(ret_list);
            } else {
              FAcache[start_pos][186] = ret_list;
            }
            break;
          case 188:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u92 queue */
            chk_len = stack.push([188, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_op = 0, _len340 = list_1.length; _op < _len340; _op++) {
              tok = list_1[_op];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              if (!list_2) {
                stack.push([26, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 189;
            }
            break;
          case 189:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u92 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_oq = 0, _len341 = list_1.length; _oq < _len341; _oq++) {
              tok = list_1[_oq];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              for (_or = 0, _len342 = list_2.length; _or < _len342; _or++) {
                tok = list_2[_or];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEelse_tiEelse_eolE1__u92";
                mx_hash_stub.hash_key = "if_tail_stmt";
                mx_hash_stub.hash_key_idx = 35;
                mx_hash_stub["ult"] = "else";
                mx_hash_stub["ti"] = "else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][188] != null) {
              FAcache[start_pos][188].append(ret_list);
            } else {
              FAcache[start_pos][188] = ret_list;
            }
            break;
          case 191:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u95 queue */
            chk_len = stack.push([191, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_os = 0, _len343 = list_1.length; _os < _len343; _os++) {
              tok = list_1[_os];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              if (!list_2) {
                stack.push([23, b_1, 0]);
                continue;
              }
              for (_ot = 0, _len344 = list_2.length; _ot < _len344; _ot++) {
                tok = list_2[_ot];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                if (!list_3) {
                  stack.push([26, b_2, 0]);
                  continue;
                }
                for (_ou = 0, _len345 = list_3.length; _ou < _len345; _ou++) {
                  tok = list_3[_ou];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ov = 0; _ov < 1; _i_4 = ++_ov) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _ow = 0; _ow < 1; _i_4 = ++_ow) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][36];
                    if (!list_4) {
                      stack.push([36, b_3, 0]);
                      continue;
                    }
                    for (_ox = 0, _len346 = list_4.length; _ox < _len346; _ox++) {
                      tok = list_4[_ox];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_oy = 0, _len347 = hyp_list_4.length; _oy < _len347; _oy++) {
                    tok_list = hyp_list_4[_oy];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 192;
            }
            break;
          case 192:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u95 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_oz = 0, _len348 = list_1.length; _oz < _len348; _oz++) {
              tok = list_1[_oz];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][23];
              for (_pa = 0, _len349 = list_2.length; _pa < _len349; _pa++) {
                tok = list_2[_pa];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][26];
                for (_pb = 0, _len350 = list_3.length; _pb < _len350; _pb++) {
                  tok = list_3[_pb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _pc = 0; _pc < 1; _i_4 = ++_pc) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _pd = 0; _pd < 1; _i_4 = ++_pd) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][36];
                    for (_pe = 0, _len351 = list_4.length; _pe < _len351; _pe++) {
                      tok = list_4[_pe];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_pf = 0, _len352 = hyp_list_4.length; _pf < _len352; _pf++) {
                    tok_list = hyp_list_4[_pf];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u95";
                    mx_hash_stub.hash_key = "switch_tail_stmt";
                    mx_hash_stub.hash_key_idx = 36;
                    mx_hash_stub["ult"] = "switch_when";
                    mx_hash_stub["ti"] = "switch_when";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][191] != null) {
              FAcache[start_pos][191].append(ret_list);
            } else {
              FAcache[start_pos][191] = ret_list;
            }
            break;
          case 193:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u96 queue */
            chk_len = stack.push([193, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_pg = 0, _len353 = list_1.length; _pg < _len353; _pg++) {
              tok = list_1[_pg];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              if (!list_2) {
                stack.push([26, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 194;
            }
            break;
          case 194:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u96 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_ph = 0, _len354 = list_1.length; _ph < _len354; _ph++) {
              tok = list_1[_ph];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][26];
              for (_pi = 0, _len355 = list_2.length; _pi < _len355; _pi++) {
                tok = list_2[_pi];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u96";
                mx_hash_stub.hash_key = "switch_tail_stmt";
                mx_hash_stub.hash_key_idx = 36;
                mx_hash_stub["ult"] = "switch_else";
                mx_hash_stub["ti"] = "switch_else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][193] != null) {
              FAcache[start_pos][193].append(ret_list);
            } else {
              FAcache[start_pos][193] = ret_list;
            }
            break;
          case 197:

            /* rule_Htok_identifier_XXX_Htype___u103 queue */
            chk_len = stack.push([197, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_pj = 0, _len356 = list_1.length; _pj < _len356; _pj++) {
              tok = list_1[_pj];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pk = 0, _len357 = list_2.length; _pk < _len357; _pk++) {
                tok = list_2[_pk];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                if (!list_3) {
                  stack.push([34, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 198;
            }
            break;
          case 198:

            /* rule_Htok_identifier_XXX_Htype___u103 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_pl = 0, _len358 = list_1.length; _pl < _len358; _pl++) {
              tok = list_1[_pl];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pm = 0, _len359 = list_2.length; _pm < _len359; _pm++) {
                tok = list_2[_pm];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_pn = 0, _len360 = list_3.length; _pn < _len360; _pn++) {
                  tok = list_3[_pn];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u103";
                  mx_hash_stub.hash_key = "fn_decl_arg";
                  mx_hash_stub.hash_key_idx = 38;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][197] != null) {
              FAcache[start_pos][197].append(ret_list);
            } else {
              FAcache[start_pos][197] = ret_list;
            }
            break;
          case 200:

            /* rule_Hfn_decl_arg___u104 queue */
            chk_len = stack.push([200, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][38];
            if (!list_1) {
              stack.push([38, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 201;
            }
            break;
          case 201:

            /* rule_Hfn_decl_arg___u104 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][38];
            for (_po = 0, _len361 = list_1.length; _po < _len361; _po++) {
              tok = list_1[_po];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hfn_decl_arg___u104";
              mx_hash_stub.hash_key = "fn_decl_arg_list";
              mx_hash_stub.hash_key_idx = 39;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][200] != null) {
              FAcache[start_pos][200].append(ret_list);
            } else {
              FAcache[start_pos][200] = ret_list;
            }
            break;
          case 202:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u105 queue */
            chk_len = stack.push([202, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][38];
            if (!list_1) {
              stack.push([38, b_0, 0]);
              continue;
            }
            for (_pp = 0, _len362 = list_1.length; _pp < _len362; _pp++) {
              tok = list_1[_pp];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pq = 0, _len363 = list_2.length; _pq < _len363; _pq++) {
                tok = list_2[_pq];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                if (!list_3) {
                  stack.push([39, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 203;
            }
            break;
          case 203:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u105 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][38];
            for (_pr = 0, _len364 = list_1.length; _pr < _len364; _pr++) {
              tok = list_1[_pr];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ps = 0, _len365 = list_2.length; _ps < _len365; _ps++) {
                tok = list_2[_ps];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                for (_pt = 0, _len366 = list_3.length; _pt < _len366; _pt++) {
                  tok = list_3[_pt];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u105";
                  mx_hash_stub.hash_key = "fn_decl_arg_list";
                  mx_hash_stub.hash_key_idx = 39;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][202] != null) {
              FAcache[start_pos][202].append(ret_list);
            } else {
              FAcache[start_pos][202] = ret_list;
            }
            break;
          case 206:

            /* rule_Hrvalue___u115 queue */
            chk_len = stack.push([206, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 207;
            }
            break;
          case 207:

            /* rule_Hrvalue___u115 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_pu = 0, _len367 = list_1.length; _pu < _len367; _pu++) {
              tok = list_1[_pu];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue___u115";
              mx_hash_stub.hash_key = "fn_call_arg_list";
              mx_hash_stub.hash_key_idx = 41;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][206] != null) {
              FAcache[start_pos][206].append(ret_list);
            } else {
              FAcache[start_pos][206] = ret_list;
            }
            break;
          case 208:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list___u116 queue */
            chk_len = stack.push([208, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][23];
            if (!list_1) {
              stack.push([23, b_0, 0]);
              continue;
            }
            for (_pv = 0, _len368 = list_1.length; _pv < _len368; _pv++) {
              tok = list_1[_pv];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pw = 0, _len369 = list_2.length; _pw < _len369; _pw++) {
                tok = list_2[_pw];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][41];
                if (!list_3) {
                  stack.push([41, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 209;
            }
            break;
          case 209:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list___u116 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (_px = 0, _len370 = list_1.length; _px < _len370; _px++) {
              tok = list_1[_px];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_py = 0, _len371 = list_2.length; _py < _len371; _py++) {
                tok = list_2[_py];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][41];
                for (_pz = 0, _len372 = list_3.length; _pz < _len372; _pz++) {
                  tok = list_3[_pz];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_list___u116";
                  mx_hash_stub.hash_key = "fn_call_arg_list";
                  mx_hash_stub.hash_key_idx = 41;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][208] != null) {
              FAcache[start_pos][208].append(ret_list);
            } else {
              FAcache[start_pos][208] = ret_list;
            }
            break;
          case 211:

            /* rule_Htype___u123 queue */
            chk_len = stack.push([211, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][34];
            if (!list_1) {
              stack.push([34, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 212;
            }
            break;
          case 212:

            /* rule_Htype___u123 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][34];
            for (_qa = 0, _len373 = list_1.length; _qa < _len373; _qa++) {
              tok = list_1[_qa];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype___u123";
              mx_hash_stub.hash_key = "type_list";
              mx_hash_stub.hash_key_idx = 42;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][211] != null) {
              FAcache[start_pos][211].append(ret_list);
            } else {
              FAcache[start_pos][211] = ret_list;
            }
            break;
          case 213:

            /* rule_Htype_XXX_Htype_list___u124 queue */
            chk_len = stack.push([213, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][34];
            if (!list_1) {
              stack.push([34, b_0, 0]);
              continue;
            }
            for (_qb = 0, _len374 = list_1.length; _qb < _len374; _qb++) {
              tok = list_1[_qb];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qc = 0, _len375 = list_2.length; _qc < _len375; _qc++) {
                tok = list_2[_qc];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][42];
                if (!list_3) {
                  stack.push([42, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 214;
            }
            break;
          case 214:

            /* rule_Htype_XXX_Htype_list___u124 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][34];
            for (_qd = 0, _len376 = list_1.length; _qd < _len376; _qd++) {
              tok = list_1[_qd];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qe = 0, _len377 = list_2.length; _qe < _len377; _qe++) {
                tok = list_2[_qe];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][42];
                for (_qf = 0, _len378 = list_3.length; _qf < _len378; _qf++) {
                  tok = list_3[_qf];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_XXX_Htype_list___u124";
                  mx_hash_stub.hash_key = "type_list";
                  mx_hash_stub.hash_key_idx = 42;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][213] != null) {
              FAcache[start_pos][213].append(ret_list);
            } else {
              FAcache[start_pos][213] = ret_list;
            }
            break;
          case 216:

            /* rule_XXX_Htype_list_XXX___u125 queue */
            chk_len = stack.push([216, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_qg = 0, _len379 = list_1.length; _qg < _len379; _qg++) {
              tok = list_1[_qg];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][42];
              if (!list_2) {
                stack.push([42, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 217;
            }
            break;
          case 217:

            /* rule_XXX_Htype_list_XXX___u125 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_qh = 0, _len380 = list_1.length; _qh < _len380; _qh++) {
              tok = list_1[_qh];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][42];
              for (_qi = 0, _len381 = list_2.length; _qi < _len381; _qi++) {
                tok = list_2[_qi];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_qj = 0, _len382 = list_3.length; _qj < _len382; _qj++) {
                  tok = list_3[_qj];
                  if (tok.value !== ">") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_list_XXX___u125";
                  mx_hash_stub.hash_key = "type_nest";
                  mx_hash_stub.hash_key_idx = 43;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][216] != null) {
              FAcache[start_pos][216].append(ret_list);
            } else {
              FAcache[start_pos][216] = ret_list;
            }
            break;
          case 219:

            /* rule_Htok_identifier_XXX_Htype___u126 queue */
            chk_len = stack.push([219, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][2];
            if (!list_1) {
              stack.push([2, b_0, 0]);
              continue;
            }
            for (_qk = 0, _len383 = list_1.length; _qk < _len383; _qk++) {
              tok = list_1[_qk];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ql = 0, _len384 = list_2.length; _ql < _len384; _ql++) {
                tok = list_2[_ql];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                if (!list_3) {
                  stack.push([34, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 220;
            }
            break;
          case 220:

            /* rule_Htok_identifier_XXX_Htype___u126 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (_qm = 0, _len385 = list_1.length; _qm < _len385; _qm++) {
              tok = list_1[_qm];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qn = 0, _len386 = list_2.length; _qn < _len386; _qn++) {
                tok = list_2[_qn];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_qo = 0, _len387 = list_3.length; _qo < _len387; _qo++) {
                  tok = list_3[_qo];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u126";
                  mx_hash_stub.hash_key = "type_field_kv";
                  mx_hash_stub.hash_key_idx = 44;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][219] != null) {
              FAcache[start_pos][219].append(ret_list);
            } else {
              FAcache[start_pos][219] = ret_list;
            }
            break;
          case 222:

            /* rule_Htype_field_kv___u127 queue */
            chk_len = stack.push([222, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][44];
            if (!list_1) {
              stack.push([44, b_0, 0]);
              continue;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 223;
            }
            break;
          case 223:

            /* rule_Htype_field_kv___u127 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (_qp = 0, _len388 = list_1.length; _qp < _len388; _qp++) {
              tok = list_1[_qp];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype_field_kv___u127";
              mx_hash_stub.hash_key = "type_field_kv_list";
              mx_hash_stub.hash_key_idx = 45;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            if (FAcache[start_pos][222] != null) {
              FAcache[start_pos][222].append(ret_list);
            } else {
              FAcache[start_pos][222] = ret_list;
            }
            break;
          case 224:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u128 queue */
            chk_len = stack.push([224, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][44];
            if (!list_1) {
              stack.push([44, b_0, 0]);
              continue;
            }
            for (_qq = 0, _len389 = list_1.length; _qq < _len389; _qq++) {
              tok = list_1[_qq];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qr = 0, _len390 = list_2.length; _qr < _len390; _qr++) {
                tok = list_2[_qr];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][45];
                if (!list_3) {
                  stack.push([45, b_2, 0]);
                  continue;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 225;
            }
            break;
          case 225:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u128 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (_qs = 0, _len391 = list_1.length; _qs < _len391; _qs++) {
              tok = list_1[_qs];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_qt = 0, _len392 = list_2.length; _qt < _len392; _qt++) {
                tok = list_2[_qt];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][45];
                for (_qu = 0, _len393 = list_3.length; _qu < _len393; _qu++) {
                  tok = list_3[_qu];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_field_kv_XXX_Htype_field_kv_list___u128";
                  mx_hash_stub.hash_key = "type_field_kv_list";
                  mx_hash_stub.hash_key_idx = 45;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][224] != null) {
              FAcache[start_pos][224].append(ret_list);
            } else {
              FAcache[start_pos][224] = ret_list;
            }
            break;
          case 227:

            /* rule_XXX_Htype_field_kv_list_XXX___u129 queue */
            chk_len = stack.push([227, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (_qv = 0, _len394 = list_1.length; _qv < _len394; _qv++) {
              tok = list_1[_qv];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][45];
              if (!list_2) {
                stack.push([45, b_1, 0]);
                continue;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 228;
            }
            break;
          case 228:

            /* rule_XXX_Htype_field_kv_list_XXX___u129 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (_qw = 0, _len395 = list_1.length; _qw < _len395; _qw++) {
              tok = list_1[_qw];
              if (only_new) {
                if (!tok._is_new) {
                  continue;
                }
              }
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][45];
              for (_qx = 0, _len396 = list_2.length; _qx < _len396; _qx++) {
                tok = list_2[_qx];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_qy = 0, _len397 = list_3.length; _qy < _len397; _qy++) {
                  tok = list_3[_qy];
                  if (tok.value !== "}") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_field_kv_list_XXX___u129";
                  mx_hash_stub.hash_key = "type_field";
                  mx_hash_stub.hash_key_idx = 46;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (FAcache[start_pos][227] != null) {
              FAcache[start_pos][227].append(ret_list);
            } else {
              FAcache[start_pos][227] = ret_list;
            }
        }
      }
      return FAcache[start_pos][28];
    };

    return Parser;

  })();

}).call(this);
