// Generated by IcedCoffeeScript 108.0.9
(function() {
  var STATE_FL, STATE_IG, STATE_NA, STATE_RQ, counter_stub, hash_key_list, i, state_stub, _i, _j;

  require('fy');

  STATE_NA = 0;

  STATE_RQ = 1;

  STATE_IG = 2;

  STATE_FL = 3;

  state_stub = [];

  for (i = _i = 0; _i < 53; i = ++_i) {
    state_stub.push(STATE_NA);
  }

  counter_stub = [];

  for (i = _j = 0; _j < 523; i = ++_j) {
    counter_stub.push(0);
  }

  hash_key_list = ["_", "Xdent", "tok_identifier", "tok_bin_op", "tok_un_op", "tok_decimal_literal", "tok_octal_literal", "tok_hexadecimal_literal", "tok_binary_literal", "tok_float_literal", "tok_string_sq", "tok_string_dq", "tok_fn_arrow", "tok_inline_comment", "tok_multiline_comment", "tok_bracket_square", "tok_at", "tok_pair_delimiter", "tok_bracket_curve", "tok_bracket_round", "tok_comma", "const", "num_const", "str_const", "rvalue", "stmt", "lvalue", "block", "indent", "stmt_plus", "dedent", "bin_op", "pre_op", "post_op", "eol", "type", "struct_init_kv", "struct_init_list", "struct_init", "array_init_list", "array_init", "if_tail_stmt", "switch_tail_stmt", "ranger", "fn_decl_arg", "fn_decl_arg_list", "return", "fn_call_arg_list", "type_list", "type_nest", "type_field_kv", "type_field_kv_list", "type_field"];

  this.Parser = (function() {
    function Parser() {}

    Parser.prototype.length = 0;

    Parser.prototype.cache = [];

    Parser.prototype.state = [];

    Parser.prototype.counter = [];

    Parser.prototype.Node = null;

    Parser.prototype.proxy = null;

    Parser.prototype.proxy2 = null;

    Parser.prototype.go = function(token_list_list) {
      var arg_list, filter_list, idx, k, list, max_token, mx_hash_stub, node, stub, stub_idx, token, token_list, v, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _bw, _bx, _k, _l, _len, _len1, _len10, _len11, _len12, _len13, _len14, _len15, _len16, _len17, _len18, _len19, _len2, _len20, _len21, _len22, _len23, _len24, _len25, _len26, _len27, _len28, _len29, _len3, _len30, _len31, _len32, _len33, _len34, _len35, _len36, _len37, _len38, _len39, _len4, _len40, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len7, _len8, _len9, _m, _n, _o, _p, _pos_list, _q, _r, _ref, _ref1, _s, _t, _u, _v, _w, _x, _y, _z;
      this.cache = [];
      this.state = [];
      this.counter = [];
      this.length = token_list_list.length;
      if (this.length === 0) {
        return [];
      }
      this.Node = (_ref = token_list_list[0]) != null ? (_ref1 = _ref[0]) != null ? _ref1.constructor : void 0 : void 0;
      this.proxy = new this.Node;
      this.proxy2 = new this.Node;
      for (idx = _k = 0, _len = token_list_list.length; _k < _len; idx = ++_k) {
        token_list = token_list_list[idx];
        stub = new Array(306);
        for (k = _l = 0; _l < 306; k = ++_l) {
          stub[k] = [];
        }
        for (_m = 0, _len1 = token_list.length; _m < _len1; _m++) {
          token = token_list[_m];
          token.a = idx;
          token.b = idx + 1;
          if (-1 !== (stub_idx = hash_key_list.idx(token.mx_hash.hash_key))) {
            stub[stub_idx].push(token);
          }
          stub[0].upush(token);
        }
        this.cache.push(stub);
        this.state.push(state_stub.slice());
        this.counter.push(counter_stub.slice());
      }
      for (idx = _n = 0, _len2 = token_list_list.length; _n < _len2; idx = ++_n) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u8";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _o = 0, _len3 = token_list_list.length; _o < _len3; idx = ++_o) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE6_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u9";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 6;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _p = 0, _len4 = token_list_list.length; _p < _len4; idx = ++_p) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u10";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _q = 0, _len5 = token_list_list.length; _q < _len5; idx = ++_q) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u11";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _r = 0, _len6 = token_list_list.length; _r < _len6; idx = ++_r) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE5_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u12";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 5;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _s = 0, _len7 = token_list_list.length; _s < _len7; idx = ++_s) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSX_priorityE4_tail_spaceEX1Xtail_space__left_assocE1_eolEX1Xeol__u13";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["left_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _t = 0, _len8 = token_list_list.length; _t < _len8; idx = ++_t) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u14";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _u = 0, _len9 = token_list_list.length; _u < _len9; idx = ++_u) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE4_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u15";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 4;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _v = 0, _len10 = token_list_list.length; _v < _len10; idx = ++_v) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u16";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _w = 0, _len11 = token_list_list.length; _w < _len11; idx = ++_w) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u17";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _x = 0, _len12 = token_list_list.length; _x < _len12; idx = ++_x) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_priorityE7_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u18";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 7;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _y = 0, _len13 = token_list_list.length; _y < _len13; idx = ++_y) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u19";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _z = 0, _len14 = token_list_list.length; _z < _len14; idx = ++_z) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u20";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aa = 0, _len15 = token_list_list.length; _aa < _len15; idx = ++_aa) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u21";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ab = 0, _len16 = token_list_list.length; _ab < _len16; idx = ++_ab) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u22";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ac = 0, _len17 = token_list_list.length; _ac < _len17; idx = ++_ac) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u23";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ad = 0, _len18 = token_list_list.length; _ad < _len18; idx = ++_ad) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorX_priorityE11_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u24";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 11;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ae = 0, _len19 = token_list_list.length; _ae < _len19; idx = ++_ae) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u25";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _af = 0, _len20 = token_list_list.length; _af < _len20; idx = ++_af) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u26";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ag = 0, _len21 = token_list_list.length; _ag < _len21; idx = ++_ag) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE10_tail_spaceEX1Xtail_space__eolEX1Xeol__u27";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 10;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ah = 0, _len22 = token_list_list.length; _ah < _len22; idx = ++_ah) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "==") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u28";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ai = 0, _len23 = token_list_list.length; _ai < _len23; idx = ++_ai) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__right_assocE1_eolEX1Xeol__u29";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["right_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aj = 0, _len24 = token_list_list.length; _aj < _len24; idx = ++_aj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u30";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ak = 0, _len25 = token_list_list.length; _ak < _len25; idx = ++_ak) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u31";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _al = 0, _len26 = token_list_list.length; _al < _len26; idx = ++_al) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u32";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _am = 0, _len27 = token_list_list.length; _am < _len27; idx = ++_am) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u33";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _an = 0, _len28 = token_list_list.length; _an < _len28; idx = ++_an) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<>") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE9_tail_spaceEX1Xtail_space__eolEX1Xeol__u34";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 9;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ao = 0, _len29 = token_list_list.length; _ao < _len29; idx = ++_ao) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XEX_priorityE12_tail_spaceEX1Xtail_space__left_assocE1_eolEX1Xeol__u35";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["left_assoc"] = 1;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ap = 0, _len30 = token_list_list.length; _ap < _len30; idx = ++_ap) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u36";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aq = 0, _len31 = token_list_list.length; _aq < _len31; idx = ++_aq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u37";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ar = 0, _len32 = token_list_list.length; _ar < _len32; idx = ++_ar) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "*=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u38";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _as = 0, _len33 = token_list_list.length; _as < _len33; idx = ++_as) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "/=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u39";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _at = 0, _len34 = token_list_list.length; _at < _len34; idx = ++_at) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u40";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _au = 0, _len35 = token_list_list.length; _au < _len35; idx = ++_au) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "**=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XSSEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u41";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _av = 0, _len36 = token_list_list.length; _av < _len36; idx = ++_av) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "//=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u42";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _aw = 0, _len37 = token_list_list.length; _aw < _len37; idx = ++_aw) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "%%=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u43";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ax = 0, _len38 = token_list_list.length; _ax < _len38; idx = ++_ax) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "<<=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u44";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ay = 0, _len39 = token_list_list.length; _ay < _len39; idx = ++_ay) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u45";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _az = 0, _len40 = token_list_list.length; _az < _len40; idx = ++_az) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== ">>>=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u46";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _ba = 0, _len41 = token_list_list.length; _ba < _len41; idx = ++_ba) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u47";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bb = 0, _len42 = token_list_list.length; _bb < _len42; idx = ++_bb) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "||=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u48";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bc = 0, _len43 = token_list_list.length; _bc < _len43; idx = ++_bc) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u49";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bd = 0, _len44 = token_list_list.length; _bd < _len44; idx = ++_bd) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "and=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XandEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u50";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _be = 0, _len45 = token_list_list.length; _be < _len45; idx = ++_be) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "or=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XorEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u51";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bf = 0, _len46 = token_list_list.length; _bf < _len46; idx = ++_bf) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "xor=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XxorEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u52";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bg = 0, _len47 = token_list_list.length; _bg < _len47; idx = ++_bg) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "&=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u53";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bh = 0, _len48 = token_list_list.length; _bh < _len48; idx = ++_bh) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "|=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u54";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bi = 0, _len49 = token_list_list.length; _bi < _len49; idx = ++_bi) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "^=") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXEX_priorityE12_tail_spaceEX1Xtail_space__eolEX1Xeol__u55";
        mx_hash_stub.hash_key = "bin_op";
        mx_hash_stub.hash_key_idx = 31;
        mx_hash_stub["priority"] = 12;
        mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
        mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[31] == null) {
          _pos_list[31] = [];
        }
        _pos_list[31].push(node);
      }
      for (idx = _bj = 0, _len50 = token_list_list.length; _bj < _len50; idx = ++_bj) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "+") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPX_priorityE1__XX1Xtail_space_u62";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bk = 0, _len51 = token_list_list.length; _bk < _len51; idx = ++_bk) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "-") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        if (!(!arg_list[0].mx_hash.tail_space)) {
          node.value_array.pop();
          continue;
        }
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__XX1Xtail_space_u63";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bl = 0, _len52 = token_list_list.length; _bl < _len52; idx = ++_bl) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u64";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bm = 0, _len53 = token_list_list.length; _bm < _len53; idx = ++_bm) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u65";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bn = 0, _len54 = token_list_list.length; _bn < _len54; idx = ++_bn) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "!") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u66";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bo = 0, _len55 = token_list_list.length; _bo < _len55; idx = ++_bo) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "~") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXX_priorityE1__u67";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bp = 0, _len56 = token_list_list.length; _bp < _len56; idx = ++_bp) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "not") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnotX_priorityE1__u68";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bq = 0, _len57 = token_list_list.length; _bq < _len57; idx = ++_bq) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "new") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XnewX_priorityE15__u69";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _br = 0, _len58 = token_list_list.length; _br < _len58; idx = ++_br) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "delete") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XdeleteX_priorityE15__u70";
        mx_hash_stub.hash_key = "pre_op";
        mx_hash_stub.hash_key_idx = 32;
        mx_hash_stub["priority"] = 15;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[32] == null) {
          _pos_list[32] = [];
        }
        _pos_list[32].push(node);
      }
      for (idx = _bs = 0, _len59 = token_list_list.length; _bs < _len59; idx = ++_bs) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "++") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XPPX_priorityE1__u72";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bt = 0, _len60 = token_list_list.length; _bt < _len60; idx = ++_bt) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "--") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_priorityE1__u73";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bu = 0, _len61 = token_list_list.length; _bu < _len61; idx = ++_bu) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== "[QUESTION]") {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXQUESTIONXX_priorityE1__u74";
        mx_hash_stub.hash_key = "post_op";
        mx_hash_stub.hash_key_idx = 33;
        mx_hash_stub["priority"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[33] == null) {
          _pos_list[33] = [];
        }
        _pos_list[33].push(node);
      }
      for (idx = _bv = 0, _len62 = token_list_list.length; _bv < _len62; idx = ++_bv) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '..') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXX_ultEmacro_tiEmacro_eolE1__u122";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 43;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[43] == null) {
          _pos_list[43] = [];
        }
        _pos_list[43].push(node);
      }
      for (idx = _bw = 0, _len63 = token_list_list.length; _bw < _len63; idx = ++_bw) {
        token_list = token_list_list[idx];
        token = token_list[0];
        if (token.value !== '...') {
          continue;
        }
        node = new this.Node;
        node.value_array.push(token);
        arg_list = node.value_array;
        mx_hash_stub = node.mx_hash = {};
        mx_hash_stub.rule = "rule_XXXXX_ultEmacro_tiEmacro_eolE1__u123";
        mx_hash_stub.hash_key = "ranger";
        mx_hash_stub.hash_key_idx = 43;
        mx_hash_stub["ult"] = "macro";
        mx_hash_stub["ti"] = "macro";
        mx_hash_stub["eol"] = 1;
        node.a = node.value_array[0].a;
        node.b = node.value_array.last().b;
        _pos_list = this.cache[idx];
        if (_pos_list[43] == null) {
          _pos_list[43] = [];
        }
        _pos_list[43].push(node);
      }
      this.fsm();
      list = this.cache[0][29];
      max_token = token_list_list.length;
      filter_list = [];
      for (_bx = 0, _len64 = list.length; _bx < _len64; _bx++) {
        v = list[_bx];
        if (v.b === max_token) {
          this.node_fix(v);
          filter_list.push(v);
        }
      }
      return filter_list;
    };

    Parser.prototype.node_fix = function(node) {
      var walk;
      walk = function(node) {
        var v, vv_list, _k, _len, _ref;
        vv_list = [];
        _ref = node.value_array;
        for (_k = 0, _len = _ref.length; _k < _len; _k++) {
          v = _ref[_k];
          walk(v);
          vv_list.push(v.value_view || v.value);
        }
        node.value_view = vv_list.join(' ');
      };
      walk(node);
    };

    Parser.prototype.fsm = function() {
      var FAcache, FAcounter, FAstate, append_list, arg_list, b_0, b_1, b_10, b_11, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, chk_len, cur, has_new, hki, hyp_list_1, hyp_list_2, hyp_list_3, hyp_list_4, hyp_list_5, idx_1, length, list_1, list_10, list_11, list_2, list_3, list_4, list_5, list_6, list_7, list_8, list_9, mx_hash_stub, node, node_list, old_node, only_new, request_make, ret_list, safe_collect, stack, start_pos, state, state_1, state_10, state_11, state_2, state_3, state_4, state_5, state_6, state_7, state_8, state_9, tok, tok_list, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _au, _av, _aw, _ax, _ay, _az, _ba, _bb, _bc, _bd, _be, _bf, _bg, _bh, _bi, _bj, _bk, _bl, _bm, _bn, _bo, _bp, _bq, _br, _bs, _bt, _bu, _bv, _bw, _bx, _by, _bz, _ca, _cb, _cc, _cd, _ce, _cf, _cg, _ch, _ci, _cj, _ck, _cl, _cm, _cn, _co, _cp, _cq, _cr, _cs, _ct, _cu, _cv, _cw, _cx, _cy, _cz, _da, _db, _dc, _dd, _de, _df, _dg, _dh, _di, _dj, _dk, _dl, _dm, _dn, _do, _dp, _dq, _dr, _ds, _dt, _du, _dv, _dw, _dx, _dy, _dz, _ea, _eb, _ec, _ed, _ee, _ef, _eg, _eh, _ei, _ej, _ek, _el, _em, _en, _eo, _ep, _eq, _er, _es, _et, _eu, _ev, _ew, _ex, _ey, _ez, _fa, _fb, _fc, _fd, _fe, _ff, _fg, _fh, _fi, _fj, _fk, _fl, _fm, _fn, _fo, _fp, _fq, _fr, _fs, _ft, _fu, _fv, _fw, _fx, _fy, _fz, _ga, _gb, _gc, _gd, _ge, _gf, _gg, _gh, _gi, _gj, _gk, _gl, _gm, _gn, _go, _gp, _gq, _gr, _gs, _gt, _gu, _gv, _gw, _gx, _gy, _gz, _ha, _hb, _hc, _hd, _he, _hf, _hg, _hh, _hi, _hj, _hk, _hl, _hm, _hn, _ho, _hp, _hq, _hr, _hs, _ht, _hu, _hv, _hw, _hx, _hy, _hz, _i_2, _i_3, _i_4, _i_5, _ia, _ib, _ic, _id, _ie, _if, _ig, _ih, _ii, _ij, _ik, _il, _im, _in, _io, _ip, _iq, _ir, _is, _it, _iu, _iv, _iw, _ix, _iy, _iz, _ja, _jb, _jc, _jd, _je, _jf, _jg, _jh, _ji, _jj, _jk, _jl, _jm, _jn, _jo, _jp, _jq, _jr, _js, _jt, _ju, _jv, _jw, _jx, _jy, _jz, _k, _ka, _kb, _kc, _kd, _ke, _kf, _kg, _kh, _ki, _kj, _kk, _kl, _km, _kn, _ko, _kp, _kq, _kr, _ks, _kt, _ku, _kv, _kw, _kx, _ky, _kz, _l, _la, _lb, _lc, _ld, _le, _len, _len1, _len10, _len100, _len101, _len102, _len103, _len104, _len105, _len106, _len107, _len108, _len109, _len11, _len110, _len111, _len112, _len113, _len114, _len115, _len116, _len117, _len118, _len119, _len12, _len120, _len121, _len122, _len123, _len124, _len125, _len126, _len127, _len128, _len129, _len13, _len130, _len131, _len132, _len133, _len134, _len135, _len136, _len137, _len138, _len139, _len14, _len140, _len141, _len142, _len143, _len144, _len145, _len146, _len147, _len148, _len149, _len15, _len150, _len151, _len152, _len153, _len154, _len155, _len156, _len157, _len158, _len159, _len16, _len160, _len161, _len162, _len163, _len164, _len165, _len166, _len167, _len168, _len169, _len17, _len170, _len171, _len172, _len173, _len174, _len175, _len176, _len177, _len178, _len179, _len18, _len180, _len181, _len182, _len183, _len184, _len185, _len186, _len187, _len188, _len189, _len19, _len190, _len191, _len192, _len193, _len194, _len195, _len196, _len197, _len198, _len199, _len2, _len20, _len200, _len201, _len202, _len203, _len204, _len205, _len206, _len207, _len208, _len209, _len21, _len210, _len211, _len212, _len213, _len214, _len215, _len216, _len217, _len218, _len219, _len22, _len220, _len221, _len222, _len223, _len224, _len225, _len226, _len227, _len228, _len229, _len23, _len230, _len231, _len232, _len233, _len234, _len235, _len236, _len237, _len238, _len239, _len24, _len240, _len241, _len242, _len243, _len244, _len245, _len246, _len247, _len248, _len249, _len25, _len250, _len251, _len252, _len253, _len254, _len255, _len256, _len257, _len258, _len259, _len26, _len260, _len261, _len262, _len263, _len264, _len265, _len266, _len267, _len268, _len269, _len27, _len270, _len271, _len272, _len273, _len274, _len275, _len276, _len277, _len278, _len279, _len28, _len280, _len281, _len282, _len283, _len284, _len285, _len286, _len287, _len288, _len289, _len29, _len290, _len291, _len292, _len293, _len294, _len295, _len296, _len297, _len298, _len299, _len3, _len30, _len300, _len301, _len302, _len303, _len304, _len305, _len306, _len307, _len308, _len309, _len31, _len310, _len311, _len312, _len313, _len314, _len315, _len316, _len317, _len318, _len319, _len32, _len320, _len321, _len322, _len323, _len324, _len325, _len326, _len327, _len328, _len329, _len33, _len330, _len331, _len332, _len333, _len334, _len335, _len336, _len337, _len338, _len339, _len34, _len340, _len341, _len342, _len343, _len344, _len345, _len346, _len347, _len348, _len349, _len35, _len350, _len351, _len352, _len353, _len354, _len355, _len356, _len357, _len358, _len359, _len36, _len360, _len361, _len362, _len363, _len364, _len365, _len366, _len367, _len368, _len369, _len37, _len370, _len371, _len372, _len373, _len374, _len375, _len376, _len377, _len378, _len379, _len38, _len380, _len381, _len382, _len383, _len384, _len385, _len386, _len387, _len388, _len389, _len39, _len390, _len391, _len392, _len393, _len394, _len395, _len396, _len397, _len398, _len399, _len4, _len40, _len400, _len401, _len402, _len41, _len42, _len43, _len44, _len45, _len46, _len47, _len48, _len49, _len5, _len50, _len51, _len52, _len53, _len54, _len55, _len56, _len57, _len58, _len59, _len6, _len60, _len61, _len62, _len63, _len64, _len65, _len66, _len67, _len68, _len69, _len7, _len70, _len71, _len72, _len73, _len74, _len75, _len76, _len77, _len78, _len79, _len8, _len80, _len81, _len82, _len83, _len84, _len85, _len86, _len87, _len88, _len89, _len9, _len90, _len91, _len92, _len93, _len94, _len95, _len96, _len97, _len98, _len99, _lf, _lg, _lh, _li, _lj, _lk, _ll, _lm, _ln, _lo, _lp, _lq, _lr, _ls, _lt, _lu, _lv, _lw, _lx, _ly, _lz, _m, _ma, _mb, _mc, _md, _me, _mf, _mg, _mh, _mi, _mj, _mk, _ml, _mm, _mn, _mo, _mp, _mq, _mr, _ms, _mt, _mu, _mv, _mw, _mx, _my, _mz, _n, _na, _nb, _nc, _nd, _ne, _nf, _ng, _nh, _ni, _nj, _nk, _nl, _nm, _nn, _no, _np, _nq, _nr, _ns, _nt, _nu, _nv, _nw, _nx, _ny, _nz, _o, _oa, _ob, _oc, _od, _oe, _of, _og, _oh, _oi, _oj, _ok, _ol, _om, _on, _oo, _op, _oq, _or, _os, _ot, _ou, _ov, _ow, _ox, _oy, _oz, _p, _pa, _pb, _pc, _pd, _pe, _pf, _pg, _ph, _pi, _pj, _pk, _pl, _pm, _pn, _po, _pp, _pq, _pr, _ps, _pt, _pu, _pv, _pw, _px, _py, _pz, _q, _qa, _qb, _qc, _qd, _qe, _qf, _qg, _qh, _qi, _qj, _qk, _ql, _qm, _qn, _qo, _qp, _qq, _qr, _qs, _qt, _qu, _qv, _qw, _qx, _qy, _qz, _r, _ra, _rb, _rc, _rd, _re, _ref, _ref1, _ref10, _ref100, _ref101, _ref102, _ref103, _ref104, _ref105, _ref106, _ref107, _ref108, _ref109, _ref11, _ref110, _ref111, _ref112, _ref113, _ref114, _ref115, _ref116, _ref117, _ref118, _ref119, _ref12, _ref120, _ref121, _ref122, _ref123, _ref124, _ref125, _ref126, _ref127, _ref128, _ref129, _ref13, _ref130, _ref131, _ref132, _ref133, _ref134, _ref135, _ref136, _ref137, _ref138, _ref139, _ref14, _ref140, _ref141, _ref142, _ref143, _ref144, _ref145, _ref146, _ref147, _ref148, _ref149, _ref15, _ref150, _ref151, _ref152, _ref153, _ref154, _ref155, _ref156, _ref157, _ref158, _ref159, _ref16, _ref160, _ref161, _ref162, _ref163, _ref164, _ref165, _ref166, _ref167, _ref168, _ref169, _ref17, _ref170, _ref171, _ref172, _ref173, _ref174, _ref175, _ref176, _ref177, _ref178, _ref179, _ref18, _ref180, _ref181, _ref182, _ref183, _ref184, _ref185, _ref186, _ref187, _ref188, _ref189, _ref19, _ref190, _ref191, _ref192, _ref193, _ref194, _ref195, _ref196, _ref197, _ref198, _ref199, _ref2, _ref20, _ref200, _ref201, _ref202, _ref203, _ref204, _ref205, _ref206, _ref207, _ref208, _ref209, _ref21, _ref210, _ref211, _ref212, _ref213, _ref214, _ref215, _ref216, _ref217, _ref218, _ref219, _ref22, _ref220, _ref221, _ref222, _ref223, _ref224, _ref225, _ref226, _ref227, _ref228, _ref229, _ref23, _ref230, _ref231, _ref232, _ref233, _ref234, _ref235, _ref236, _ref237, _ref238, _ref239, _ref24, _ref240, _ref241, _ref242, _ref243, _ref244, _ref245, _ref246, _ref247, _ref248, _ref249, _ref25, _ref250, _ref251, _ref252, _ref253, _ref254, _ref255, _ref256, _ref257, _ref258, _ref259, _ref26, _ref260, _ref261, _ref262, _ref263, _ref264, _ref265, _ref266, _ref267, _ref268, _ref269, _ref27, _ref270, _ref271, _ref272, _ref273, _ref274, _ref275, _ref276, _ref277, _ref278, _ref279, _ref28, _ref280, _ref281, _ref282, _ref283, _ref284, _ref285, _ref286, _ref287, _ref288, _ref289, _ref29, _ref290, _ref291, _ref292, _ref293, _ref294, _ref295, _ref296, _ref297, _ref298, _ref299, _ref3, _ref30, _ref300, _ref301, _ref302, _ref303, _ref304, _ref305, _ref306, _ref307, _ref308, _ref309, _ref31, _ref310, _ref311, _ref312, _ref313, _ref314, _ref315, _ref316, _ref317, _ref318, _ref319, _ref32, _ref320, _ref321, _ref322, _ref323, _ref324, _ref325, _ref326, _ref327, _ref328, _ref329, _ref33, _ref330, _ref331, _ref332, _ref333, _ref334, _ref335, _ref336, _ref337, _ref338, _ref339, _ref34, _ref340, _ref341, _ref342, _ref343, _ref344, _ref345, _ref346, _ref347, _ref348, _ref349, _ref35, _ref350, _ref351, _ref352, _ref353, _ref36, _ref37, _ref38, _ref39, _ref4, _ref40, _ref41, _ref42, _ref43, _ref44, _ref45, _ref46, _ref47, _ref48, _ref49, _ref5, _ref50, _ref51, _ref52, _ref53, _ref54, _ref55, _ref56, _ref57, _ref58, _ref59, _ref6, _ref60, _ref61, _ref62, _ref63, _ref64, _ref65, _ref66, _ref67, _ref68, _ref69, _ref7, _ref70, _ref71, _ref72, _ref73, _ref74, _ref75, _ref76, _ref77, _ref78, _ref79, _ref8, _ref80, _ref81, _ref82, _ref83, _ref84, _ref85, _ref86, _ref87, _ref88, _ref89, _ref9, _ref90, _ref91, _ref92, _ref93, _ref94, _ref95, _ref96, _ref97, _ref98, _ref99, _rf, _rg, _rh, _ri, _rj, _rk, _rl, _rm, _rn, _ro, _rp, _rq, _rr, _rs, _rt, _ru, _rv, _rw, _rx, _ry, _rz, _s, _sa, _sb, _sc, _sd, _se, _sf, _sg, _sh, _si, _sj, _sk, _sl, _sm, _sn, _so, _sp, _sq, _sr, _ss, _st, _su, _sv, _sw, _sx, _sy, _sz, _t, _ta, _tb, _tc, _td, _te, _tf, _tg, _th, _ti, _tj, _tk, _tl, _tm, _tn, _to, _tp, _tq, _tr, _ts, _tt, _tu, _tv, _tw, _tx, _ty, _tz, _u, _ua, _ub, _uc, _ud, _ue, _uf, _ug, _uh, _ui, _uj, _uk, _ul, _um, _un, _uo, _up, _uq, _ur, _us, _ut, _uu, _uv, _uw, _ux, _uy, _uz, _v, _va, _vb, _vc, _vd, _ve, _vf, _vg, _vh, _vi, _vj, _vk, _vl, _vm, _vn, _vo, _vp, _vq, _vr, _vs, _vt, _vu, _vv, _vw, _vx, _vy, _vz, _w, _wa, _wb, _wc, _wd, _we, _wf, _wg, _wh, _wi, _wj, _wk, _wl, _wm, _wn, _wo, _wp, _wq, _wr, _ws, _wt, _wu, _wv, _ww, _wx, _wy, _wz, _x, _xa, _xb, _xc, _xd, _xe, _xf, _xg, _xh, _xi, _xj, _xk, _xl, _xm, _xn, _xo, _xp, _xq, _xr, _xs, _xt, _xu, _xv, _xw, _xx, _xy, _xz, _y, _ya, _yb, _yc, _yd, _ye, _yf, _yg, _yh, _yi, _yj, _yk, _yl, _ym, _yn, _yo, _yp, _yq, _yr, _ys, _yt, _yu, _yv, _yw, _yx, _yy, _yz, _z, _za, _zb, _zc, _zd, _ze, _zf, _zg, _zh, _zi, _zj, _zk, _zl, _zm, _zn, _zo, _zp, _zq, _zr;
      FAcache = this.cache;
      FAstate = this.state;
      FAcounter = this.counter;
      stack = [[29, 0, 0]];
      FAstate[0][29] = STATE_RQ;
      length = this.length;
      request_make = function(token_hki, pos, is_new) {
        var state;
        state = FAstate[pos][token_hki];
        switch (state) {
          case 0:
            if (is_new) {

              /* !pragma coverage-skip-block */
              throw new Error('invalid call. STATE_NA + is_new');
            }
            stack.push([token_hki, pos, is_new]);
            FAstate[pos][token_hki] = STATE_RQ;
            return true;
          case 1:
            FAstate[pos][token_hki] = STATE_IG;
            return false;
          case 2:
            return false;
          case 3:
            FAstate[pos][token_hki] = STATE_RQ;
            stack.push([token_hki, pos, is_new]);
            return true;
        }
      };
      safe_collect = function(dst, src) {
        var c_varr, candidate, chk, chk_v, found, idx, match, _k, _l, _len, _len1, _len2, _m, _ref;
        for (_k = 0, _len = src.length; _k < _len; _k++) {
          candidate = src[_k];
          found = false;
          for (_l = 0, _len1 = dst.length; _l < _len1; _l++) {
            chk = dst[_l];
            c_varr = candidate.value_array;
            if (chk.value_array.length !== c_varr.length) {
              continue;
            }
            match = true;
            _ref = chk.value_array;
            for (idx = _m = 0, _len2 = _ref.length; _m < _len2; idx = ++_m) {
              chk_v = _ref[idx];
              if (chk_v !== c_varr[idx]) {
                match = false;
                break;
              }
            }
            if (match) {
              found = true;
              break;
            }
          }
          if (!found) {
            dst.push(candidate);
          }
        }
      };
      while (cur = stack.pop()) {
        hki = cur[0], start_pos = cur[1], only_new = cur[2];
        if (start_pos >= length) {
          continue;
        }
        switch (hki) {
          case 0:

            /* token__ queue */
            stack.push([53, start_pos, only_new]);
            break;
          case 53:

            /* token__ collect */
            node_list = [];
            FAstate[start_pos][0] = STATE_FL;
            FAcache[start_pos][0].uappend(node_list);
            break;
          case 1:

            /* token_Xdent queue */
            stack.push([54, start_pos, only_new]);
            break;
          case 54:

            /* token_Xdent collect */
            node_list = [];
            FAstate[start_pos][1] = STATE_FL;
            FAcache[start_pos][1].uappend(node_list);
            break;
          case 2:

            /* token_tok_identifier queue */
            stack.push([55, start_pos, only_new]);
            break;
          case 55:

            /* token_tok_identifier collect */
            node_list = [];
            FAstate[start_pos][2] = STATE_FL;
            FAcache[start_pos][2].uappend(node_list);
            break;
          case 3:

            /* token_tok_bin_op queue */
            stack.push([56, start_pos, only_new]);
            break;
          case 56:

            /* token_tok_bin_op collect */
            node_list = [];
            FAstate[start_pos][3] = STATE_FL;
            FAcache[start_pos][3].uappend(node_list);
            break;
          case 4:

            /* token_tok_un_op queue */
            stack.push([57, start_pos, only_new]);
            break;
          case 57:

            /* token_tok_un_op collect */
            node_list = [];
            FAstate[start_pos][4] = STATE_FL;
            FAcache[start_pos][4].uappend(node_list);
            break;
          case 5:

            /* token_tok_decimal_literal queue */
            stack.push([58, start_pos, only_new]);
            break;
          case 58:

            /* token_tok_decimal_literal collect */
            node_list = [];
            FAstate[start_pos][5] = STATE_FL;
            FAcache[start_pos][5].uappend(node_list);
            break;
          case 6:

            /* token_tok_octal_literal queue */
            stack.push([59, start_pos, only_new]);
            break;
          case 59:

            /* token_tok_octal_literal collect */
            node_list = [];
            FAstate[start_pos][6] = STATE_FL;
            FAcache[start_pos][6].uappend(node_list);
            break;
          case 7:

            /* token_tok_hexadecimal_literal queue */
            stack.push([60, start_pos, only_new]);
            break;
          case 60:

            /* token_tok_hexadecimal_literal collect */
            node_list = [];
            FAstate[start_pos][7] = STATE_FL;
            FAcache[start_pos][7].uappend(node_list);
            break;
          case 8:

            /* token_tok_binary_literal queue */
            stack.push([61, start_pos, only_new]);
            break;
          case 61:

            /* token_tok_binary_literal collect */
            node_list = [];
            FAstate[start_pos][8] = STATE_FL;
            FAcache[start_pos][8].uappend(node_list);
            break;
          case 9:

            /* token_tok_float_literal queue */
            stack.push([62, start_pos, only_new]);
            break;
          case 62:

            /* token_tok_float_literal collect */
            node_list = [];
            FAstate[start_pos][9] = STATE_FL;
            FAcache[start_pos][9].uappend(node_list);
            break;
          case 10:

            /* token_tok_string_sq queue */
            stack.push([63, start_pos, only_new]);
            break;
          case 63:

            /* token_tok_string_sq collect */
            node_list = [];
            FAstate[start_pos][10] = STATE_FL;
            FAcache[start_pos][10].uappend(node_list);
            break;
          case 11:

            /* token_tok_string_dq queue */
            stack.push([64, start_pos, only_new]);
            break;
          case 64:

            /* token_tok_string_dq collect */
            node_list = [];
            FAstate[start_pos][11] = STATE_FL;
            FAcache[start_pos][11].uappend(node_list);
            break;
          case 12:

            /* token_tok_fn_arrow queue */
            stack.push([65, start_pos, only_new]);
            break;
          case 65:

            /* token_tok_fn_arrow collect */
            node_list = [];
            FAstate[start_pos][12] = STATE_FL;
            FAcache[start_pos][12].uappend(node_list);
            break;
          case 13:

            /* token_tok_inline_comment queue */
            stack.push([66, start_pos, only_new]);
            break;
          case 66:

            /* token_tok_inline_comment collect */
            node_list = [];
            FAstate[start_pos][13] = STATE_FL;
            FAcache[start_pos][13].uappend(node_list);
            break;
          case 14:

            /* token_tok_multiline_comment queue */
            stack.push([67, start_pos, only_new]);
            break;
          case 67:

            /* token_tok_multiline_comment collect */
            node_list = [];
            FAstate[start_pos][14] = STATE_FL;
            FAcache[start_pos][14].uappend(node_list);
            break;
          case 15:

            /* token_tok_bracket_square queue */
            stack.push([68, start_pos, only_new]);
            break;
          case 68:

            /* token_tok_bracket_square collect */
            node_list = [];
            FAstate[start_pos][15] = STATE_FL;
            FAcache[start_pos][15].uappend(node_list);
            break;
          case 16:

            /* token_tok_at queue */
            stack.push([69, start_pos, only_new]);
            break;
          case 69:

            /* token_tok_at collect */
            node_list = [];
            FAstate[start_pos][16] = STATE_FL;
            FAcache[start_pos][16].uappend(node_list);
            break;
          case 17:

            /* token_tok_pair_delimiter queue */
            stack.push([70, start_pos, only_new]);
            break;
          case 70:

            /* token_tok_pair_delimiter collect */
            node_list = [];
            FAstate[start_pos][17] = STATE_FL;
            FAcache[start_pos][17].uappend(node_list);
            break;
          case 18:

            /* token_tok_bracket_curve queue */
            stack.push([71, start_pos, only_new]);
            break;
          case 71:

            /* token_tok_bracket_curve collect */
            node_list = [];
            FAstate[start_pos][18] = STATE_FL;
            FAcache[start_pos][18].uappend(node_list);
            break;
          case 19:

            /* token_tok_bracket_round queue */
            stack.push([72, start_pos, only_new]);
            break;
          case 72:

            /* token_tok_bracket_round collect */
            node_list = [];
            FAstate[start_pos][19] = STATE_FL;
            FAcache[start_pos][19].uappend(node_list);
            break;
          case 20:

            /* token_tok_comma queue */
            stack.push([73, start_pos, only_new]);
            break;
          case 73:

            /* token_tok_comma collect */
            node_list = [];
            FAstate[start_pos][20] = STATE_FL;
            FAcache[start_pos][20].uappend(node_list);
            break;
          case 21:

            /* token_const queue */
            stack.push([78, start_pos, only_new]);

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            stack.push([74, start_pos, only_new]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            stack.push([76, start_pos, only_new]);
            break;
          case 78:

            /* token_const collect */
            node_list = [];

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 */
            node_list.append(FAcache[start_pos][74]);

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 */
            node_list.append(FAcache[start_pos][76]);
            FAstate[start_pos][21] = STATE_FL;
            FAcache[start_pos][21].uappend(node_list);
            break;
          case 22:

            /* token_num_const queue */
            stack.push([89, start_pos, only_new]);

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 */
            stack.push([79, start_pos, only_new]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 */
            stack.push([81, start_pos, only_new]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 */
            stack.push([83, start_pos, only_new]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 */
            stack.push([85, start_pos, only_new]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 */
            stack.push([87, start_pos, only_new]);
            break;
          case 89:

            /* token_num_const collect */
            node_list = [];

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 */
            node_list.append(FAcache[start_pos][79]);

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 */
            node_list.append(FAcache[start_pos][81]);

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 */
            node_list.append(FAcache[start_pos][83]);

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 */
            node_list.append(FAcache[start_pos][85]);

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 */
            node_list.append(FAcache[start_pos][87]);
            FAstate[start_pos][22] = STATE_FL;
            FAcache[start_pos][22].uappend(node_list);
            break;
          case 23:

            /* token_str_const queue */
            stack.push([94, start_pos, only_new]);

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 */
            stack.push([90, start_pos, only_new]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 */
            stack.push([92, start_pos, only_new]);
            break;
          case 94:

            /* token_str_const collect */
            node_list = [];

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 */
            node_list.append(FAcache[start_pos][90]);

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 */
            node_list.append(FAcache[start_pos][92]);
            FAstate[start_pos][23] = STATE_FL;
            FAcache[start_pos][23].uappend(node_list);
            break;
          case 24:

            /* token_rvalue queue */
            stack.push([143, start_pos, only_new]);

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            stack.push([95, start_pos, only_new]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            stack.push([97, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            stack.push([99, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            stack.push([101, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            stack.push([103, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 */
            stack.push([105, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 */
            stack.push([107, start_pos, only_new]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 */
            stack.push([109, start_pos, only_new]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 */
            stack.push([111, start_pos, only_new]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 */
            stack.push([113, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 */
            stack.push([115, start_pos, only_new]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 */
            stack.push([117, start_pos, only_new]);

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 */
            stack.push([119, start_pos, only_new]);

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 */
            stack.push([121, start_pos, only_new]);

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 */
            stack.push([123, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 */
            stack.push([125, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 */
            stack.push([127, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 */
            stack.push([129, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 */
            stack.push([131, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 */
            stack.push([133, start_pos, only_new]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 */
            stack.push([135, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 */
            stack.push([137, start_pos, only_new]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 */
            stack.push([139, start_pos, only_new]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 */
            stack.push([141, start_pos, only_new]);
            break;
          case 143:

            /* token_rvalue collect */
            node_list = [];

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 */
            node_list.append(FAcache[start_pos][95]);

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 */
            node_list.append(FAcache[start_pos][97]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 */
            node_list.append(FAcache[start_pos][99]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 */
            node_list.append(FAcache[start_pos][101]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 */
            node_list.append(FAcache[start_pos][103]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 */
            node_list.append(FAcache[start_pos][105]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 */
            node_list.append(FAcache[start_pos][107]);

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 */
            node_list.append(FAcache[start_pos][109]);

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 */
            node_list.append(FAcache[start_pos][111]);

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 */
            node_list.append(FAcache[start_pos][113]);

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 */
            node_list.append(FAcache[start_pos][115]);

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 */
            node_list.append(FAcache[start_pos][117]);

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 */
            node_list.append(FAcache[start_pos][119]);

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 */
            node_list.append(FAcache[start_pos][121]);

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 */
            node_list.append(FAcache[start_pos][123]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 */
            node_list.append(FAcache[start_pos][125]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 */
            node_list.append(FAcache[start_pos][127]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 */
            node_list.append(FAcache[start_pos][129]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 */
            node_list.append(FAcache[start_pos][131]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 */
            node_list.append(FAcache[start_pos][133]);

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 */
            node_list.append(FAcache[start_pos][135]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 */
            node_list.append(FAcache[start_pos][137]);

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 */
            node_list.append(FAcache[start_pos][139]);

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 */
            node_list.append(FAcache[start_pos][141]);
            append_list = FAcache[start_pos][24];
            has_new = false;
            for (_k = 0, _len = node_list.length; _k < _len; _k++) {
              node = node_list[_k];
              if (append_list.has(node)) {
                node._is_new = false;
              } else {
                node._is_new = true;
                append_list.push(node);
                has_new = true;
              }
            }
            state = FAstate[start_pos][24];
            FAstate[start_pos][24] = STATE_FL;
            if (state === STATE_IG) {
              if (has_new) {
                FAstate[start_pos][24] = STATE_RQ;
                stack.push([24, start_pos, 1]);
                request_make(26, start_pos, 1);
                request_make(24, start_pos, 1);
              }
            }
            break;
          case 25:

            /* token_stmt queue */
            stack.push([190, start_pos, only_new]);

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            stack.push([144, start_pos, only_new]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 */
            stack.push([146, start_pos, only_new]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 */
            stack.push([148, start_pos, only_new]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 */
            stack.push([150, start_pos, only_new]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 */
            stack.push([152, start_pos, only_new]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 */
            stack.push([154, start_pos, only_new]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 */
            stack.push([156, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 */
            stack.push([158, start_pos, only_new]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 */
            stack.push([160, start_pos, only_new]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 */
            stack.push([162, start_pos, only_new]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 */
            stack.push([164, start_pos, only_new]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 */
            stack.push([166, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 */
            stack.push([168, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 */
            stack.push([170, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 */
            stack.push([172, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 */
            stack.push([174, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 */
            stack.push([176, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 */
            stack.push([178, start_pos, only_new]);

            /* rule_class_Htok_identifier_ultEclass_decl__u145 */
            stack.push([180, start_pos, only_new]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 */
            stack.push([182, start_pos, only_new]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 */
            stack.push([184, start_pos, only_new]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 */
            stack.push([186, start_pos, only_new]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 */
            stack.push([188, start_pos, only_new]);
            break;
          case 190:

            /* token_stmt collect */
            node_list = [];

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 */
            node_list.append(FAcache[start_pos][144]);

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 */
            node_list.append(FAcache[start_pos][146]);

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 */
            node_list.append(FAcache[start_pos][148]);

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 */
            node_list.append(FAcache[start_pos][150]);

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 */
            node_list.append(FAcache[start_pos][152]);

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 */
            node_list.append(FAcache[start_pos][154]);

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 */
            node_list.append(FAcache[start_pos][156]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 */
            node_list.append(FAcache[start_pos][158]);

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 */
            node_list.append(FAcache[start_pos][160]);

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 */
            node_list.append(FAcache[start_pos][162]);

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 */
            node_list.append(FAcache[start_pos][164]);

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 */
            node_list.append(FAcache[start_pos][166]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 */
            node_list.append(FAcache[start_pos][168]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 */
            node_list.append(FAcache[start_pos][170]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 */
            node_list.append(FAcache[start_pos][172]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 */
            node_list.append(FAcache[start_pos][174]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 */
            node_list.append(FAcache[start_pos][176]);

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 */
            node_list.append(FAcache[start_pos][178]);

            /* rule_class_Htok_identifier_ultEclass_decl__u145 */
            node_list.append(FAcache[start_pos][180]);

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 */
            node_list.append(FAcache[start_pos][182]);

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 */
            node_list.append(FAcache[start_pos][184]);

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 */
            node_list.append(FAcache[start_pos][186]);

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 */
            node_list.append(FAcache[start_pos][188]);
            append_list = FAcache[start_pos][25];
            has_new = false;
            for (_l = 0, _len1 = node_list.length; _l < _len1; _l++) {
              node = node_list[_l];
              if (append_list.has(node)) {
                node._is_new = false;
              } else {
                node._is_new = true;
                append_list.push(node);
                has_new = true;
              }
            }
            state = FAstate[start_pos][25];
            FAstate[start_pos][25] = STATE_FL;
            if (state === STATE_IG) {
              if (has_new) {
                FAstate[start_pos][25] = STATE_RQ;
                stack.push([25, start_pos, 1]);
                request_make(25, start_pos, 1);
              }
            }
            break;
          case 26:

            /* token_lvalue queue */
            stack.push([197, start_pos, only_new]);

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            stack.push([191, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 */
            stack.push([193, start_pos, only_new]);

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 */
            stack.push([195, start_pos, only_new]);
            break;
          case 197:

            /* token_lvalue collect */
            node_list = [];

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 */
            node_list.append(FAcache[start_pos][191]);

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 */
            node_list.append(FAcache[start_pos][193]);

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 */
            node_list.append(FAcache[start_pos][195]);
            append_list = FAcache[start_pos][26];
            has_new = false;
            for (_m = 0, _len2 = node_list.length; _m < _len2; _m++) {
              node = node_list[_m];
              if (append_list.has(node)) {
                node._is_new = false;
              } else {
                node._is_new = true;
                append_list.push(node);
                has_new = true;
              }
            }
            state = FAstate[start_pos][26];
            FAstate[start_pos][26] = STATE_FL;
            if (state === STATE_IG) {
              if (has_new) {
                FAstate[start_pos][26] = STATE_RQ;
                stack.push([26, start_pos, 1]);
                request_make(24, start_pos, 1);
              }
            }
            break;
          case 27:

            /* token_block queue */
            stack.push([200, start_pos, only_new]);

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            stack.push([198, start_pos, only_new]);
            break;
          case 200:

            /* token_block collect */
            node_list = [];

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 */
            node_list.append(FAcache[start_pos][198]);
            FAstate[start_pos][27] = STATE_FL;
            FAcache[start_pos][27].uappend(node_list);
            break;
          case 28:

            /* token_indent queue */
            stack.push([201, start_pos, only_new]);
            break;
          case 201:

            /* token_indent collect */
            node_list = [];
            FAstate[start_pos][28] = STATE_FL;
            FAcache[start_pos][28].uappend(node_list);
            break;
          case 29:

            /* token_stmt_plus queue */
            stack.push([208, start_pos, only_new]);

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 */
            stack.push([202, start_pos, only_new]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 */
            stack.push([204, start_pos, only_new]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 */
            stack.push([206, start_pos, only_new]);
            break;
          case 208:

            /* token_stmt_plus collect */
            node_list = [];

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 */
            node_list.append(FAcache[start_pos][202]);

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 */
            node_list.append(FAcache[start_pos][204]);

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 */
            node_list.append(FAcache[start_pos][206]);
            FAstate[start_pos][29] = STATE_FL;
            FAcache[start_pos][29].uappend(node_list);
            break;
          case 30:

            /* token_dedent queue */
            stack.push([209, start_pos, only_new]);
            break;
          case 209:

            /* token_dedent collect */
            node_list = [];
            FAstate[start_pos][30] = STATE_FL;
            FAcache[start_pos][30].uappend(node_list);
            break;
          case 31:

            /* token_bin_op queue */
            stack.push([210, start_pos, only_new]);
            break;
          case 210:

            /* token_bin_op collect */
            node_list = [];
            FAstate[start_pos][31] = STATE_FL;
            FAcache[start_pos][31].uappend(node_list);
            break;
          case 32:

            /* token_pre_op queue */
            stack.push([211, start_pos, only_new]);
            break;
          case 211:

            /* token_pre_op collect */
            node_list = [];
            FAstate[start_pos][32] = STATE_FL;
            FAcache[start_pos][32].uappend(node_list);
            break;
          case 33:

            /* token_post_op queue */
            stack.push([212, start_pos, only_new]);
            break;
          case 212:

            /* token_post_op collect */
            node_list = [];
            FAstate[start_pos][33] = STATE_FL;
            FAcache[start_pos][33].uappend(node_list);
            break;
          case 34:

            /* token_eol queue */
            stack.push([213, start_pos, only_new]);
            break;
          case 213:

            /* token_eol collect */
            node_list = [];
            FAstate[start_pos][34] = STATE_FL;
            FAcache[start_pos][34].uappend(node_list);
            break;
          case 35:

            /* token_type queue */
            stack.push([216, start_pos, only_new]);

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 */
            stack.push([214, start_pos, only_new]);
            break;
          case 216:

            /* token_type collect */
            node_list = [];

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 */
            node_list.append(FAcache[start_pos][214]);
            FAstate[start_pos][35] = STATE_FL;
            FAcache[start_pos][35].uappend(node_list);
            break;
          case 36:

            /* token_struct_init_kv queue */
            stack.push([223, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 */
            stack.push([217, start_pos, only_new]);

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 */
            stack.push([219, start_pos, only_new]);

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 */
            stack.push([221, start_pos, only_new]);
            break;
          case 223:

            /* token_struct_init_kv collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 */
            node_list.append(FAcache[start_pos][217]);

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 */
            node_list.append(FAcache[start_pos][219]);

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 */
            node_list.append(FAcache[start_pos][221]);
            FAstate[start_pos][36] = STATE_FL;
            FAcache[start_pos][36].uappend(node_list);
            break;
          case 37:

            /* token_struct_init_list queue */
            stack.push([234, start_pos, only_new]);

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 */
            stack.push([224, start_pos, only_new]);

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 */
            stack.push([226, start_pos, only_new]);

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 */
            stack.push([228, start_pos, only_new]);

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 */
            stack.push([230, start_pos, only_new]);

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 */
            stack.push([232, start_pos, only_new]);
            break;
          case 234:

            /* token_struct_init_list collect */
            node_list = [];

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 */
            node_list.append(FAcache[start_pos][224]);

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 */
            node_list.append(FAcache[start_pos][226]);

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 */
            node_list.append(FAcache[start_pos][228]);

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 */
            node_list.append(FAcache[start_pos][230]);

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 */
            node_list.append(FAcache[start_pos][232]);
            FAstate[start_pos][37] = STATE_FL;
            FAcache[start_pos][37].uappend(node_list);
            break;
          case 38:

            /* token_struct_init queue */
            stack.push([243, start_pos, only_new]);

            /* rule_XXX_Hstruct_init_listO_XXX___u102 */
            stack.push([235, start_pos, only_new]);

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 */
            stack.push([237, start_pos, only_new]);

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 */
            stack.push([239, start_pos, only_new]);

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 */
            stack.push([241, start_pos, only_new]);
            break;
          case 243:

            /* token_struct_init collect */
            node_list = [];

            /* rule_XXX_Hstruct_init_listO_XXX___u102 */
            node_list.append(FAcache[start_pos][235]);

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 */
            node_list.append(FAcache[start_pos][237]);

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 */
            node_list.append(FAcache[start_pos][239]);

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 */
            node_list.append(FAcache[start_pos][241]);
            FAstate[start_pos][38] = STATE_FL;
            FAcache[start_pos][38].uappend(node_list);
            break;
          case 39:

            /* token_array_init_list queue */
            stack.push([252, start_pos, only_new]);

            /* rule_Hrvalue___u107 */
            stack.push([244, start_pos, only_new]);

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 */
            stack.push([246, start_pos, only_new]);

            /* rule_Hrvalue_XXX______Harray_init_list___u109 */
            stack.push([248, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 */
            stack.push([250, start_pos, only_new]);
            break;
          case 252:

            /* token_array_init_list collect */
            node_list = [];

            /* rule_Hrvalue___u107 */
            node_list.append(FAcache[start_pos][244]);

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 */
            node_list.append(FAcache[start_pos][246]);

            /* rule_Hrvalue_XXX______Harray_init_list___u109 */
            node_list.append(FAcache[start_pos][248]);

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 */
            node_list.append(FAcache[start_pos][250]);
            FAstate[start_pos][39] = STATE_FL;
            FAcache[start_pos][39].uappend(node_list);
            break;
          case 40:

            /* token_array_init queue */
            stack.push([257, start_pos, only_new]);

            /* rule_XXX_Harray_init_listO_XXX___u111 */
            stack.push([253, start_pos, only_new]);

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 */
            stack.push([255, start_pos, only_new]);
            break;
          case 257:

            /* token_array_init collect */
            node_list = [];

            /* rule_XXX_Harray_init_listO_XXX___u111 */
            node_list.append(FAcache[start_pos][253]);

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 */
            node_list.append(FAcache[start_pos][255]);
            FAstate[start_pos][40] = STATE_FL;
            FAcache[start_pos][40].uappend(node_list);
            break;
          case 41:

            /* token_if_tail_stmt queue */
            stack.push([264, start_pos, only_new]);

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 */
            stack.push([258, start_pos, only_new]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 */
            stack.push([260, start_pos, only_new]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 */
            stack.push([262, start_pos, only_new]);
            break;
          case 264:

            /* token_if_tail_stmt collect */
            node_list = [];

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 */
            node_list.append(FAcache[start_pos][258]);

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 */
            node_list.append(FAcache[start_pos][260]);

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 */
            node_list.append(FAcache[start_pos][262]);
            FAstate[start_pos][41] = STATE_FL;
            FAcache[start_pos][41].uappend(node_list);
            break;
          case 42:

            /* token_switch_tail_stmt queue */
            stack.push([269, start_pos, only_new]);

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 */
            stack.push([265, start_pos, only_new]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 */
            stack.push([267, start_pos, only_new]);
            break;
          case 269:

            /* token_switch_tail_stmt collect */
            node_list = [];

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 */
            node_list.append(FAcache[start_pos][265]);

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 */
            node_list.append(FAcache[start_pos][267]);
            FAstate[start_pos][42] = STATE_FL;
            FAcache[start_pos][42].uappend(node_list);
            break;
          case 43:

            /* token_ranger queue */
            stack.push([270, start_pos, only_new]);
            break;
          case 270:

            /* token_ranger collect */
            node_list = [];
            FAstate[start_pos][43] = STATE_FL;
            FAcache[start_pos][43].uappend(node_list);
            break;
          case 44:

            /* token_fn_decl_arg queue */
            stack.push([275, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u128 */
            stack.push([271, start_pos, only_new]);

            /* rule_Htok_identifier___u129 */
            stack.push([273, start_pos, only_new]);
            break;
          case 275:

            /* token_fn_decl_arg collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u128 */
            node_list.append(FAcache[start_pos][271]);

            /* rule_Htok_identifier___u129 */
            node_list.append(FAcache[start_pos][273]);
            FAstate[start_pos][44] = STATE_FL;
            FAcache[start_pos][44].uappend(node_list);
            break;
          case 45:

            /* token_fn_decl_arg_list queue */
            stack.push([280, start_pos, only_new]);

            /* rule_Hfn_decl_arg___u130 */
            stack.push([276, start_pos, only_new]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 */
            stack.push([278, start_pos, only_new]);
            break;
          case 280:

            /* token_fn_decl_arg_list collect */
            node_list = [];

            /* rule_Hfn_decl_arg___u130 */
            node_list.append(FAcache[start_pos][276]);

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 */
            node_list.append(FAcache[start_pos][278]);
            FAstate[start_pos][45] = STATE_FL;
            FAcache[start_pos][45].uappend(node_list);
            break;
          case 46:

            /* token_return queue */
            stack.push([281, start_pos, only_new]);
            break;
          case 281:

            /* token_return collect */
            node_list = [];
            FAstate[start_pos][46] = STATE_FL;
            FAcache[start_pos][46].uappend(node_list);
            break;
          case 47:

            /* token_fn_call_arg_list queue */
            stack.push([286, start_pos, only_new]);

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 */
            stack.push([282, start_pos, only_new]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 */
            stack.push([284, start_pos, only_new]);
            break;
          case 286:

            /* token_fn_call_arg_list collect */
            node_list = [];

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 */
            node_list.append(FAcache[start_pos][282]);

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 */
            node_list.append(FAcache[start_pos][284]);
            FAstate[start_pos][47] = STATE_FL;
            FAcache[start_pos][47].uappend(node_list);
            break;
          case 48:

            /* token_type_list queue */
            stack.push([291, start_pos, only_new]);

            /* rule_Htype___u155 */
            stack.push([287, start_pos, only_new]);

            /* rule_Htype_XXX_Htype_list___u156 */
            stack.push([289, start_pos, only_new]);
            break;
          case 291:

            /* token_type_list collect */
            node_list = [];

            /* rule_Htype___u155 */
            node_list.append(FAcache[start_pos][287]);

            /* rule_Htype_XXX_Htype_list___u156 */
            node_list.append(FAcache[start_pos][289]);
            FAstate[start_pos][48] = STATE_FL;
            FAcache[start_pos][48].uappend(node_list);
            break;
          case 49:

            /* token_type_nest queue */
            stack.push([294, start_pos, only_new]);

            /* rule_XXX_Htype_list_XXX___u157 */
            stack.push([292, start_pos, only_new]);
            break;
          case 294:

            /* token_type_nest collect */
            node_list = [];

            /* rule_XXX_Htype_list_XXX___u157 */
            node_list.append(FAcache[start_pos][292]);
            FAstate[start_pos][49] = STATE_FL;
            FAcache[start_pos][49].uappend(node_list);
            break;
          case 50:

            /* token_type_field_kv queue */
            stack.push([297, start_pos, only_new]);

            /* rule_Htok_identifier_XXX_Htype___u158 */
            stack.push([295, start_pos, only_new]);
            break;
          case 297:

            /* token_type_field_kv collect */
            node_list = [];

            /* rule_Htok_identifier_XXX_Htype___u158 */
            node_list.append(FAcache[start_pos][295]);
            FAstate[start_pos][50] = STATE_FL;
            FAcache[start_pos][50].uappend(node_list);
            break;
          case 51:

            /* token_type_field_kv_list queue */
            stack.push([302, start_pos, only_new]);

            /* rule_Htype_field_kv___u159 */
            stack.push([298, start_pos, only_new]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 */
            stack.push([300, start_pos, only_new]);
            break;
          case 302:

            /* token_type_field_kv_list collect */
            node_list = [];

            /* rule_Htype_field_kv___u159 */
            node_list.append(FAcache[start_pos][298]);

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 */
            node_list.append(FAcache[start_pos][300]);
            FAstate[start_pos][51] = STATE_FL;
            FAcache[start_pos][51].uappend(node_list);
            break;
          case 52:

            /* token_type_field queue */
            stack.push([305, start_pos, only_new]);

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 */
            stack.push([303, start_pos, only_new]);
            break;
          case 305:

            /* token_type_field collect */
            node_list = [];

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 */
            node_list.append(FAcache[start_pos][303]);
            FAstate[start_pos][52] = STATE_FL;
            FAcache[start_pos][52].uappend(node_list);
            break;
          case 74:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 queue */
            chk_len = stack.push([74, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][22];
            if (state_1 !== STATE_FL) {
              if (request_make(22, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][22];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 75;
            }
            break;
          case 75:

            /* rule_Hnum_const_ultEdeep_tiEpass__u1 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][22];
            for (idx_1 = _n = _ref = FAcounter[b_0][0], _ref1 = list_1.length; _n < _ref1; idx_1 = _n += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hnum_const_ultEdeep_tiEpass__u1";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][0] = list_1.length;
            FAcache[start_pos][74].append(ret_list);
            break;
          case 76:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 queue */
            chk_len = stack.push([76, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][23];
            if (state_1 !== STATE_FL) {
              if (request_make(23, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][23];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 77;
            }
            break;
          case 77:

            /* rule_Hstr_const_ultEdeep_tiEpass__u2 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][23];
            for (idx_1 = _o = _ref2 = FAcounter[b_0][1], _ref3 = list_1.length; _o < _ref3; idx_1 = _o += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstr_const_ultEdeep_tiEpass__u2";
              mx_hash_stub.hash_key = "const";
              mx_hash_stub.hash_key_idx = 21;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][1] = list_1.length;
            FAcache[start_pos][76].append(ret_list);
            break;
          case 79:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 queue */
            chk_len = stack.push([79, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][5];
            if (state_1 !== STATE_FL) {
              if (request_make(5, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][5];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 80;
            }
            break;
          case 80:

            /* rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][5];
            for (idx_1 = _p = _ref4 = FAcounter[b_0][2], _ref5 = list_1.length; _p < _ref5; idx_1 = _p += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_decimal_literal_ultEconst_tiEconst_typeEint__u83";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][2] = list_1.length;
            FAcache[start_pos][79].append(ret_list);
            break;
          case 81:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 queue */
            chk_len = stack.push([81, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][6];
            if (state_1 !== STATE_FL) {
              if (request_make(6, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][6];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 82;
            }
            break;
          case 82:

            /* rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][6];
            for (idx_1 = _q = _ref6 = FAcounter[b_0][3], _ref7 = list_1.length; _q < _ref7; idx_1 = _q += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_octal_literal_ultEconst_tiEconst_typeEint__u84";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][3] = list_1.length;
            FAcache[start_pos][81].append(ret_list);
            break;
          case 83:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 queue */
            chk_len = stack.push([83, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][7];
            if (state_1 !== STATE_FL) {
              if (request_make(7, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][7];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 84;
            }
            break;
          case 84:

            /* rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][7];
            for (idx_1 = _r = _ref8 = FAcounter[b_0][4], _ref9 = list_1.length; _r < _ref9; idx_1 = _r += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_hexadecimal_literal_ultEconst_tiEconst_typeEint__u85";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][4] = list_1.length;
            FAcache[start_pos][83].append(ret_list);
            break;
          case 85:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 queue */
            chk_len = stack.push([85, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][8];
            if (state_1 !== STATE_FL) {
              if (request_make(8, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][8];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 86;
            }
            break;
          case 86:

            /* rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][8];
            for (idx_1 = _s = _ref10 = FAcounter[b_0][5], _ref11 = list_1.length; _s < _ref11; idx_1 = _s += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_binary_literal_ultEconst_tiEconst_typeEint__u86";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "int";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][5] = list_1.length;
            FAcache[start_pos][85].append(ret_list);
            break;
          case 87:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 queue */
            chk_len = stack.push([87, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][9];
            if (state_1 !== STATE_FL) {
              if (request_make(9, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][9];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 88;
            }
            break;
          case 88:

            /* rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][9];
            for (idx_1 = _t = _ref12 = FAcounter[b_0][6], _ref13 = list_1.length; _t < _ref13; idx_1 = _t += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_float_literal_ultEconst_tiEconst_typeEfloat__u87";
              mx_hash_stub.hash_key = "num_const";
              mx_hash_stub.hash_key_idx = 22;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "float";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][6] = list_1.length;
            FAcache[start_pos][87].append(ret_list);
            break;
          case 90:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 queue */
            chk_len = stack.push([90, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][10];
            if (state_1 !== STATE_FL) {
              if (request_make(10, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][10];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 91;
            }
            break;
          case 91:

            /* rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][10];
            for (idx_1 = _u = _ref14 = FAcounter[b_0][7], _ref15 = list_1.length; _u < _ref15; idx_1 = _u += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_sq_ultEconst_tiEconst_typeEstring__u88";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][7] = list_1.length;
            FAcache[start_pos][90].append(ret_list);
            break;
          case 92:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 queue */
            chk_len = stack.push([92, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][11];
            if (state_1 !== STATE_FL) {
              if (request_make(11, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][11];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 93;
            }
            break;
          case 93:

            /* rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][11];
            for (idx_1 = _v = _ref16 = FAcounter[b_0][8], _ref17 = list_1.length; _v < _ref17; idx_1 = _v += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_string_dq_ultEconst_tiEconst_typeEstring__u89";
              mx_hash_stub.hash_key = "str_const";
              mx_hash_stub.hash_key_idx = 23;
              mx_hash_stub["ult"] = "const";
              mx_hash_stub["ti"] = "const";
              mx_hash_stub["type"] = "string";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][8] = list_1.length;
            FAcache[start_pos][92].append(ret_list);
            break;
          case 95:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 queue */
            chk_len = stack.push([95, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][21];
            if (state_1 !== STATE_FL) {
              if (request_make(21, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][21];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 96;
            }
            break;
          case 96:

            /* rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][21];
            for (idx_1 = _w = _ref18 = FAcounter[b_0][9], _ref19 = list_1.length; _w < _ref19; idx_1 = _w += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hconst_priorityEX9000_ultEdeep__tiEpass__u3";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][9] = list_1.length;
            FAcache[start_pos][95].append(ret_list);
            break;
          case 97:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 queue */
            chk_len = stack.push([97, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 98;
            }
            break;
          case 98:

            /* rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _x = _ref20 = FAcounter[b_0][10], _ref21 = list_1.length; _x < _ref21; idx_1 = _x += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hlvalue_priorityEX9000_tail_spaceEX1Xtail_space_ultEdeep__tiEpass__u5";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][10] = list_1.length;
            FAcache[start_pos][97].append(ret_list);
            break;
          case 99:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 queue */
            chk_len = stack.push([99, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _y = _ref22 = FAcounter[b_0][12], _ref23 = list_1.length; _y < _ref23; idx_1 = _y += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_z = 0, _len3 = list_2.length; _z < _len3; _z++) {
                tok = list_2[_z];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 100;
            }
            break;
          case 100:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _aa = _ref24 = FAcounter[b_0][15], _ref25 = list_1.length; _aa < _ref25; idx_1 = _aa += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ab = 0, _len4 = list_2.length; _ab < _len4; _ab++) {
                tok = list_2[_ab];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ac = 0, _len5 = list_3.length; _ac < _len5; _ac++) {
                  tok = list_3[_ac];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_u56";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][15] = list_1.length;
            FAcache[start_pos][99].append(ret_list);
            break;
          case 101:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 queue */
            chk_len = stack.push([101, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ad = _ref26 = FAcounter[b_0][17], _ref27 = list_1.length; _ad < _ref27; idx_1 = _ad += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ae = 0, _len6 = list_2.length; _ae < _len6; _ae++) {
                tok = list_2[_ae];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 102;
            }
            break;
          case 102:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _af = _ref28 = FAcounter[b_0][20], _ref29 = list_1.length; _af < _ref29; idx_1 = _af += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ag = 0, _len7 = list_2.length; _ag < _len7; _ag++) {
                tok = list_2[_ag];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ah = 0, _len8 = list_3.length; _ah < _len8; _ah++) {
                  tok = list_3[_ah];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.left_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXleft_assoc_u57";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][20] = list_1.length;
            FAcache[start_pos][101].append(ret_list);
            break;
          case 103:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 queue */
            chk_len = stack.push([103, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ai = _ref30 = FAcounter[b_0][22], _ref31 = list_1.length; _ai < _ref31; idx_1 = _ai += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_aj = 0, _len9 = list_2.length; _aj < _len9; _aj++) {
                tok = list_2[_aj];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 104;
            }
            break;
          case 104:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ak = _ref32 = FAcounter[b_0][25], _ref33 = list_1.length; _ak < _ref33; idx_1 = _ak += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_al = 0, _len10 = list_2.length; _al < _len10; _al++) {
                tok = list_2[_al];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_am = 0, _len11 = list_3.length; _am < _len11; _am++) {
                  tok = list_3[_am];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(!!arg_list[0].mx_hash.tail_space <= !!arg_list[1].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.right_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__XXX1Xtail_spaceXEXXX2Xtail_space_Hbin_opXright_assoc_u58";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][25] = list_1.length;
            FAcache[start_pos][103].append(ret_list);
            break;
          case 105:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 queue */
            chk_len = stack.push([105, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _an = _ref34 = FAcounter[b_0][27], _ref35 = list_1.length; _an < _ref35; idx_1 = _an += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ao = 0, _len12 = list_2.length; _ao < _len12; _ao++) {
                tok = list_2[_ao];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 106;
            }
            break;
          case 106:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ap = _ref36 = FAcounter[b_0][30], _ref37 = list_1.length; _ap < _ref37; idx_1 = _ap += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_aq = 0, _len13 = list_2.length; _aq < _len13; _aq++) {
                tok = list_2[_aq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ar = 0, _len14 = list_3.length; _ar < _len14; _ar++) {
                  tok = list_3[_ar];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityXHbin_opXpriority__X2Xeol_u59";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][30] = list_1.length;
            FAcache[start_pos][105].append(ret_list);
            break;
          case 107:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 queue */
            chk_len = stack.push([107, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _as = _ref38 = FAcounter[b_0][32], _ref39 = list_1.length; _as < _ref39; idx_1 = _as += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_at = 0, _len15 = list_2.length; _at < _len15; _at++) {
                tok = list_2[_at];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 108;
            }
            break;
          case 108:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _au = _ref40 = FAcounter[b_0][35], _ref41 = list_1.length; _au < _ref41; idx_1 = _au += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_av = 0, _len16 = list_2.length; _av < _len16; _av++) {
                tok = list_2[_av];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_aw = 0, _len17 = list_3.length; _aw < _len17; _aw++) {
                  tok = list_3[_aw];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.left_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityXHbin_opXpriority__X3XpriorityEEHbin_opXpriority_X2Xeol_Hbin_opXleft_assoc_u60";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][35] = list_1.length;
            FAcache[start_pos][107].append(ret_list);
            break;
          case 109:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 queue */
            chk_len = stack.push([109, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ax = _ref42 = FAcounter[b_0][37], _ref43 = list_1.length; _ax < _ref43; idx_1 = _ax += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ay = 0, _len18 = list_2.length; _ay < _len18; _ay++) {
                tok = list_2[_ay];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 110;
            }
            break;
          case 110:

            /* rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _az = _ref44 = FAcounter[b_0][40], _ref45 = list_1.length; _az < _ref45; idx_1 = _az += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_ba = 0, _len19 = list_2.length; _ba < _len19; _ba++) {
                tok = list_2[_ba];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_bb = 0, _len20 = list_3.length; _bb < _len20; _bb++) {
                  tok = list_3[_bb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!(arg_list[2].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.eol) {
                    node.value_array.pop();
                    continue;
                  }
                  if (!arg_list[1].mx_hash.right_assoc) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Hbin_op_Hrvalue_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_X1XpriorityEEHbin_opXpriority_X3XpriorityXHbin_opXpriority__X2Xeol_Hbin_opXright_assoc_u61";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][40] = list_1.length;
            FAcache[start_pos][109].append(ret_list);
            break;
          case 111:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 queue */
            chk_len = stack.push([111, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][32];
            if (state_1 !== STATE_FL) {
              if (request_make(32, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][32];
            for (idx_1 = _bc = _ref46 = FAcounter[b_0][41], _ref47 = list_1.length; _bc < _ref47; idx_1 = _bc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 112;
            }
            break;
          case 112:

            /* rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][32];
            for (idx_1 = _bd = _ref48 = FAcounter[b_0][43], _ref49 = list_1.length; _bd < _ref49; idx_1 = _bd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_be = 0, _len21 = list_2.length; _be < _len21; _be++) {
                tok = list_2[_be];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[1].mx_hash.priority <= arg_list[0].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hpre_op_Hrvalue_priorityEHpre_opXpriority_ultEpre_op_tiEpre_op_HrvalueX1XXpriorityXEHpre_opXpriority_u71";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = arg_list[0].mx_hash.priority;
                mx_hash_stub["ult"] = "pre_op";
                mx_hash_stub["ti"] = "pre_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][43] = list_1.length;
            FAcache[start_pos][111].append(ret_list);
            break;
          case 113:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 queue */
            chk_len = stack.push([113, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bf = _ref50 = FAcounter[b_0][44], _ref51 = list_1.length; _bf < _ref51; idx_1 = _bf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][33];
              if (state_2 !== STATE_FL) {
                if (request_make(33, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][33];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 114;
            }
            break;
          case 114:

            /* rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bg = _ref52 = FAcounter[b_0][46], _ref53 = list_1.length; _bg < _ref53; idx_1 = _bg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][33];
              for (_bh = 0, _len22 = list_2.length; _bh < _len22; _bh++) {
                tok = list_2[_bh];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority < arg_list[1].mx_hash.priority)) {
                  node.value_array.pop();
                  continue;
                }
                if (!(!arg_list[0].mx_hash.tail_space)) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hpost_op_priorityEHpost_opXpriority_ultEpost_op_tiEpost_op_HrvalueX1XXpriorityXHpost_opXpriority_XHrvalueXtail_space_u75";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                mx_hash_stub["ult"] = "post_op";
                mx_hash_stub["ti"] = "post_op";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][46] = list_1.length;
            FAcache[start_pos][113].append(ret_list);
            break;
          case 115:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 queue */
            chk_len = stack.push([115, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bi = _ref54 = FAcounter[b_0][48], _ref55 = list_1.length; _bi < _ref55; idx_1 = _bi += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_bj = 0, _len23 = list_2.length; _bj < _len23; _bj++) {
                tok = list_2[_bj];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 116;
            }
            break;
          case 116:

            /* rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _bk = _ref56 = FAcounter[b_0][52], _ref57 = list_1.length; _bk < _ref57; idx_1 = _bk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_bl = 0, _len24 = list_2.length; _bl < _len24; _bl++) {
                tok = list_2[_bl];
                if (tok.value !== '[') {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_bm = 0, _len25 = list_3.length; _bm < _len25; _bm++) {
                  tok = list_3[_bm];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_bn = 0, _len26 = list_4.length; _bn < _len26; _bn++) {
                    tok = list_4[_bn];
                    if (tok.value !== ']') {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hrvalue_XXX_priorityEX9000_ultEindex_access_tiEindex_access_X1XpriorityEEX9000_u76";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "index_access";
                    mx_hash_stub["ti"] = "index_access";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][52] = list_1.length;
            FAcache[start_pos][115].append(ret_list);
            break;
          case 117:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 queue */
            chk_len = stack.push([117, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bo = _ref58 = FAcounter[b_0][53], _ref59 = list_1.length; _bo < _ref59; idx_1 = _bo += 1) {
              tok = list_1[idx_1];
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 118;
            }
            break;
          case 118:

            /* rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bp = _ref60 = FAcounter[b_0][56], _ref61 = list_1.length; _bp < _ref61; idx_1 = _bp += 1) {
              tok = list_1[idx_1];
              if (tok.value !== '(') {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_bq = 0, _len27 = list_2.length; _bq < _len27; _bq++) {
                tok = list_2[_bq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_br = 0, _len28 = list_3.length; _br < _len28; _br++) {
                  tok = list_3[_br];
                  if (tok.value !== ')') {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Hrvalue_XXX_priorityEX9000_ultEbracket_tiEpass__u77";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "bracket";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][56] = list_1.length;
            FAcache[start_pos][117].append(ret_list);
            break;
          case 119:

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 queue */
            chk_len = stack.push([119, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 120;
            }
            break;
          case 120:

            /* rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bs = _ref62 = FAcounter[b_0][57], _ref63 = list_1.length; _bs < _ref63; idx_1 = _bs += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_XXX_priorityEX9000_ultEat_tail_spaceEX1Xtail_space__u92";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "at";
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][57] = list_1.length;
            FAcache[start_pos][119].append(ret_list);
            break;
          case 121:

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 queue */
            chk_len = stack.push([121, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][38];
            if (state_1 !== STATE_FL) {
              if (request_make(38, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][38];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 122;
            }
            break;
          case 122:

            /* rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][38];
            for (idx_1 = _bt = _ref64 = FAcounter[b_0][58], _ref65 = list_1.length; _bt < _ref65; idx_1 = _bt += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_priorityEX9000_ultEstruct_init_bracketless_hashEX1Xbracketless_hash__u104";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "struct_init";
              mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][58] = list_1.length;
            FAcache[start_pos][121].append(ret_list);
            break;
          case 123:

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 queue */
            chk_len = stack.push([123, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][40];
            if (state_1 !== STATE_FL) {
              if (request_make(40, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][40];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 124;
            }
            break;
          case 124:

            /* rule_Harray_init_priorityEX9000_ultEarray_init__u113 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][40];
            for (idx_1 = _bu = _ref66 = FAcounter[b_0][59], _ref67 = list_1.length; _bu < _ref67; idx_1 = _bu += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Harray_init_priorityEX9000_ultEarray_init__u113";
              mx_hash_stub.hash_key = "rvalue";
              mx_hash_stub.hash_key_idx = 24;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["ult"] = "array_init";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][59] = list_1.length;
            FAcache[start_pos][123].append(ret_list);
            break;
          case 125:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 queue */
            chk_len = stack.push([125, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _bv = _ref68 = FAcounter[b_0][63], _ref69 = list_1.length; _bv < _ref69; idx_1 = _bv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _bw = 0; _bw < 1; _i_2 = ++_bw) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _bx = 0; _bx < 1; _i_2 = ++_bx) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_by = 0, _len29 = list_2.length; _by < _len29; _by++) {
                  tok = list_2[_by];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_bz = 0, _len30 = hyp_list_2.length; _bz < _len30; _bz++) {
                tok_list = hyp_list_2[_bz];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ca = 0, _len31 = list_3.length; _ca < _len31; _ca++) {
                  tok = list_3[_ca];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cb = 0, _len32 = list_4.length; _cb < _len32; _cb++) {
                    tok = list_4[_cb];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 126;
            }
            break;
          case 126:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _cc = _ref70 = FAcounter[b_0][69], _ref71 = list_1.length; _cc < _ref71; idx_1 = _cc += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cd = 0; _cd < 1; _i_2 = ++_cd) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ce = 0; _ce < 1; _i_2 = ++_ce) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_cf = 0, _len33 = list_2.length; _cf < _len33; _cf++) {
                  tok = list_2[_cf];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cg = 0, _len34 = hyp_list_2.length; _cg < _len34; _cg++) {
                tok_list = hyp_list_2[_cg];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ch = 0, _len35 = list_3.length; _ch < _len35; _ch++) {
                  tok = list_3[_ch];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ci = 0, _len36 = list_4.length; _ci < _len36; _ci++) {
                    tok = list_4[_ci];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_cj = 0, _len37 = list_5.length; _cj < _len37; _cj++) {
                      tok = list_5[_cj];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_ck = 0, _len38 = list_6.length; _ck < _len38; _ck++) {
                        tok = list_6[_ck];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_priorityEX9000_ultEcl_decl__u139";
                        mx_hash_stub.hash_key = "rvalue";
                        mx_hash_stub.hash_key_idx = 24;
                        mx_hash_stub["priority"] = -9000;
                        mx_hash_stub["ult"] = "cl_decl";
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][69] = list_1.length;
            FAcache[start_pos][125].append(ret_list);
            break;
          case 127:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 queue */
            chk_len = stack.push([127, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _cl = _ref72 = FAcounter[b_0][75], _ref73 = list_1.length; _cl < _ref73; idx_1 = _cl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cm = 0; _cm < 1; _i_2 = ++_cm) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cn = 0; _cn < 1; _i_2 = ++_cn) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_co = 0, _len39 = list_2.length; _co < _len39; _co++) {
                  tok = list_2[_co];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cp = 0, _len40 = hyp_list_2.length; _cp < _len40; _cp++) {
                tok_list = hyp_list_2[_cp];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_cq = 0, _len41 = list_3.length; _cq < _len41; _cq++) {
                  tok = list_3[_cq];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_cr = 0, _len42 = list_4.length; _cr < _len42; _cr++) {
                    tok = list_4[_cr];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    for (_cs = 0, _len43 = list_5.length; _cs < _len43; _cs++) {
                      tok = list_5[_cs];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_ct = 0, _len44 = list_6.length; _ct < _len44; _ct++) {
                        tok = list_6[_ct];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][27];
                        if (state_7 !== STATE_FL) {
                          if (request_make(27, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][27];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 128;
            }
            break;
          case 128:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _cu = _ref74 = FAcounter[b_0][82], _ref75 = list_1.length; _cu < _ref75; idx_1 = _cu += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _cv = 0; _cv < 1; _i_2 = ++_cv) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _cw = 0; _cw < 1; _i_2 = ++_cw) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_cx = 0, _len45 = list_2.length; _cx < _len45; _cx++) {
                  tok = list_2[_cx];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_cy = 0, _len46 = hyp_list_2.length; _cy < _len46; _cy++) {
                tok_list = hyp_list_2[_cy];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_cz = 0, _len47 = list_3.length; _cz < _len47; _cz++) {
                  tok = list_3[_cz];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_da = 0, _len48 = list_4.length; _da < _len48; _da++) {
                    tok = list_4[_da];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_db = 0, _len49 = list_5.length; _db < _len49; _db++) {
                      tok = list_5[_db];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_dc = 0, _len50 = list_6.length; _dc < _len50; _dc++) {
                        tok = list_6[_dc];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][27];
                        for (_dd = 0, _len51 = list_7.length; _dd < _len51; _dd++) {
                          tok = list_7[_dd];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u140";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][82] = list_1.length;
            FAcache[start_pos][127].append(ret_list);
            break;
          case 129:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 queue */
            chk_len = stack.push([129, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _de = _ref76 = FAcounter[b_0][88], _ref77 = list_1.length; _de < _ref77; idx_1 = _de += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _df = 0; _df < 1; _i_2 = ++_df) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _dg = 0; _dg < 1; _i_2 = ++_dg) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_dh = 0, _len52 = list_2.length; _dh < _len52; _dh++) {
                  tok = list_2[_dh];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_di = 0, _len53 = hyp_list_2.length; _di < _len53; _di++) {
                tok_list = hyp_list_2[_di];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_dj = 0, _len54 = list_3.length; _dj < _len54; _dj++) {
                  tok = list_3[_dj];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dk = 0, _len55 = list_4.length; _dk < _len55; _dk++) {
                    tok = list_4[_dk];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][35];
                    if (state_5 !== STATE_FL) {
                      if (request_make(35, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][35];
                    for (_dl = 0, _len56 = list_5.length; _dl < _len56; _dl++) {
                      tok = list_5[_dl];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_dm = 0, _len57 = list_6.length; _dm < _len57; _dm++) {
                        tok = list_6[_dm];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 130;
            }
            break;
          case 130:

            /* rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _dn = _ref78 = FAcounter[b_0][95], _ref79 = list_1.length; _dn < _ref79; idx_1 = _dn += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _do = 0; _do < 1; _i_2 = ++_do) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _dp = 0; _dp < 1; _i_2 = ++_dp) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_dq = 0, _len58 = list_2.length; _dq < _len58; _dq++) {
                  tok = list_2[_dq];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_dr = 0, _len59 = hyp_list_2.length; _dr < _len59; _dr++) {
                tok_list = hyp_list_2[_dr];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ds = 0, _len60 = list_3.length; _ds < _len60; _ds++) {
                  tok = list_3[_ds];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_dt = 0, _len61 = list_4.length; _dt < _len61; _dt++) {
                    tok = list_4[_dt];
                    if (tok.value !== ":") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][35];
                    for (_du = 0, _len62 = list_5.length; _du < _len62; _du++) {
                      tok = list_5[_du];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][0];
                      for (_dv = 0, _len63 = list_6.length; _dv < _len63; _dv++) {
                        tok = list_6[_dv];
                        if (tok.value !== "=>") {
                          continue;
                        }
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_dw = 0, _len64 = list_7.length; _dw < _len64; _dw++) {
                          tok = list_7[_dw];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u141";
                          mx_hash_stub.hash_key = "rvalue";
                          mx_hash_stub.hash_key_idx = 24;
                          mx_hash_stub["priority"] = -9000;
                          mx_hash_stub["ult"] = "cl_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][95] = list_1.length;
            FAcache[start_pos][129].append(ret_list);
            break;
          case 131:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 queue */
            chk_len = stack.push([131, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _dx = _ref80 = FAcounter[b_0][97], _ref81 = list_1.length; _dx < _ref81; idx_1 = _dx += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _dy = 0; _dy < 1; _i_2 = ++_dy) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _dz = 0; _dz < 1; _i_2 = ++_dz) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_ea = 0, _len65 = list_2.length; _ea < _len65; _ea++) {
                  tok = list_2[_ea];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_eb = 0, _len66 = hyp_list_2.length; _eb < _len66; _eb++) {
                tok_list = hyp_list_2[_eb];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 132;
            }
            break;
          case 132:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ec = _ref82 = FAcounter[b_0][101], _ref83 = list_1.length; _ec < _ref83; idx_1 = _ec += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ed = 0; _ed < 1; _i_2 = ++_ed) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ee = 0; _ee < 1; _i_2 = ++_ee) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_ef = 0, _len67 = list_2.length; _ef < _len67; _ef++) {
                  tok = list_2[_ef];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_eg = 0, _len68 = hyp_list_2.length; _eg < _len68; _eg++) {
                tok_list = hyp_list_2[_eg];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_eh = 0, _len69 = list_3.length; _eh < _len69; _eh++) {
                  tok = list_3[_eh];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ei = 0, _len70 = list_4.length; _ei < _len70; _ei++) {
                    tok = list_4[_ei];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_priorityEX9000_ultEcl_decl__u142";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "cl_decl";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][101] = list_1.length;
            FAcache[start_pos][131].append(ret_list);
            break;
          case 133:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 queue */
            chk_len = stack.push([133, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ej = _ref84 = FAcounter[b_0][105], _ref85 = list_1.length; _ej < _ref85; idx_1 = _ej += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ek = 0; _ek < 1; _i_2 = ++_ek) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _el = 0; _el < 1; _i_2 = ++_el) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_em = 0, _len71 = list_2.length; _em < _len71; _em++) {
                  tok = list_2[_em];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_en = 0, _len72 = hyp_list_2.length; _en < _len72; _en++) {
                tok_list = hyp_list_2[_en];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_eo = 0, _len73 = list_3.length; _eo < _len73; _eo++) {
                  tok = list_3[_eo];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ep = 0, _len74 = list_4.length; _ep < _len74; _ep++) {
                    tok = list_4[_ep];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 134;
            }
            break;
          case 134:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _eq = _ref86 = FAcounter[b_0][110], _ref87 = list_1.length; _eq < _ref87; idx_1 = _eq += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _er = 0; _er < 1; _i_2 = ++_er) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _es = 0; _es < 1; _i_2 = ++_es) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_et = 0, _len75 = list_2.length; _et < _len75; _et++) {
                  tok = list_2[_et];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_eu = 0, _len76 = hyp_list_2.length; _eu < _len76; _eu++) {
                tok_list = hyp_list_2[_eu];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ev = 0, _len77 = list_3.length; _ev < _len77; _ev++) {
                  tok = list_3[_ev];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ew = 0, _len78 = list_4.length; _ew < _len78; _ew++) {
                    tok = list_4[_ew];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_ex = 0, _len79 = list_5.length; _ex < _len79; _ex++) {
                      tok = list_5[_ex];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hblock_priorityEX9000_ultEcl_decl_eolE1__u143";
                      mx_hash_stub.hash_key = "rvalue";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "cl_decl";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][110] = list_1.length;
            FAcache[start_pos][133].append(ret_list);
            break;
          case 135:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 queue */
            chk_len = stack.push([135, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ey = _ref88 = FAcounter[b_0][114], _ref89 = list_1.length; _ey < _ref89; idx_1 = _ey += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ez = 0; _ez < 1; _i_2 = ++_ez) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _fa = 0; _fa < 1; _i_2 = ++_fa) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][45];
                if (state_2 !== STATE_FL) {
                  if (request_make(45, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][45];
                for (_fb = 0, _len80 = list_2.length; _fb < _len80; _fb++) {
                  tok = list_2[_fb];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_fc = 0, _len81 = hyp_list_2.length; _fc < _len81; _fc++) {
                tok_list = hyp_list_2[_fc];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fd = 0, _len82 = list_3.length; _fd < _len82; _fd++) {
                  tok = list_3[_fd];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fe = 0, _len83 = list_4.length; _fe < _len83; _fe++) {
                    tok = list_4[_fe];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 136;
            }
            break;
          case 136:

            /* rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ff = _ref90 = FAcounter[b_0][119], _ref91 = list_1.length; _ff < _ref91; idx_1 = _ff += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "(") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _fg = 0; _fg < 1; _i_2 = ++_fg) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _fh = 0; _fh < 1; _i_2 = ++_fh) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][45];
                for (_fi = 0, _len84 = list_2.length; _fi < _len84; _fi++) {
                  tok = list_2[_fi];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_fj = 0, _len85 = hyp_list_2.length; _fj < _len85; _fj++) {
                tok_list = hyp_list_2[_fj];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_fk = 0, _len86 = list_3.length; _fk < _len86; _fk++) {
                  tok = list_3[_fk];
                  if (tok.value !== ")") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fl = 0, _len87 = list_4.length; _fl < _len87; _fl++) {
                    tok = list_4[_fl];
                    if (tok.value !== "=>") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_fm = 0, _len88 = list_5.length; _fm < _len88; _fm++) {
                      tok = list_5[_fm];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hfn_decl_arg_listO_XXX__XEXX_Hrvalue_priorityEX9000_ultEcl_decl__u144";
                      mx_hash_stub.hash_key = "rvalue";
                      mx_hash_stub.hash_key_idx = 24;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "cl_decl";
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][119] = list_1.length;
            FAcache[start_pos][135].append(ret_list);
            break;
          case 137:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 queue */
            chk_len = stack.push([137, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _fn = _ref92 = FAcounter[b_0][122], _ref93 = list_1.length; _fn < _ref93; idx_1 = _fn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fo = 0, _len89 = list_2.length; _fo < _len89; _fo++) {
                tok = list_2[_fo];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _fp = 0; _fp < 1; _i_3 = ++_fp) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _fq = 0; _fq < 1; _i_3 = ++_fq) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][47];
                  if (state_3 !== STATE_FL) {
                    if (request_make(47, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][47];
                  for (_fr = 0, _len90 = list_3.length; _fr < _len90; _fr++) {
                    tok = list_3[_fr];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_fs = 0, _len91 = hyp_list_3.length; _fs < _len91; _fs++) {
                  tok_list = hyp_list_3[_fs];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 138;
            }
            break;
          case 138:

            /* rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ft = _ref94 = FAcounter[b_0][126], _ref95 = list_1.length; _ft < _ref95; idx_1 = _ft += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_fu = 0, _len92 = list_2.length; _fu < _len92; _fu++) {
                tok = list_2[_fu];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _fv = 0; _fv < 1; _i_3 = ++_fv) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _fw = 0; _fw < 1; _i_3 = ++_fw) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][47];
                  for (_fx = 0, _len93 = list_3.length; _fx < _len93; _fx++) {
                    tok = list_3[_fx];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_fy = 0, _len94 = hyp_list_3.length; _fy < _len94; _fy++) {
                  tok_list = hyp_list_3[_fy];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_fz = 0, _len95 = list_4.length; _fz < _len95; _fz++) {
                    tok = list_4[_fz];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    if (!(arg_list[0].mx_hash.priority === -9000)) {
                      node.value_array.pop();
                      continue;
                    }
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_listO_XXX_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_u149";
                    mx_hash_stub.hash_key = "rvalue";
                    mx_hash_stub.hash_key_idx = 24;
                    mx_hash_stub["priority"] = -9000;
                    mx_hash_stub["ult"] = "fn_call";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][126] = list_1.length;
            FAcache[start_pos][137].append(ret_list);
            break;
          case 139:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 queue */
            chk_len = stack.push([139, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ga = _ref96 = FAcounter[b_0][127], _ref97 = list_1.length; _ga < _ref97; idx_1 = _ga += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][47];
              if (state_2 !== STATE_FL) {
                if (request_make(47, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][47];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 140;
            }
            break;
          case 140:

            /* rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _gb = _ref98 = FAcounter[b_0][129], _ref99 = list_1.length; _gb < _ref99; idx_1 = _gb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][47];
              for (_gc = 0, _len96 = list_2.length; _gc < _len96; _gc++) {
                tok = list_2[_gc];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!(arg_list[0].mx_hash.priority === -9000)) {
                  node.value_array.pop();
                  continue;
                }
                if (!arg_list[0].mx_hash.tail_space) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hrvalue_Hfn_call_arg_list_priorityEX9000_ultEfn_call_X1XpriorityEEX9000_X1Xtail_space_u150";
                mx_hash_stub.hash_key = "rvalue";
                mx_hash_stub.hash_key_idx = 24;
                mx_hash_stub["priority"] = -9000;
                mx_hash_stub["ult"] = "fn_call";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][129] = list_1.length;
            FAcache[start_pos][139].append(ret_list);
            break;
          case 141:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 queue */
            chk_len = stack.push([141, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _gd = _ref100 = FAcounter[b_0][131], _ref101 = list_1.length; _gd < _ref101; idx_1 = _gd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][31];
              if (state_2 !== STATE_FL) {
                if (request_make(31, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][31];
              for (_ge = 0, _len97 = list_2.length; _ge < _len97; _ge++) {
                tok = list_2[_ge];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][25];
                if (state_3 !== STATE_FL) {
                  if (request_make(25, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][25];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 142;
            }
            break;
          case 142:

            /* rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _gf = _ref102 = FAcounter[b_0][134], _ref103 = list_1.length; _gf < _ref103; idx_1 = _gf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][31];
              for (_gg = 0, _len98 = list_2.length; _gg < _len98; _gg++) {
                tok = list_2[_gg];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][25];
                for (_gh = 0, _len99 = list_3.length; _gh < _len99; _gh++) {
                  tok = list_3[_gh];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[2].mx_hash.ult === "directive_fn_call")) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hbin_op_Hstmt_priorityEHbin_opXpriority_ultEbin_op_tiEbin_op_eolE1_HstmtXultEEdirective_fn_call_u154";
                  mx_hash_stub.hash_key = "rvalue";
                  mx_hash_stub.hash_key_idx = 24;
                  mx_hash_stub["priority"] = arg_list[1].mx_hash.priority;
                  mx_hash_stub["ult"] = "bin_op";
                  mx_hash_stub["ti"] = "bin_op";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][134] = list_1.length;
            FAcache[start_pos][141].append(ret_list);
            break;
          case 144:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 queue */
            chk_len = stack.push([144, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 145;
            }
            break;
          case 145:

            /* rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _gi = _ref104 = FAcounter[b_0][135], _ref105 = list_1.length; _gi < _ref105; idx_1 = _gi += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue_ultEdeep_tiEpass_eolEX1Xeol__u4";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "deep";
              mx_hash_stub["ti"] = "pass";
              mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][135] = list_1.length;
            FAcache[start_pos][144].append(ret_list);
            break;
          case 146:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 queue */
            chk_len = stack.push([146, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][13];
            if (state_1 !== STATE_FL) {
              if (request_make(13, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][13];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 147;
            }
            break;
          case 147:

            /* rule_Htok_inline_comment_ultEcomment_tiEpass__u81 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][13];
            for (idx_1 = _gj = _ref106 = FAcounter[b_0][136], _ref107 = list_1.length; _gj < _ref107; idx_1 = _gj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_inline_comment_ultEcomment_tiEpass__u81";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][136] = list_1.length;
            FAcache[start_pos][146].append(ret_list);
            break;
          case 148:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 queue */
            chk_len = stack.push([148, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][14];
            if (state_1 !== STATE_FL) {
              if (request_make(14, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][14];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 149;
            }
            break;
          case 149:

            /* rule_Htok_multiline_comment_ultEcomment_tiEpass__u82 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][14];
            for (idx_1 = _gk = _ref108 = FAcounter[b_0][137], _ref109 = list_1.length; _gk < _ref109; idx_1 = _gk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_multiline_comment_ultEcomment_tiEpass__u82";
              mx_hash_stub.hash_key = "stmt";
              mx_hash_stub.hash_key_idx = 25;
              mx_hash_stub["ult"] = "comment";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][137] = list_1.length;
            FAcache[start_pos][148].append(ret_list);
            break;
          case 150:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 queue */
            chk_len = stack.push([150, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _gl = _ref110 = FAcounter[b_0][140], _ref111 = list_1.length; _gl < _ref111; idx_1 = _gl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_gm = 0, _len100 = list_2.length; _gm < _len100; _gm++) {
                tok = list_2[_gm];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gn = 0, _len101 = list_3.length; _gn < _len101; _gn++) {
                  tok = list_3[_gn];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][35];
                  if (state_4 !== STATE_FL) {
                    if (request_make(35, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][35];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 151;
            }
            break;
          case 151:

            /* rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _go = _ref112 = FAcounter[b_0][144], _ref113 = list_1.length; _go < _ref113; idx_1 = _go += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "var") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_gp = 0, _len102 = list_2.length; _gp < _len102; _gp++) {
                tok = list_2[_gp];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_gq = 0, _len103 = list_3.length; _gq < _len103; _gq++) {
                  tok = list_3[_gq];
                  if (tok.value !== ":") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][35];
                  for (_gr = 0, _len104 = list_4.length; _gr < _len104; _gr++) {
                    tok = list_4[_gr];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_var_Htok_identifier_XXX_Htype_ultEvar_decl_tiEvar_decl__u90";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 25;
                    mx_hash_stub["ult"] = "var_decl";
                    mx_hash_stub["ti"] = "var_decl";
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][144] = list_1.length;
            FAcache[start_pos][150].append(ret_list);
            break;
          case 152:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 queue */
            chk_len = stack.push([152, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _gs = _ref114 = FAcounter[b_0][148], _ref115 = list_1.length; _gs < _ref115; idx_1 = _gs += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_gt = 0, _len105 = list_2.length; _gt < _len105; _gt++) {
                tok = list_2[_gt];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_gu = 0, _len106 = list_3.length; _gu < _len106; _gu++) {
                  tok = list_3[_gu];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _gv = 0; _gv < 1; _i_4 = ++_gv) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _gw = 0; _gw < 1; _i_4 = ++_gw) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][41];
                    if (state_4 !== STATE_FL) {
                      if (request_make(41, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][41];
                    for (_gx = 0, _len107 = list_4.length; _gx < _len107; _gx++) {
                      tok = list_4[_gx];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_gy = 0, _len108 = hyp_list_4.length; _gy < _len108; _gy++) {
                    tok_list = hyp_list_4[_gy];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 153;
            }
            break;
          case 153:

            /* rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _gz = _ref116 = FAcounter[b_0][152], _ref117 = list_1.length; _gz < _ref117; idx_1 = _gz += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "if") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_ha = 0, _len109 = list_2.length; _ha < _len109; _ha++) {
                tok = list_2[_ha];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_hb = 0, _len110 = list_3.length; _hb < _len110; _hb++) {
                  tok = list_3[_hb];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _hc = 0; _hc < 1; _i_4 = ++_hc) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _hd = 0; _hd < 1; _i_4 = ++_hd) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][41];
                    for (_he = 0, _len111 = list_4.length; _he < _len111; _he++) {
                      tok = list_4[_he];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_hf = 0, _len112 = hyp_list_4.length; _hf < _len112; _hf++) {
                    tok_list = hyp_list_4[_hf];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEif_tiEif_eolE1__u114";
                    mx_hash_stub.hash_key = "stmt";
                    mx_hash_stub.hash_key_idx = 25;
                    mx_hash_stub["ult"] = "if";
                    mx_hash_stub["ti"] = "if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][152] = list_1.length;
            FAcache[start_pos][152].append(ret_list);
            break;
          case 154:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 queue */
            chk_len = stack.push([154, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _hg = _ref118 = FAcounter[b_0][154], _ref119 = list_1.length; _hg < _ref119; idx_1 = _hg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_hh = 0, _len113 = list_2.length; _hh < _len113; _hh++) {
                tok = list_2[_hh];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 155;
            }
            break;
          case 155:

            /* rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _hi = _ref120 = FAcounter[b_0][157], _ref121 = list_1.length; _hi < _ref121; idx_1 = _hi += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_hj = 0, _len114 = list_2.length; _hj < _len114; _hj++) {
                tok = list_2[_hj];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_hk = 0, _len115 = list_3.length; _hk < _len115; _hk++) {
                  tok = list_3[_hk];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_if_Hrvalue_ultEif_postfix_tiEif_postfix_eolE1__u118";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "if_postfix";
                  mx_hash_stub["ti"] = "if_postfix";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][157] = list_1.length;
            FAcache[start_pos][154].append(ret_list);
            break;
          case 156:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 queue */
            chk_len = stack.push([156, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hl = _ref122 = FAcounter[b_0][161], _ref123 = list_1.length; _hl < _ref123; idx_1 = _hl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_hm = 0, _len116 = list_2.length; _hm < _len116; _hm++) {
                tok = list_2[_hm];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][28];
                if (state_3 !== STATE_FL) {
                  if (request_make(28, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][28];
                for (_hn = 0, _len117 = list_3.length; _hn < _len117; _hn++) {
                  tok = list_3[_hn];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][42];
                  if (state_4 !== STATE_FL) {
                    if (request_make(42, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][42];
                  for (_ho = 0, _len118 = list_4.length; _ho < _len118; _ho++) {
                    tok = list_4[_ho];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][30];
                    if (state_5 !== STATE_FL) {
                      if (request_make(30, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][30];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 157;
            }
            break;
          case 157:

            /* rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hp = _ref124 = FAcounter[b_0][166], _ref125 = list_1.length; _hp < _ref125; idx_1 = _hp += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "switch") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_hq = 0, _len119 = list_2.length; _hq < _len119; _hq++) {
                tok = list_2[_hq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][28];
                for (_hr = 0, _len120 = list_3.length; _hr < _len120; _hr++) {
                  tok = list_3[_hr];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][42];
                  for (_hs = 0, _len121 = list_4.length; _hs < _len121; _hs++) {
                    tok = list_4[_hs];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][30];
                    for (_ht = 0, _len122 = list_5.length; _ht < _len122; _ht++) {
                      tok = list_5[_ht];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_switch_Hrvalue_Hindent_Hswitch_tail_stmt_Hdedent_ultEswitch_tiEswitch_eolE1__u119";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "switch";
                      mx_hash_stub["ti"] = "switch";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][166] = list_1.length;
            FAcache[start_pos][156].append(ret_list);
            break;
          case 158:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 queue */
            chk_len = stack.push([158, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _hu = _ref126 = FAcounter[b_0][174], _ref127 = list_1.length; _hu < _ref127; idx_1 = _hu += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_hv = 0, _len123 = list_2.length; _hv < _len123; _hv++) {
                tok = list_2[_hv];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_hw = 0, _len124 = list_3.length; _hw < _len124; _hw++) {
                  tok = list_3[_hw];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_hx = 0, _len125 = list_4.length; _hx < _len125; _hx++) {
                    tok = list_4[_hx];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    for (_hy = 0, _len126 = list_5.length; _hy < _len126; _hy++) {
                      tok = list_5[_hy];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][43];
                      if (state_6 !== STATE_FL) {
                        if (request_make(43, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][43];
                      for (_hz = 0, _len127 = list_6.length; _hz < _len127; _hz++) {
                        tok = list_6[_hz];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        for (_ia = 0, _len128 = list_7.length; _ia < _len128; _ia++) {
                          tok = list_7[_ia];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_ib = 0, _len129 = list_8.length; _ib < _len129; _ib++) {
                            tok = list_8[_ib];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            state_9 = FAstate[b_8][27];
                            if (state_9 !== STATE_FL) {
                              if (request_make(27, b_8, 0)) {
                                continue;
                              }
                            }
                            list_9 = FAcache[b_8][27];
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 159;
            }
            break;
          case 159:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ic = _ref128 = FAcounter[b_0][183], _ref129 = list_1.length; _ic < _ref129; idx_1 = _ic += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_id = 0, _len130 = list_2.length; _id < _len130; _id++) {
                tok = list_2[_id];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ie = 0, _len131 = list_3.length; _ie < _len131; _ie++) {
                  tok = list_3[_ie];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_if = 0, _len132 = list_4.length; _if < _len132; _if++) {
                    tok = list_4[_if];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_ig = 0, _len133 = list_5.length; _ig < _len133; _ig++) {
                      tok = list_5[_ig];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][43];
                      for (_ih = 0, _len134 = list_6.length; _ih < _len134; _ih++) {
                        tok = list_6[_ih];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_ii = 0, _len135 = list_7.length; _ii < _len135; _ii++) {
                          tok = list_7[_ii];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_ij = 0, _len136 = list_8.length; _ij < _len136; _ij++) {
                            tok = list_8[_ij];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][27];
                            for (_ik = 0, _len137 = list_9.length; _ik < _len137; _ik++) {
                              tok = list_9[_ik];
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              arg_list = node.value_array;
                              mx_hash_stub = node.mx_hash = {};
                              mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_Hblock_ultEfor_range_tiEmacro_eolE1__u124";
                              mx_hash_stub.hash_key = "stmt";
                              mx_hash_stub.hash_key_idx = 25;
                              mx_hash_stub["ult"] = "for_range";
                              mx_hash_stub["ti"] = "macro";
                              mx_hash_stub["eol"] = 1;
                              node.b = node.value_array.last().b;
                              ret_list.push(node.clone());
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][183] = list_1.length;
            FAcache[start_pos][158].append(ret_list);
            break;
          case 160:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 queue */
            chk_len = stack.push([160, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _il = _ref130 = FAcounter[b_0][193], _ref131 = list_1.length; _il < _ref131; idx_1 = _il += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_im = 0, _len138 = list_2.length; _im < _len138; _im++) {
                tok = list_2[_im];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_in = 0, _len139 = list_3.length; _in < _len139; _in++) {
                  tok = list_3[_in];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_io = 0, _len140 = list_4.length; _io < _len140; _io++) {
                    tok = list_4[_io];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][24];
                    if (state_5 !== STATE_FL) {
                      if (request_make(24, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][24];
                    for (_ip = 0, _len141 = list_5.length; _ip < _len141; _ip++) {
                      tok = list_5[_ip];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][43];
                      if (state_6 !== STATE_FL) {
                        if (request_make(43, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][43];
                      for (_iq = 0, _len142 = list_6.length; _iq < _len142; _iq++) {
                        tok = list_6[_iq];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][24];
                        if (state_7 !== STATE_FL) {
                          if (request_make(24, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][24];
                        for (_ir = 0, _len143 = list_7.length; _ir < _len143; _ir++) {
                          tok = list_7[_ir];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_is = 0, _len144 = list_8.length; _is < _len144; _is++) {
                            tok = list_8[_is];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_it = 0, _len145 = list_9.length; _it < _len145; _it++) {
                              tok = list_9[_it];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              state_10 = FAstate[b_9][24];
                              if (state_10 !== STATE_FL) {
                                if (request_make(24, b_9, 0)) {
                                  continue;
                                }
                              }
                              list_10 = FAcache[b_9][24];
                              for (_iu = 0, _len146 = list_10.length; _iu < _len146; _iu++) {
                                tok = list_10[_iu];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                state_11 = FAstate[b_10][27];
                                if (state_11 !== STATE_FL) {
                                  if (request_make(27, b_10, 0)) {
                                    continue;
                                  }
                                }
                                list_11 = FAcache[b_10][27];
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 161;
            }
            break;
          case 161:

            /* rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _iv = _ref132 = FAcounter[b_0][204], _ref133 = list_1.length; _iv < _ref133; idx_1 = _iv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_iw = 0, _len147 = list_2.length; _iw < _len147; _iw++) {
                tok = list_2[_iw];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ix = 0, _len148 = list_3.length; _ix < _len148; _ix++) {
                  tok = list_3[_ix];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_iy = 0, _len149 = list_4.length; _iy < _len149; _iy++) {
                    tok = list_4[_iy];
                    if (tok.value !== "[") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][24];
                    for (_iz = 0, _len150 = list_5.length; _iz < _len150; _iz++) {
                      tok = list_5[_iz];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][43];
                      for (_ja = 0, _len151 = list_6.length; _ja < _len151; _ja++) {
                        tok = list_6[_ja];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][24];
                        for (_jb = 0, _len152 = list_7.length; _jb < _len152; _jb++) {
                          tok = list_7[_jb];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][0];
                          for (_jc = 0, _len153 = list_8.length; _jc < _len153; _jc++) {
                            tok = list_8[_jc];
                            if (tok.value !== "]") {
                              continue;
                            }
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            if (b_8 >= length) {
                              node.value_array.pop();
                              continue;
                            }
                            list_9 = FAcache[b_8][0];
                            for (_jd = 0, _len154 = list_9.length; _jd < _len154; _jd++) {
                              tok = list_9[_jd];
                              if (tok.value !== "by") {
                                continue;
                              }
                              b_9 = tok.b;
                              node.value_array.push(tok);
                              if (b_9 >= length) {
                                node.value_array.pop();
                                continue;
                              }
                              list_10 = FAcache[b_9][24];
                              for (_je = 0, _len155 = list_10.length; _je < _len155; _je++) {
                                tok = list_10[_je];
                                b_10 = tok.b;
                                node.value_array.push(tok);
                                if (b_10 >= length) {
                                  node.value_array.pop();
                                  continue;
                                }
                                list_11 = FAcache[b_10][27];
                                for (_jf = 0, _len156 = list_11.length; _jf < _len156; _jf++) {
                                  tok = list_11[_jf];
                                  b_11 = tok.b;
                                  node.value_array.push(tok);
                                  arg_list = node.value_array;
                                  mx_hash_stub = node.mx_hash = {};
                                  mx_hash_stub.rule = "rule_for_Htok_identifier_in_XXX_Hrvalue_Hranger_Hrvalue_XXX_by_Hrvalue_Hblock_ultEfor_range_tiEmacro_eolE1__u125";
                                  mx_hash_stub.hash_key = "stmt";
                                  mx_hash_stub.hash_key_idx = 25;
                                  mx_hash_stub["ult"] = "for_range";
                                  mx_hash_stub["ti"] = "macro";
                                  mx_hash_stub["eol"] = 1;
                                  node.b = node.value_array.last().b;
                                  ret_list.push(node.clone());
                                  node.value_array.pop();
                                }
                                node.value_array.pop();
                              }
                              node.value_array.pop();
                            }
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][204] = list_1.length;
            FAcache[start_pos][160].append(ret_list);
            break;
          case 162:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 queue */
            chk_len = stack.push([162, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jg = _ref134 = FAcounter[b_0][208], _ref135 = list_1.length; _jg < _ref135; idx_1 = _jg += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_jh = 0, _len157 = list_2.length; _jh < _len157; _jh++) {
                tok = list_2[_jh];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_ji = 0, _len158 = list_3.length; _ji < _len158; _ji++) {
                  tok = list_3[_ji];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][24];
                  if (state_4 !== STATE_FL) {
                    if (request_make(24, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][24];
                  for (_jj = 0, _len159 = list_4.length; _jj < _len159; _jj++) {
                    tok = list_4[_jj];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 163;
            }
            break;
          case 163:

            /* rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jk = _ref136 = FAcounter[b_0][213], _ref137 = list_1.length; _jk < _ref137; idx_1 = _jk += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_jl = 0, _len160 = list_2.length; _jl < _len160; _jl++) {
                tok = list_2[_jl];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_jm = 0, _len161 = list_3.length; _jm < _len161; _jm++) {
                  tok = list_3[_jm];
                  if (tok.value !== "in") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][24];
                  for (_jn = 0, _len162 = list_4.length; _jn < _len162; _jn++) {
                    tok = list_4[_jn];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_jo = 0, _len163 = list_5.length; _jo < _len163; _jo++) {
                      tok = list_5[_jo];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_for_Htok_identifier___________________in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u126";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "for_col";
                      mx_hash_stub["ti"] = "macro";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][213] = list_1.length;
            FAcache[start_pos][162].append(ret_list);
            break;
          case 164:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 queue */
            chk_len = stack.push([164, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jp = _ref138 = FAcounter[b_0][219], _ref139 = list_1.length; _jp < _ref139; idx_1 = _jp += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_jq = 0, _len164 = list_2.length; _jq < _len164; _jq++) {
                tok = list_2[_jq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_jr = 0, _len165 = list_3.length; _jr < _len165; _jr++) {
                  tok = list_3[_jr];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][2];
                  if (state_4 !== STATE_FL) {
                    if (request_make(2, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][2];
                  for (_js = 0, _len166 = list_4.length; _js < _len166; _js++) {
                    tok = list_4[_js];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_jt = 0, _len167 = list_5.length; _jt < _len167; _jt++) {
                      tok = list_5[_jt];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][24];
                      if (state_6 !== STATE_FL) {
                        if (request_make(24, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][24];
                      for (_ju = 0, _len168 = list_6.length; _ju < _len168; _ju++) {
                        tok = list_6[_ju];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        state_7 = FAstate[b_6][27];
                        if (state_7 !== STATE_FL) {
                          if (request_make(27, b_6, 0)) {
                            continue;
                          }
                        }
                        list_7 = FAcache[b_6][27];
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 165;
            }
            break;
          case 165:

            /* rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _jv = _ref140 = FAcounter[b_0][226], _ref141 = list_1.length; _jv < _ref141; idx_1 = _jv += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "for") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_jw = 0, _len169 = list_2.length; _jw < _len169; _jw++) {
                tok = list_2[_jw];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_jx = 0, _len170 = list_3.length; _jx < _len170; _jx++) {
                  tok = list_3[_jx];
                  if (tok.value !== ",") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][2];
                  for (_jy = 0, _len171 = list_4.length; _jy < _len171; _jy++) {
                    tok = list_4[_jy];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_jz = 0, _len172 = list_5.length; _jz < _len172; _jz++) {
                      tok = list_5[_jz];
                      if (tok.value !== "in") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][24];
                      for (_ka = 0, _len173 = list_6.length; _ka < _len173; _ka++) {
                        tok = list_6[_ka];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][27];
                        for (_kb = 0, _len174 = list_7.length; _kb < _len174; _kb++) {
                          tok = list_7[_kb];
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_for_Htok_identifier_XXX_Htok_identifier_in_Hrvalue_Hblock_ultEfor_col_tiEmacro_eolE1__u127";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 25;
                          mx_hash_stub["ult"] = "for_col";
                          mx_hash_stub["ti"] = "macro";
                          mx_hash_stub["eol"] = 1;
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][226] = list_1.length;
            FAcache[start_pos][164].append(ret_list);
            break;
          case 166:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 queue */
            chk_len = stack.push([166, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][46];
            if (state_1 !== STATE_FL) {
              if (request_make(46, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][46];
            for (idx_1 = _kc = _ref142 = FAcounter[b_0][228], _ref143 = list_1.length; _kc < _ref143; idx_1 = _kc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _kd = 0; _kd < 1; _i_2 = ++_kd) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ke = 0; _ke < 1; _i_2 = ++_ke) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][24];
                if (state_2 !== STATE_FL) {
                  if (request_make(24, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][24];
                for (_kf = 0, _len175 = list_2.length; _kf < _len175; _kf++) {
                  tok = list_2[_kf];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_kg = 0, _len176 = hyp_list_2.length; _kg < _len176; _kg++) {
                tok_list = hyp_list_2[_kg];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 167;
            }
            break;
          case 167:

            /* rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][46];
            for (idx_1 = _kh = _ref144 = FAcounter[b_0][230], _ref145 = list_1.length; _kh < _ref145; idx_1 = _kh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ki = 0; _ki < 1; _i_2 = ++_ki) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _kj = 0; _kj < 1; _i_2 = ++_kj) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][24];
                for (_kk = 0, _len177 = list_2.length; _kk < _len177; _kk++) {
                  tok = list_2[_kk];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_kl = 0, _len178 = hyp_list_2.length; _kl < _len178; _kl++) {
                tok_list = hyp_list_2[_kl];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hreturn_HrvalueO_ultEreturn_tiEreturn__u132";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "return";
                mx_hash_stub["ti"] = "return";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][230] = list_1.length;
            FAcache[start_pos][166].append(ret_list);
            break;
          case 168:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 queue */
            chk_len = stack.push([168, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _km = _ref146 = FAcounter[b_0][235], _ref147 = list_1.length; _km < _ref147; idx_1 = _km += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_kn = 0, _len179 = list_2.length; _kn < _len179; _kn++) {
                tok = list_2[_kn];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ko = 0; _ko < 1; _i_3 = ++_ko) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _kp = 0; _kp < 1; _i_3 = ++_kp) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_kq = 0, _len180 = list_3.length; _kq < _len180; _kq++) {
                    tok = list_3[_kq];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_kr = 0, _len181 = hyp_list_3.length; _kr < _len181; _kr++) {
                  tok_list = hyp_list_3[_kr];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ks = 0, _len182 = list_4.length; _ks < _len182; _ks++) {
                    tok = list_4[_ks];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_kt = 0, _len183 = list_5.length; _kt < _len183; _kt++) {
                      tok = list_5[_kt];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 169;
            }
            break;
          case 169:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _ku = _ref148 = FAcounter[b_0][242], _ref149 = list_1.length; _ku < _ref149; idx_1 = _ku += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_kv = 0, _len184 = list_2.length; _kv < _len184; _kv++) {
                tok = list_2[_kv];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _kw = 0; _kw < 1; _i_3 = ++_kw) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _kx = 0; _kx < 1; _i_3 = ++_kx) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_ky = 0, _len185 = list_3.length; _ky < _len185; _ky++) {
                    tok = list_3[_ky];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_kz = 0, _len186 = hyp_list_3.length; _kz < _len186; _kz++) {
                  tok_list = hyp_list_3[_kz];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_la = 0, _len187 = list_4.length; _la < _len187; _la++) {
                    tok = list_4[_la];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_lb = 0, _len188 = list_5.length; _lb < _len188; _lb++) {
                      tok = list_5[_lb];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lc = 0, _len189 = list_6.length; _lc < _len189; _lc++) {
                        tok = list_6[_lc];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ld = 0, _len190 = list_7.length; _ld < _len190; _ld++) {
                          tok = list_7[_ld];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          arg_list = node.value_array;
                          mx_hash_stub = node.mx_hash = {};
                          mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_ultEfn_decl__u133";
                          mx_hash_stub.hash_key = "stmt";
                          mx_hash_stub.hash_key_idx = 25;
                          mx_hash_stub["ult"] = "fn_decl";
                          node.b = node.value_array.last().b;
                          ret_list.push(node.clone());
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][242] = list_1.length;
            FAcache[start_pos][168].append(ret_list);
            break;
          case 170:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 queue */
            chk_len = stack.push([170, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _le = _ref150 = FAcounter[b_0][249], _ref151 = list_1.length; _le < _ref151; idx_1 = _le += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lf = 0, _len191 = list_2.length; _lf < _len191; _lf++) {
                tok = list_2[_lf];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _lg = 0; _lg < 1; _i_3 = ++_lg) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lh = 0; _lh < 1; _i_3 = ++_lh) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_li = 0, _len192 = list_3.length; _li < _len192; _li++) {
                    tok = list_3[_li];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lj = 0, _len193 = hyp_list_3.length; _lj < _len193; _lj++) {
                  tok_list = hyp_list_3[_lj];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_lk = 0, _len194 = list_4.length; _lk < _len194; _lk++) {
                    tok = list_4[_lk];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ll = 0, _len195 = list_5.length; _ll < _len195; _ll++) {
                      tok = list_5[_ll];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lm = 0, _len196 = list_6.length; _lm < _len196; _lm++) {
                        tok = list_6[_lm];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ln = 0, _len197 = list_7.length; _ln < _len197; _ln++) {
                          tok = list_7[_ln];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          state_8 = FAstate[b_7][27];
                          if (state_8 !== STATE_FL) {
                            if (request_make(27, b_7, 0)) {
                              continue;
                            }
                          }
                          list_8 = FAcache[b_7][27];
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 171;
            }
            break;
          case 171:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _lo = _ref152 = FAcounter[b_0][257], _ref153 = list_1.length; _lo < _ref153; idx_1 = _lo += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_lp = 0, _len198 = list_2.length; _lp < _len198; _lp++) {
                tok = list_2[_lp];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _lq = 0; _lq < 1; _i_3 = ++_lq) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _lr = 0; _lr < 1; _i_3 = ++_lr) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_ls = 0, _len199 = list_3.length; _ls < _len199; _ls++) {
                    tok = list_3[_ls];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_lt = 0, _len200 = hyp_list_3.length; _lt < _len200; _lt++) {
                  tok_list = hyp_list_3[_lt];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_lu = 0, _len201 = list_4.length; _lu < _len201; _lu++) {
                    tok = list_4[_lu];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_lv = 0, _len202 = list_5.length; _lv < _len202; _lv++) {
                      tok = list_5[_lv];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_lw = 0, _len203 = list_6.length; _lw < _len203; _lw++) {
                        tok = list_6[_lw];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_lx = 0, _len204 = list_7.length; _lx < _len204; _lx++) {
                          tok = list_7[_lx];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][27];
                          for (_ly = 0, _len205 = list_8.length; _ly < _len205; _ly++) {
                            tok = list_8[_ly];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hblock_ultEfn_decl_eolE1__u134";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 25;
                            mx_hash_stub["ult"] = "fn_decl";
                            mx_hash_stub["eol"] = 1;
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][257] = list_1.length;
            FAcache[start_pos][170].append(ret_list);
            break;
          case 172:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 queue */
            chk_len = stack.push([172, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _lz = _ref154 = FAcounter[b_0][264], _ref155 = list_1.length; _lz < _ref155; idx_1 = _lz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ma = 0, _len206 = list_2.length; _ma < _len206; _ma++) {
                tok = list_2[_ma];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _mb = 0; _mb < 1; _i_3 = ++_mb) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mc = 0; _mc < 1; _i_3 = ++_mc) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_md = 0, _len207 = list_3.length; _md < _len207; _md++) {
                    tok = list_3[_md];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_me = 0, _len208 = hyp_list_3.length; _me < _len208; _me++) {
                  tok_list = hyp_list_3[_me];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_mf = 0, _len209 = list_4.length; _mf < _len209; _mf++) {
                    tok = list_4[_mf];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_mg = 0, _len210 = list_5.length; _mg < _len210; _mg++) {
                      tok = list_5[_mg];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][35];
                      if (state_6 !== STATE_FL) {
                        if (request_make(35, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][35];
                      for (_mh = 0, _len211 = list_6.length; _mh < _len211; _mh++) {
                        tok = list_6[_mh];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_mi = 0, _len212 = list_7.length; _mi < _len212; _mi++) {
                          tok = list_7[_mi];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          state_8 = FAstate[b_7][24];
                          if (state_8 !== STATE_FL) {
                            if (request_make(24, b_7, 0)) {
                              continue;
                            }
                          }
                          list_8 = FAcache[b_7][24];
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 173;
            }
            break;
          case 173:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _mj = _ref156 = FAcounter[b_0][272], _ref157 = list_1.length; _mj < _ref157; idx_1 = _mj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_mk = 0, _len213 = list_2.length; _mk < _len213; _mk++) {
                tok = list_2[_mk];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ml = 0; _ml < 1; _i_3 = ++_ml) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mm = 0; _mm < 1; _i_3 = ++_mm) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_mn = 0, _len214 = list_3.length; _mn < _len214; _mn++) {
                    tok = list_3[_mn];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_mo = 0, _len215 = hyp_list_3.length; _mo < _len215; _mo++) {
                  tok_list = hyp_list_3[_mo];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_mp = 0, _len216 = list_4.length; _mp < _len216; _mp++) {
                    tok = list_4[_mp];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_mq = 0, _len217 = list_5.length; _mq < _len217; _mq++) {
                      tok = list_5[_mq];
                      if (tok.value !== ":") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][35];
                      for (_mr = 0, _len218 = list_6.length; _mr < _len218; _mr++) {
                        tok = list_6[_mr];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        if (b_6 >= length) {
                          node.value_array.pop();
                          continue;
                        }
                        list_7 = FAcache[b_6][0];
                        for (_ms = 0, _len219 = list_7.length; _ms < _len219; _ms++) {
                          tok = list_7[_ms];
                          if (tok.value !== "->") {
                            continue;
                          }
                          b_7 = tok.b;
                          node.value_array.push(tok);
                          if (b_7 >= length) {
                            node.value_array.pop();
                            continue;
                          }
                          list_8 = FAcache[b_7][24];
                          for (_mt = 0, _len220 = list_8.length; _mt < _len220; _mt++) {
                            tok = list_8[_mt];
                            b_8 = tok.b;
                            node.value_array.push(tok);
                            arg_list = node.value_array;
                            mx_hash_stub = node.mx_hash = {};
                            mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX_XXX_Htype_XXXX_Hrvalue_ultEfn_decl__u135";
                            mx_hash_stub.hash_key = "stmt";
                            mx_hash_stub.hash_key_idx = 25;
                            mx_hash_stub["ult"] = "fn_decl";
                            node.b = node.value_array.last().b;
                            ret_list.push(node.clone());
                            node.value_array.pop();
                          }
                          node.value_array.pop();
                        }
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][272] = list_1.length;
            FAcache[start_pos][172].append(ret_list);
            break;
          case 174:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 queue */
            chk_len = stack.push([174, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _mu = _ref158 = FAcounter[b_0][275], _ref159 = list_1.length; _mu < _ref159; idx_1 = _mu += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_mv = 0, _len221 = list_2.length; _mv < _len221; _mv++) {
                tok = list_2[_mv];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _mw = 0; _mw < 1; _i_3 = ++_mw) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _mx = 0; _mx < 1; _i_3 = ++_mx) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_my = 0, _len222 = list_3.length; _my < _len222; _my++) {
                    tok = list_3[_my];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_mz = 0, _len223 = hyp_list_3.length; _mz < _len223; _mz++) {
                  tok_list = hyp_list_3[_mz];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 175;
            }
            break;
          case 175:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _na = _ref160 = FAcounter[b_0][280], _ref161 = list_1.length; _na < _ref161; idx_1 = _na += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_nb = 0, _len224 = list_2.length; _nb < _len224; _nb++) {
                tok = list_2[_nb];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nc = 0; _nc < 1; _i_3 = ++_nc) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _nd = 0; _nd < 1; _i_3 = ++_nd) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_ne = 0, _len225 = list_3.length; _ne < _len225; _ne++) {
                    tok = list_3[_ne];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_nf = 0, _len226 = hyp_list_3.length; _nf < _len226; _nf++) {
                  tok_list = hyp_list_3[_nf];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_ng = 0, _len227 = list_4.length; _ng < _len227; _ng++) {
                    tok = list_4[_ng];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_nh = 0, _len228 = list_5.length; _nh < _len228; _nh++) {
                      tok = list_5[_nh];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_ultEfn_decl__u136";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["ult"] = "fn_decl";
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][280] = list_1.length;
            FAcache[start_pos][174].append(ret_list);
            break;
          case 176:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 queue */
            chk_len = stack.push([176, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _ni = _ref162 = FAcounter[b_0][285], _ref163 = list_1.length; _ni < _ref163; idx_1 = _ni += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_nj = 0, _len229 = list_2.length; _nj < _len229; _nj++) {
                tok = list_2[_nj];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _nk = 0; _nk < 1; _i_3 = ++_nk) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _nl = 0; _nl < 1; _i_3 = ++_nl) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_nm = 0, _len230 = list_3.length; _nm < _len230; _nm++) {
                    tok = list_3[_nm];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_nn = 0, _len231 = hyp_list_3.length; _nn < _len231; _nn++) {
                  tok_list = hyp_list_3[_nn];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_no = 0, _len232 = list_4.length; _no < _len232; _no++) {
                    tok = list_4[_no];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_np = 0, _len233 = list_5.length; _np < _len233; _np++) {
                      tok = list_5[_np];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][27];
                      if (state_6 !== STATE_FL) {
                        if (request_make(27, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][27];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 177;
            }
            break;
          case 177:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _nq = _ref164 = FAcounter[b_0][291], _ref165 = list_1.length; _nq < _ref165; idx_1 = _nq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_nr = 0, _len234 = list_2.length; _nr < _len234; _nr++) {
                tok = list_2[_nr];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ns = 0; _ns < 1; _i_3 = ++_ns) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _nt = 0; _nt < 1; _i_3 = ++_nt) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_nu = 0, _len235 = list_3.length; _nu < _len235; _nu++) {
                    tok = list_3[_nu];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_nv = 0, _len236 = hyp_list_3.length; _nv < _len236; _nv++) {
                  tok_list = hyp_list_3[_nv];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_nw = 0, _len237 = list_4.length; _nw < _len237; _nw++) {
                    tok = list_4[_nw];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_nx = 0, _len238 = list_5.length; _nx < _len238; _nx++) {
                      tok = list_5[_nx];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][27];
                      for (_ny = 0, _len239 = list_6.length; _ny < _len239; _ny++) {
                        tok = list_6[_ny];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hblock_ultEfn_decl_eolE1__u137";
                        mx_hash_stub.hash_key = "stmt";
                        mx_hash_stub.hash_key_idx = 25;
                        mx_hash_stub["ult"] = "fn_decl";
                        mx_hash_stub["eol"] = 1;
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][291] = list_1.length;
            FAcache[start_pos][176].append(ret_list);
            break;
          case 178:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 queue */
            chk_len = stack.push([178, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _nz = _ref166 = FAcounter[b_0][296], _ref167 = list_1.length; _nz < _ref167; idx_1 = _nz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_oa = 0, _len240 = list_2.length; _oa < _len240; _oa++) {
                tok = list_2[_oa];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ob = 0; _ob < 1; _i_3 = ++_ob) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _oc = 0; _oc < 1; _i_3 = ++_oc) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][45];
                  if (state_3 !== STATE_FL) {
                    if (request_make(45, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][45];
                  for (_od = 0, _len241 = list_3.length; _od < _len241; _od++) {
                    tok = list_3[_od];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_oe = 0, _len242 = hyp_list_3.length; _oe < _len242; _oe++) {
                  tok_list = hyp_list_3[_oe];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_of = 0, _len243 = list_4.length; _of < _len243; _of++) {
                    tok = list_4[_of];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_og = 0, _len244 = list_5.length; _og < _len244; _og++) {
                      tok = list_5[_og];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_6 = FAstate[b_5][24];
                      if (state_6 !== STATE_FL) {
                        if (request_make(24, b_5, 0)) {
                          continue;
                        }
                      }
                      list_6 = FAcache[b_5][24];
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 179;
            }
            break;
          case 179:

            /* rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _oh = _ref168 = FAcounter[b_0][302], _ref169 = list_1.length; _oh < _ref169; idx_1 = _oh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_oi = 0, _len245 = list_2.length; _oi < _len245; _oi++) {
                tok = list_2[_oi];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _oj = 0; _oj < 1; _i_3 = ++_oj) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ok = 0; _ok < 1; _i_3 = ++_ok) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][45];
                  for (_ol = 0, _len246 = list_3.length; _ol < _len246; _ol++) {
                    tok = list_3[_ol];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_om = 0, _len247 = hyp_list_3.length; _om < _len247; _om++) {
                  tok_list = hyp_list_3[_om];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_on = 0, _len248 = list_4.length; _on < _len248; _on++) {
                    tok = list_4[_on];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_oo = 0, _len249 = list_5.length; _oo < _len249; _oo++) {
                      tok = list_5[_oo];
                      if (tok.value !== "->") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      if (b_5 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_6 = FAcache[b_5][24];
                      for (_op = 0, _len250 = list_6.length; _op < _len250; _op++) {
                        tok = list_6[_op];
                        b_6 = tok.b;
                        node.value_array.push(tok);
                        arg_list = node.value_array;
                        mx_hash_stub = node.mx_hash = {};
                        mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hfn_decl_arg_listO_XXX__XXXX_Hrvalue_ultEfn_decl__u138";
                        mx_hash_stub.hash_key = "stmt";
                        mx_hash_stub.hash_key_idx = 25;
                        mx_hash_stub["ult"] = "fn_decl";
                        node.b = node.value_array.last().b;
                        ret_list.push(node.clone());
                        node.value_array.pop();
                      }
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][302] = list_1.length;
            FAcache[start_pos][178].append(ret_list);
            break;
          case 180:

            /* rule_class_Htok_identifier_ultEclass_decl__u145 queue */
            chk_len = stack.push([180, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _oq = _ref170 = FAcounter[b_0][303], _ref171 = list_1.length; _oq < _ref171; idx_1 = _oq += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 181;
            }
            break;
          case 181:

            /* rule_class_Htok_identifier_ultEclass_decl__u145 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _or = _ref172 = FAcounter[b_0][305], _ref173 = list_1.length; _or < _ref173; idx_1 = _or += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_os = 0, _len251 = list_2.length; _os < _len251; _os++) {
                tok = list_2[_os];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_class_Htok_identifier_ultEclass_decl__u145";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "class_decl";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][305] = list_1.length;
            FAcache[start_pos][180].append(ret_list);
            break;
          case 182:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 queue */
            chk_len = stack.push([182, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ot = _ref174 = FAcounter[b_0][307], _ref175 = list_1.length; _ot < _ref175; idx_1 = _ot += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              for (_ou = 0, _len252 = list_2.length; _ou < _len252; _ou++) {
                tok = list_2[_ou];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 183;
            }
            break;
          case 183:

            /* rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ov = _ref176 = FAcounter[b_0][310], _ref177 = list_1.length; _ov < _ref177; idx_1 = _ov += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "class") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_ow = 0, _len253 = list_2.length; _ow < _len253; _ow++) {
                tok = list_2[_ow];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_ox = 0, _len254 = list_3.length; _ox < _len254; _ox++) {
                  tok = list_3[_ox];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_class_Htok_identifier_Hblock_ultEclass_decl_eolE1__u146";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "class_decl";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][310] = list_1.length;
            FAcache[start_pos][182].append(ret_list);
            break;
          case 184:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 queue */
            chk_len = stack.push([184, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _oy = _ref178 = FAcounter[b_0][311], _ref179 = list_1.length; _oy < _ref179; idx_1 = _oy += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 185;
            }
            break;
          case 185:

            /* rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _oz = _ref180 = FAcounter[b_0][313], _ref181 = list_1.length; _oz < _ref181; idx_1 = _oz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_pa = 0, _len255 = list_2.length; _pa < _len255; _pa++) {
                tok = list_2[_pa];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hlvalue_Hblock_ultEdirective_fn_call_tiEmacro_eolE1__u151";
                mx_hash_stub.hash_key = "stmt";
                mx_hash_stub.hash_key_idx = 25;
                mx_hash_stub["ult"] = "directive_fn_call";
                mx_hash_stub["ti"] = "macro";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][313] = list_1.length;
            FAcache[start_pos][184].append(ret_list);
            break;
          case 186:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 queue */
            chk_len = stack.push([186, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pb = _ref182 = FAcounter[b_0][315], _ref183 = list_1.length; _pb < _ref183; idx_1 = _pb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][47];
              if (state_2 !== STATE_FL) {
                if (request_make(47, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][47];
              for (_pc = 0, _len256 = list_2.length; _pc < _len256; _pc++) {
                tok = list_2[_pc];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 187;
            }
            break;
          case 187:

            /* rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pd = _ref184 = FAcounter[b_0][318], _ref185 = list_1.length; _pd < _ref185; idx_1 = _pd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][47];
              for (_pe = 0, _len257 = list_2.length; _pe < _len257; _pe++) {
                tok = list_2[_pe];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_pf = 0, _len258 = list_3.length; _pf < _len258; _pf++) {
                  tok = list_3[_pf];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(!!arg_list[0].mx_hash.tail_space)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hlvalue_Hfn_call_arg_list_Hblock_ultEdirective_fn_call_tiEmacro_eolE1_XXX1Xtail_space_u152";
                  mx_hash_stub.hash_key = "stmt";
                  mx_hash_stub.hash_key_idx = 25;
                  mx_hash_stub["ult"] = "directive_fn_call";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["eol"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][318] = list_1.length;
            FAcache[start_pos][186].append(ret_list);
            break;
          case 188:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 queue */
            chk_len = stack.push([188, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][26];
            if (state_1 !== STATE_FL) {
              if (request_make(26, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pg = _ref186 = FAcounter[b_0][322], _ref187 = list_1.length; _pg < _ref187; idx_1 = _pg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ph = 0, _len259 = list_2.length; _ph < _len259; _ph++) {
                tok = list_2[_ph];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _pi = 0; _pi < 1; _i_3 = ++_pi) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _pj = 0; _pj < 1; _i_3 = ++_pj) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][47];
                  if (state_3 !== STATE_FL) {
                    if (request_make(47, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][47];
                  for (_pk = 0, _len260 = list_3.length; _pk < _len260; _pk++) {
                    tok = list_3[_pk];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_pl = 0, _len261 = hyp_list_3.length; _pl < _len261; _pl++) {
                  tok_list = hyp_list_3[_pl];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_pm = 0, _len262 = list_4.length; _pm < _len262; _pm++) {
                    tok = list_4[_pm];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_5 = FAstate[b_4][27];
                    if (state_5 !== STATE_FL) {
                      if (request_make(27, b_4, 0)) {
                        continue;
                      }
                    }
                    list_5 = FAcache[b_4][27];
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 189;
            }
            break;
          case 189:

            /* rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][26];
            for (idx_1 = _pn = _ref188 = FAcounter[b_0][327], _ref189 = list_1.length; _pn < _ref189; idx_1 = _pn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_po = 0, _len263 = list_2.length; _po < _len263; _po++) {
                tok = list_2[_po];
                if (tok.value !== "(") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _pp = 0; _pp < 1; _i_3 = ++_pp) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _pq = 0; _pq < 1; _i_3 = ++_pq) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][47];
                  for (_pr = 0, _len264 = list_3.length; _pr < _len264; _pr++) {
                    tok = list_3[_pr];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ps = 0, _len265 = hyp_list_3.length; _ps < _len265; _ps++) {
                  tok_list = hyp_list_3[_ps];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][0];
                  for (_pt = 0, _len266 = list_4.length; _pt < _len266; _pt++) {
                    tok = list_4[_pt];
                    if (tok.value !== ")") {
                      continue;
                    }
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][27];
                    for (_pu = 0, _len267 = list_5.length; _pu < _len267; _pu++) {
                      tok = list_5[_pu];
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      if (!(!arg_list[0].mx_hash.tail_space)) {
                        node.value_array.pop();
                        continue;
                      }
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_Hlvalue_XXX_Hfn_call_arg_listO_XXX_Hblock_priorityEX9000_ultEdirective_fn_call_eolE1_XX1Xtail_space_u153";
                      mx_hash_stub.hash_key = "stmt";
                      mx_hash_stub.hash_key_idx = 25;
                      mx_hash_stub["priority"] = -9000;
                      mx_hash_stub["ult"] = "directive_fn_call";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][327] = list_1.length;
            FAcache[start_pos][188].append(ret_list);
            break;
          case 191:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 queue */
            chk_len = stack.push([191, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 192;
            }
            break;
          case 192:

            /* rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _pv = _ref190 = FAcounter[b_0][328], _ref191 = list_1.length; _pv < _ref191; idx_1 = _pv += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_identifier_priorityEX9000_tail_spaceEX1Xtail_space_ultEid_tiEid__u7";
              mx_hash_stub.hash_key = "lvalue";
              mx_hash_stub.hash_key_idx = 26;
              mx_hash_stub["priority"] = -9000;
              mx_hash_stub["tail_space"] = arg_list[0].mx_hash.tail_space;
              mx_hash_stub["ult"] = "id";
              mx_hash_stub["ti"] = "id";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][328] = list_1.length;
            FAcache[start_pos][191].append(ret_list);
            break;
          case 193:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 queue */
            chk_len = stack.push([193, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _pw = _ref192 = FAcounter[b_0][330], _ref193 = list_1.length; _pw < _ref193; idx_1 = _pw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_px = 0, _len268 = list_2.length; _px < _len268; _px++) {
                tok = list_2[_px];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][2];
                if (state_3 !== STATE_FL) {
                  if (request_make(2, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][2];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 194;
            }
            break;
          case 194:

            /* rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _py = _ref194 = FAcounter[b_0][333], _ref195 = list_1.length; _py < _ref195; idx_1 = _py += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_pz = 0, _len269 = list_2.length; _pz < _len269; _pz++) {
                tok = list_2[_pz];
                if (tok.value !== ".") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][2];
                for (_qa = 0, _len270 = list_3.length; _qa < _len270; _qa++) {
                  tok = list_3[_qa];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(arg_list[0].mx_hash.priority === -9000)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Htok_identifier_priorityEX9000_ultEfield_access_tiEmacro_tail_spaceEHtok_identifierXtail_space_X1XpriorityEEX9000_u91";
                  mx_hash_stub.hash_key = "lvalue";
                  mx_hash_stub.hash_key_idx = 26;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "field_access";
                  mx_hash_stub["ti"] = "macro";
                  mx_hash_stub["tail_space"] = arg_list[2].mx_hash.tail_space;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][333] = list_1.length;
            FAcache[start_pos][193].append(ret_list);
            break;
          case 195:

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 queue */
            chk_len = stack.push([195, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _qb = _ref196 = FAcounter[b_0][334], _ref197 = list_1.length; _qb < _ref197; idx_1 = _qb += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][2];
              if (state_2 !== STATE_FL) {
                if (request_make(2, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][2];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 196;
            }
            break;
          case 196:

            /* rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _qc = _ref198 = FAcounter[b_0][336], _ref199 = list_1.length; _qc < _ref199; idx_1 = _qc += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "@") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][2];
              for (_qd = 0, _len271 = list_2.length; _qd < _len271; _qd++) {
                tok = list_2[_qd];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_XXX_Htok_identifier_priorityEX9000_ultEat_field_access_tiEmacro_tail_spaceEHtok_identifierXtail_space__u93";
                mx_hash_stub.hash_key = "lvalue";
                mx_hash_stub.hash_key_idx = 26;
                mx_hash_stub["priority"] = -9000;
                mx_hash_stub["ult"] = "at_field_access";
                mx_hash_stub["ti"] = "macro";
                mx_hash_stub["tail_space"] = arg_list[1].mx_hash.tail_space;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][336] = list_1.length;
            FAcache[start_pos][195].append(ret_list);
            break;
          case 198:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 queue */
            chk_len = stack.push([198, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][28];
            if (state_1 !== STATE_FL) {
              if (request_make(28, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][28];
            for (idx_1 = _qe = _ref200 = FAcounter[b_0][338], _ref201 = list_1.length; _qe < _ref201; idx_1 = _qe += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][29];
              if (state_2 !== STATE_FL) {
                if (request_make(29, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][29];
              for (_qf = 0, _len272 = list_2.length; _qf < _len272; _qf++) {
                tok = list_2[_qf];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][30];
                if (state_3 !== STATE_FL) {
                  if (request_make(30, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][30];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 199;
            }
            break;
          case 199:

            /* rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][28];
            for (idx_1 = _qg = _ref202 = FAcounter[b_0][341], _ref203 = list_1.length; _qg < _ref203; idx_1 = _qg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][29];
              for (_qh = 0, _len273 = list_2.length; _qh < _len273; _qh++) {
                tok = list_2[_qh];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][30];
                for (_qi = 0, _len274 = list_3.length; _qi < _len274; _qi++) {
                  tok = list_3[_qi];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hindent_Hstmt_plus_Hdedent_priorityEX9000_ultEblock_tiEblock__u6";
                  mx_hash_stub.hash_key = "block";
                  mx_hash_stub.hash_key_idx = 27;
                  mx_hash_stub["priority"] = -9000;
                  mx_hash_stub["ult"] = "block";
                  mx_hash_stub["ti"] = "block";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][341] = list_1.length;
            FAcache[start_pos][198].append(ret_list);
            break;
          case 202:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 queue */
            chk_len = stack.push([202, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 203;
            }
            break;
          case 203:

            /* rule_Hstmt_ultEdeep_scope_tiEpass__u78 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qj = _ref204 = FAcounter[b_0][342], _ref205 = list_1.length; _qj < _ref205; idx_1 = _qj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstmt_ultEdeep_scope_tiEpass__u78";
              mx_hash_stub.hash_key = "stmt_plus";
              mx_hash_stub.hash_key_idx = 29;
              mx_hash_stub["ult"] = "deep_scope";
              mx_hash_stub["ti"] = "pass";
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][342] = list_1.length;
            FAcache[start_pos][202].append(ret_list);
            break;
          case 204:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 queue */
            chk_len = stack.push([204, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qk = _ref206 = FAcounter[b_0][343], _ref207 = list_1.length; _qk < _ref207; idx_1 = _qk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][29];
              if (state_2 !== STATE_FL) {
                if (request_make(29, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][29];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 205;
            }
            break;
          case 205:

            /* rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _ql = _ref208 = FAcounter[b_0][345], _ref209 = list_1.length; _ql < _ref209; idx_1 = _ql += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][29];
              for (_qm = 0, _len275 = list_2.length; _qm < _len275; _qm++) {
                tok = list_2[_qm];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!arg_list[0].mx_hash.eol) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hstmt_Hstmt_plus_ultEdeep_scope_X1Xeol_u79";
                mx_hash_stub.hash_key = "stmt_plus";
                mx_hash_stub.hash_key_idx = 29;
                mx_hash_stub["ult"] = "deep_scope";
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][345] = list_1.length;
            FAcache[start_pos][204].append(ret_list);
            break;
          case 206:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 queue */
            chk_len = stack.push([206, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][25];
            if (state_1 !== STATE_FL) {
              if (request_make(25, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qn = _ref210 = FAcounter[b_0][347], _ref211 = list_1.length; _qn < _ref211; idx_1 = _qn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_qo = 0, _len276 = list_2.length; _qo < _len276; _qo++) {
                tok = list_2[_qo];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][29];
                if (state_3 !== STATE_FL) {
                  if (request_make(29, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][29];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 207;
            }
            break;
          case 207:

            /* rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][25];
            for (idx_1 = _qp = _ref212 = FAcounter[b_0][350], _ref213 = list_1.length; _qp < _ref213; idx_1 = _qp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_qq = 0, _len277 = list_2.length; _qq < _len277; _qq++) {
                tok = list_2[_qq];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][29];
                for (_qr = 0, _len278 = list_3.length; _qr < _len278; _qr++) {
                  tok = list_3[_qr];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstmt_Heol_Hstmt_plus_ultEdeep_scope_tiEstmt_plus_last_eol_passE1__u80";
                  mx_hash_stub.hash_key = "stmt_plus";
                  mx_hash_stub.hash_key_idx = 29;
                  mx_hash_stub["ult"] = "deep_scope";
                  mx_hash_stub["ti"] = "stmt_plus_last";
                  mx_hash_stub["eol_pass"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][350] = list_1.length;
            FAcache[start_pos][206].append(ret_list);
            break;
          case 214:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 queue */
            chk_len = stack.push([214, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _qs = _ref214 = FAcounter[b_0][353], _ref215 = list_1.length; _qs < _ref215; idx_1 = _qs += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _qt = 0; _qt < 1; _i_2 = ++_qt) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _qu = 0; _qu < 1; _i_2 = ++_qu) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][49];
                if (state_2 !== STATE_FL) {
                  if (request_make(49, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][49];
                for (_qv = 0, _len279 = list_2.length; _qv < _len279; _qv++) {
                  tok = list_2[_qv];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_qw = 0, _len280 = hyp_list_2.length; _qw < _len280; _qw++) {
                tok_list = hyp_list_2[_qw];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _qx = 0; _qx < 1; _i_3 = ++_qx) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _qy = 0; _qy < 1; _i_3 = ++_qy) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][52];
                  if (state_3 !== STATE_FL) {
                    if (request_make(52, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][52];
                  for (_qz = 0, _len281 = list_3.length; _qz < _len281; _qz++) {
                    tok = list_3[_qz];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_ra = 0, _len282 = hyp_list_3.length; _ra < _len282; _ra++) {
                  tok_list = hyp_list_3[_ra];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 215;
            }
            break;
          case 215:

            /* rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _rb = _ref216 = FAcounter[b_0][356], _ref217 = list_1.length; _rb < _ref217; idx_1 = _rb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _rc = 0; _rc < 1; _i_2 = ++_rc) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _rd = 0; _rd < 1; _i_2 = ++_rd) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][49];
                for (_re = 0, _len283 = list_2.length; _re < _len283; _re++) {
                  tok = list_2[_re];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_rf = 0, _len284 = hyp_list_2.length; _rf < _len284; _rf++) {
                tok_list = hyp_list_2[_rf];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _rg = 0; _rg < 1; _i_3 = ++_rg) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _rh = 0; _rh < 1; _i_3 = ++_rh) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][52];
                  for (_ri = 0, _len285 = list_3.length; _ri < _len285; _ri++) {
                    tok = list_3[_ri];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_rj = 0, _len286 = hyp_list_3.length; _rj < _len286; _rj++) {
                  tok_list = hyp_list_3[_rj];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_Htype_nestO_Htype_fieldO_ultEtype_name_tiEpass__u162";
                  mx_hash_stub.hash_key = "type";
                  mx_hash_stub.hash_key_idx = 35;
                  mx_hash_stub["ult"] = "type_name";
                  mx_hash_stub["ti"] = "pass";
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][356] = list_1.length;
            FAcache[start_pos][214].append(ret_list);
            break;
          case 217:

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 queue */
            chk_len = stack.push([217, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _rk = _ref218 = FAcounter[b_0][358], _ref219 = list_1.length; _rk < _ref219; idx_1 = _rk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rl = 0, _len287 = list_2.length; _rl < _len287; _rl++) {
                tok = list_2[_rl];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 218;
            }
            break;
          case 218:

            /* rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _rm = _ref220 = FAcounter[b_0][361], _ref221 = list_1.length; _rm < _ref221; idx_1 = _rm += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rn = 0, _len288 = list_2.length; _rn < _len288; _rn++) {
                tok = list_2[_rn];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ro = 0, _len289 = list_3.length; _ro < _len289; _ro++) {
                  tok = list_3[_ro];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Hrvalue_eolEHrvalueXeol__u94";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][361] = list_1.length;
            FAcache[start_pos][217].append(ret_list);
            break;
          case 219:

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 queue */
            chk_len = stack.push([219, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][10];
            if (state_1 !== STATE_FL) {
              if (request_make(10, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][10];
            for (idx_1 = _rp = _ref222 = FAcounter[b_0][363], _ref223 = list_1.length; _rp < _ref223; idx_1 = _rp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rq = 0, _len290 = list_2.length; _rq < _len290; _rq++) {
                tok = list_2[_rq];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 220;
            }
            break;
          case 220:

            /* rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][10];
            for (idx_1 = _rr = _ref224 = FAcounter[b_0][366], _ref225 = list_1.length; _rr < _ref225; idx_1 = _rr += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rs = 0, _len291 = list_2.length; _rs < _len291; _rs++) {
                tok = list_2[_rs];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_rt = 0, _len292 = list_3.length; _rt < _len292; _rt++) {
                  tok = list_3[_rt];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_string_sq_XXX_Hrvalue_eolEHrvalueXeol__u95";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][366] = list_1.length;
            FAcache[start_pos][219].append(ret_list);
            break;
          case 221:

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 queue */
            chk_len = stack.push([221, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][11];
            if (state_1 !== STATE_FL) {
              if (request_make(11, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][11];
            for (idx_1 = _ru = _ref226 = FAcounter[b_0][368], _ref227 = list_1.length; _ru < _ref227; idx_1 = _ru += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rv = 0, _len293 = list_2.length; _rv < _len293; _rv++) {
                tok = list_2[_rv];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 222;
            }
            break;
          case 222:

            /* rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][11];
            for (idx_1 = _rw = _ref228 = FAcounter[b_0][371], _ref229 = list_1.length; _rw < _ref229; idx_1 = _rw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_rx = 0, _len294 = list_2.length; _rx < _len294; _rx++) {
                tok = list_2[_rx];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_ry = 0, _len295 = list_3.length; _ry < _len295; _ry++) {
                  tok = list_3[_ry];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_string_dq_XXX_Hrvalue_eolEHrvalueXeol__u96";
                  mx_hash_stub.hash_key = "struct_init_kv";
                  mx_hash_stub.hash_key_idx = 36;
                  mx_hash_stub["eol"] = arg_list[2].mx_hash.eol;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][371] = list_1.length;
            FAcache[start_pos][221].append(ret_list);
            break;
          case 224:

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 queue */
            chk_len = stack.push([224, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 225;
            }
            break;
          case 225:

            /* rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _rz = _ref230 = FAcounter[b_0][372], _ref231 = list_1.length; _rz < _ref231; idx_1 = _rz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_kv_eolEX1Xeol_struct_init_inlineE1__u97";
              mx_hash_stub.hash_key = "struct_init_list";
              mx_hash_stub.hash_key_idx = 37;
              mx_hash_stub["eol"] = arg_list[0].mx_hash.eol;
              mx_hash_stub["struct_init_inline"] = 1;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][372] = list_1.length;
            FAcache[start_pos][224].append(ret_list);
            break;
          case 226:

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 queue */
            chk_len = stack.push([226, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sa = _ref232 = FAcounter[b_0][373], _ref233 = list_1.length; _sa < _ref233; idx_1 = _sa += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][37];
              if (state_2 !== STATE_FL) {
                if (request_make(37, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][37];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 227;
            }
            break;
          case 227:

            /* rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sb = _ref234 = FAcounter[b_0][375], _ref235 = list_1.length; _sb < _ref235; idx_1 = _sb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][37];
              for (_sc = 0, _len296 = list_2.length; _sc < _len296; _sc++) {
                tok = list_2[_sc];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                if (!arg_list[0].mx_hash.eol) {
                  node.value_array.pop();
                  continue;
                }
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_Hstruct_init_kv_Hstruct_init_list_struct_init_inlineE0_Hstruct_init_kvXeol_u98";
                mx_hash_stub.hash_key = "struct_init_list";
                mx_hash_stub.hash_key_idx = 37;
                mx_hash_stub["struct_init_inline"] = 0;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][375] = list_1.length;
            FAcache[start_pos][226].append(ret_list);
            break;
          case 228:

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 queue */
            chk_len = stack.push([228, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sd = _ref236 = FAcounter[b_0][377], _ref237 = list_1.length; _sd < _ref237; idx_1 = _sd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_se = 0, _len297 = list_2.length; _se < _len297; _se++) {
                tok = list_2[_se];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][37];
                if (state_3 !== STATE_FL) {
                  if (request_make(37, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][37];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 229;
            }
            break;
          case 229:

            /* rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sf = _ref238 = FAcounter[b_0][380], _ref239 = list_1.length; _sf < _ref239; idx_1 = _sf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_sg = 0, _len298 = list_2.length; _sg < _len298; _sg++) {
                tok = list_2[_sg];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][37];
                for (_sh = 0, _len299 = list_3.length; _sh < _len299; _sh++) {
                  tok = list_3[_sh];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstruct_init_kv_Heol_____Hstruct_init_list_struct_init_inlineE0__u99";
                  mx_hash_stub.hash_key = "struct_init_list";
                  mx_hash_stub.hash_key_idx = 37;
                  mx_hash_stub["struct_init_inline"] = 0;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][380] = list_1.length;
            FAcache[start_pos][228].append(ret_list);
            break;
          case 230:

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 queue */
            chk_len = stack.push([230, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _si = _ref240 = FAcounter[b_0][382], _ref241 = list_1.length; _si < _ref241; idx_1 = _si += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sj = 0, _len300 = list_2.length; _sj < _len300; _sj++) {
                tok = list_2[_sj];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][37];
                if (state_3 !== STATE_FL) {
                  if (request_make(37, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][37];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 231;
            }
            break;
          case 231:

            /* rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sk = _ref242 = FAcounter[b_0][385], _ref243 = list_1.length; _sk < _ref243; idx_1 = _sk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sl = 0, _len301 = list_2.length; _sl < _len301; _sl++) {
                tok = list_2[_sl];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][37];
                for (_sm = 0, _len302 = list_3.length; _sm < _len302; _sm++) {
                  tok = list_3[_sm];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hstruct_init_kv_XXX______Hstruct_init_list_struct_init_inlineEHstruct_init_listXstruct_init_inline__u100";
                  mx_hash_stub.hash_key = "struct_init_list";
                  mx_hash_stub.hash_key_idx = 37;
                  mx_hash_stub["struct_init_inline"] = arg_list[2].mx_hash.struct_init_inline;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][385] = list_1.length;
            FAcache[start_pos][230].append(ret_list);
            break;
          case 232:

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 queue */
            chk_len = stack.push([232, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][36];
            if (state_1 !== STATE_FL) {
              if (request_make(36, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sn = _ref244 = FAcounter[b_0][388], _ref245 = list_1.length; _sn < _ref245; idx_1 = _sn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_so = 0, _len303 = list_2.length; _so < _len303; _so++) {
                tok = list_2[_so];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][34];
                if (state_3 !== STATE_FL) {
                  if (request_make(34, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][34];
                for (_sp = 0, _len304 = list_3.length; _sp < _len304; _sp++) {
                  tok = list_3[_sp];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][37];
                  if (state_4 !== STATE_FL) {
                    if (request_make(37, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][37];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 233;
            }
            break;
          case 233:

            /* rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][36];
            for (idx_1 = _sq = _ref246 = FAcounter[b_0][392], _ref247 = list_1.length; _sq < _ref247; idx_1 = _sq += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_sr = 0, _len305 = list_2.length; _sr < _len305; _sr++) {
                tok = list_2[_sr];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_ss = 0, _len306 = list_3.length; _ss < _len306; _ss++) {
                  tok = list_3[_ss];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][37];
                  for (_st = 0, _len307 = list_4.length; _st < _len307; _st++) {
                    tok = list_4[_st];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hstruct_init_kv_XXX_Heol_Hstruct_init_list_struct_init_inlineE0__u101";
                    mx_hash_stub.hash_key = "struct_init_list";
                    mx_hash_stub.hash_key_idx = 37;
                    mx_hash_stub["struct_init_inline"] = 0;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][392] = list_1.length;
            FAcache[start_pos][232].append(ret_list);
            break;
          case 235:

            /* rule_XXX_Hstruct_init_listO_XXX___u102 queue */
            chk_len = stack.push([235, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _su = _ref248 = FAcounter[b_0][394], _ref249 = list_1.length; _su < _ref249; idx_1 = _su += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _sv = 0; _sv < 1; _i_2 = ++_sv) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _sw = 0; _sw < 1; _i_2 = ++_sw) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][37];
                if (state_2 !== STATE_FL) {
                  if (request_make(37, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][37];
                for (_sx = 0, _len308 = list_2.length; _sx < _len308; _sx++) {
                  tok = list_2[_sx];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_sy = 0, _len309 = hyp_list_2.length; _sy < _len309; _sy++) {
                tok_list = hyp_list_2[_sy];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 236;
            }
            break;
          case 236:

            /* rule_XXX_Hstruct_init_listO_XXX___u102 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _sz = _ref250 = FAcounter[b_0][397], _ref251 = list_1.length; _sz < _ref251; idx_1 = _sz += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ta = 0; _ta < 1; _i_2 = ++_ta) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _tb = 0; _tb < 1; _i_2 = ++_tb) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][37];
                for (_tc = 0, _len310 = list_2.length; _tc < _len310; _tc++) {
                  tok = list_2[_tc];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_td = 0, _len311 = hyp_list_2.length; _td < _len311; _td++) {
                tok_list = hyp_list_2[_td];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_te = 0, _len312 = list_3.length; _te < _len312; _te++) {
                  tok = list_3[_te];
                  if (tok.value !== "}") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Hstruct_init_listO_XXX___u102";
                  mx_hash_stub.hash_key = "struct_init";
                  mx_hash_stub.hash_key_idx = 38;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][397] = list_1.length;
            FAcache[start_pos][235].append(ret_list);
            break;
          case 237:

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 queue */
            chk_len = stack.push([237, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _tf = _ref252 = FAcounter[b_0][400], _ref253 = list_1.length; _tf < _ref253; idx_1 = _tf += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][28];
              if (state_2 !== STATE_FL) {
                if (request_make(28, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][28];
              for (_tg = 0, _len313 = list_2.length; _tg < _len313; _tg++) {
                tok = list_2[_tg];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _th = 0; _th < 1; _i_3 = ++_th) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _ti = 0; _ti < 1; _i_3 = ++_ti) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][37];
                  if (state_3 !== STATE_FL) {
                    if (request_make(37, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][37];
                  for (_tj = 0, _len314 = list_3.length; _tj < _len314; _tj++) {
                    tok = list_3[_tj];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_tk = 0, _len315 = hyp_list_3.length; _tk < _len315; _tk++) {
                  tok_list = hyp_list_3[_tk];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][30];
                  if (state_4 !== STATE_FL) {
                    if (request_make(30, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][30];
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 238;
            }
            break;
          case 238:

            /* rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _tl = _ref254 = FAcounter[b_0][405], _ref255 = list_1.length; _tl < _ref255; idx_1 = _tl += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_tm = 0, _len316 = list_2.length; _tm < _len316; _tm++) {
                tok = list_2[_tm];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _tn = 0; _tn < 1; _i_3 = ++_tn) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _to = 0; _to < 1; _i_3 = ++_to) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][37];
                  for (_tp = 0, _len317 = list_3.length; _tp < _len317; _tp++) {
                    tok = list_3[_tp];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_tq = 0, _len318 = hyp_list_3.length; _tq < _len318; _tq++) {
                  tok_list = hyp_list_3[_tq];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][30];
                  for (_tr = 0, _len319 = list_4.length; _tr < _len319; _tr++) {
                    tok = list_4[_tr];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_ts = 0, _len320 = list_5.length; _ts < _len320; _ts++) {
                      tok = list_5[_ts];
                      if (tok.value !== "}") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hindent_Hstruct_init_listO_Hdedent_XXX___u103";
                      mx_hash_stub.hash_key = "struct_init";
                      mx_hash_stub.hash_key_idx = 38;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][405] = list_1.length;
            FAcache[start_pos][237].append(ret_list);
            break;
          case 239:

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 queue */
            chk_len = stack.push([239, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][28];
            if (state_1 !== STATE_FL) {
              if (request_make(28, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][28];
            for (idx_1 = _tt = _ref256 = FAcounter[b_0][407], _ref257 = list_1.length; _tt < _ref257; idx_1 = _tt += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][37];
              if (state_2 !== STATE_FL) {
                if (request_make(37, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][37];
              for (_tu = 0, _len321 = list_2.length; _tu < _len321; _tu++) {
                tok = list_2[_tu];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][30];
                if (state_3 !== STATE_FL) {
                  if (request_make(30, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][30];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 240;
            }
            break;
          case 240:

            /* rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][28];
            for (idx_1 = _tv = _ref258 = FAcounter[b_0][410], _ref259 = list_1.length; _tv < _ref259; idx_1 = _tv += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][37];
              for (_tw = 0, _len322 = list_2.length; _tw < _len322; _tw++) {
                tok = list_2[_tw];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][30];
                for (_tx = 0, _len323 = list_3.length; _tx < _len323; _tx++) {
                  tok = list_3[_tx];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hindent_Hstruct_init_list_Hdedent_bracketless_hashE1__u105";
                  mx_hash_stub.hash_key = "struct_init";
                  mx_hash_stub.hash_key_idx = 38;
                  mx_hash_stub["bracketless_hash"] = 1;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][410] = list_1.length;
            FAcache[start_pos][239].append(ret_list);
            break;
          case 241:

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 queue */
            chk_len = stack.push([241, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][37];
            if (state_1 !== STATE_FL) {
              if (request_make(37, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][37];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 242;
            }
            break;
          case 242:

            /* rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][37];
            for (idx_1 = _ty = _ref260 = FAcounter[b_0][411], _ref261 = list_1.length; _ty < _ref261; idx_1 = _ty += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              if (!arg_list[0].mx_hash.struct_init_inline) {
                node.value_array.pop();
                continue;
              }
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hstruct_init_list_bracketless_hashE1_X1Xstruct_init_inline_u106";
              mx_hash_stub.hash_key = "struct_init";
              mx_hash_stub.hash_key_idx = 38;
              mx_hash_stub["bracketless_hash"] = 1;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][411] = list_1.length;
            FAcache[start_pos][241].append(ret_list);
            break;
          case 244:

            /* rule_Hrvalue___u107 queue */
            chk_len = stack.push([244, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 245;
            }
            break;
          case 245:

            /* rule_Hrvalue___u107 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _tz = _ref262 = FAcounter[b_0][412], _ref263 = list_1.length; _tz < _ref263; idx_1 = _tz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue___u107";
              mx_hash_stub.hash_key = "array_init_list";
              mx_hash_stub.hash_key_idx = 39;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][412] = list_1.length;
            FAcache[start_pos][244].append(ret_list);
            break;
          case 246:

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 queue */
            chk_len = stack.push([246, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _ua = _ref264 = FAcounter[b_0][414], _ref265 = list_1.length; _ua < _ref265; idx_1 = _ua += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][34];
              if (state_2 !== STATE_FL) {
                if (request_make(34, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][34];
              for (_ub = 0, _len324 = list_2.length; _ub < _len324; _ub++) {
                tok = list_2[_ub];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][39];
                if (state_3 !== STATE_FL) {
                  if (request_make(39, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][39];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 247;
            }
            break;
          case 247:

            /* rule_Hrvalue_Heol_____Harray_init_list___u108 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uc = _ref266 = FAcounter[b_0][417], _ref267 = list_1.length; _uc < _ref267; idx_1 = _uc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][34];
              for (_ud = 0, _len325 = list_2.length; _ud < _len325; _ud++) {
                tok = list_2[_ud];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                for (_ue = 0, _len326 = list_3.length; _ue < _len326; _ue++) {
                  tok = list_3[_ue];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_Heol_____Harray_init_list___u108";
                  mx_hash_stub.hash_key = "array_init_list";
                  mx_hash_stub.hash_key_idx = 39;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][417] = list_1.length;
            FAcache[start_pos][246].append(ret_list);
            break;
          case 248:

            /* rule_Hrvalue_XXX______Harray_init_list___u109 queue */
            chk_len = stack.push([248, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uf = _ref268 = FAcounter[b_0][419], _ref269 = list_1.length; _uf < _ref269; idx_1 = _uf += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ug = 0, _len327 = list_2.length; _ug < _len327; _ug++) {
                tok = list_2[_ug];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][39];
                if (state_3 !== STATE_FL) {
                  if (request_make(39, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][39];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 249;
            }
            break;
          case 249:

            /* rule_Hrvalue_XXX______Harray_init_list___u109 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uh = _ref270 = FAcounter[b_0][422], _ref271 = list_1.length; _uh < _ref271; idx_1 = _uh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ui = 0, _len328 = list_2.length; _ui < _len328; _ui++) {
                tok = list_2[_ui];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][39];
                for (_uj = 0, _len329 = list_3.length; _uj < _len329; _uj++) {
                  tok = list_3[_uj];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX______Harray_init_list___u109";
                  mx_hash_stub.hash_key = "array_init_list";
                  mx_hash_stub.hash_key_idx = 39;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][422] = list_1.length;
            FAcache[start_pos][248].append(ret_list);
            break;
          case 250:

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 queue */
            chk_len = stack.push([250, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _uk = _ref272 = FAcounter[b_0][425], _ref273 = list_1.length; _uk < _ref273; idx_1 = _uk += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ul = 0, _len330 = list_2.length; _ul < _len330; _ul++) {
                tok = list_2[_ul];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][34];
                if (state_3 !== STATE_FL) {
                  if (request_make(34, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][34];
                for (_um = 0, _len331 = list_3.length; _um < _len331; _um++) {
                  tok = list_3[_um];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][39];
                  if (state_4 !== STATE_FL) {
                    if (request_make(39, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][39];
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 251;
            }
            break;
          case 251:

            /* rule_Hrvalue_XXX_Heol_Harray_init_list___u110 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _un = _ref274 = FAcounter[b_0][429], _ref275 = list_1.length; _un < _ref275; idx_1 = _un += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_uo = 0, _len332 = list_2.length; _uo < _len332; _uo++) {
                tok = list_2[_uo];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][34];
                for (_up = 0, _len333 = list_3.length; _up < _len333; _up++) {
                  tok = list_3[_up];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][39];
                  for (_uq = 0, _len334 = list_4.length; _uq < _len334; _uq++) {
                    tok = list_4[_uq];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_Hrvalue_XXX_Heol_Harray_init_list___u110";
                    mx_hash_stub.hash_key = "array_init_list";
                    mx_hash_stub.hash_key_idx = 39;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][429] = list_1.length;
            FAcache[start_pos][250].append(ret_list);
            break;
          case 253:

            /* rule_XXX_Harray_init_listO_XXX___u111 queue */
            chk_len = stack.push([253, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ur = _ref276 = FAcounter[b_0][431], _ref277 = list_1.length; _ur < _ref277; idx_1 = _ur += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _us = 0; _us < 1; _i_2 = ++_us) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _ut = 0; _ut < 1; _i_2 = ++_ut) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][39];
                if (state_2 !== STATE_FL) {
                  if (request_make(39, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][39];
                for (_uu = 0, _len335 = list_2.length; _uu < _len335; _uu++) {
                  tok = list_2[_uu];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_uv = 0, _len336 = hyp_list_2.length; _uv < _len336; _uv++) {
                tok_list = hyp_list_2[_uv];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 254;
            }
            break;
          case 254:

            /* rule_XXX_Harray_init_listO_XXX___u111 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _uw = _ref278 = FAcounter[b_0][434], _ref279 = list_1.length; _uw < _ref279; idx_1 = _uw += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _ux = 0; _ux < 1; _i_2 = ++_ux) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _uy = 0; _uy < 1; _i_2 = ++_uy) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][39];
                for (_uz = 0, _len337 = list_2.length; _uz < _len337; _uz++) {
                  tok = list_2[_uz];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_va = 0, _len338 = hyp_list_2.length; _va < _len338; _va++) {
                tok_list = hyp_list_2[_va];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_vb = 0, _len339 = list_3.length; _vb < _len339; _vb++) {
                  tok = list_3[_vb];
                  if (tok.value !== "]") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Harray_init_listO_XXX___u111";
                  mx_hash_stub.hash_key = "array_init";
                  mx_hash_stub.hash_key_idx = 40;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][434] = list_1.length;
            FAcache[start_pos][253].append(ret_list);
            break;
          case 255:

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 queue */
            chk_len = stack.push([255, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vc = _ref280 = FAcounter[b_0][437], _ref281 = list_1.length; _vc < _ref281; idx_1 = _vc += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][28];
              if (state_2 !== STATE_FL) {
                if (request_make(28, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][28];
              for (_vd = 0, _len340 = list_2.length; _vd < _len340; _vd++) {
                tok = list_2[_vd];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _ve = 0; _ve < 1; _i_3 = ++_ve) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _vf = 0; _vf < 1; _i_3 = ++_vf) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_3 = FAstate[b_2][39];
                  if (state_3 !== STATE_FL) {
                    if (request_make(39, b_2, 0)) {
                      continue;
                    }
                  }
                  list_3 = FAcache[b_2][39];
                  for (_vg = 0, _len341 = list_3.length; _vg < _len341; _vg++) {
                    tok = list_3[_vg];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_vh = 0, _len342 = hyp_list_3.length; _vh < _len342; _vh++) {
                  tok_list = hyp_list_3[_vh];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][30];
                  if (state_4 !== STATE_FL) {
                    if (request_make(30, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][30];
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 256;
            }
            break;
          case 256:

            /* rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vi = _ref282 = FAcounter[b_0][442], _ref283 = list_1.length; _vi < _ref283; idx_1 = _vi += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "[") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][28];
              for (_vj = 0, _len343 = list_2.length; _vj < _len343; _vj++) {
                tok = list_2[_vj];
                b_2 = tok.b;
                node.value_array.push(tok);
                hyp_list_3 = [];
                old_node = node;
                node = this.proxy;
                for (_i_3 = _vk = 0; _vk < 1; _i_3 = ++_vk) {

                  /* NOPE */
                  hyp_list_3.push(node.value_array.clone());
                }
                for (_i_3 = _vl = 0; _vl < 1; _i_3 = ++_vl) {
                  if (b_2 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_3 = FAcache[b_2][39];
                  for (_vm = 0, _len344 = list_3.length; _vm < _len344; _vm++) {
                    tok = list_3[_vm];
                    b_3 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_3.push(node.value_array.clone());
                    node.value_array.pop();
                  }
                }
                node = old_node;
                for (_vn = 0, _len345 = hyp_list_3.length; _vn < _len345; _vn++) {
                  tok_list = hyp_list_3[_vn];
                  node.value_array.append(tok_list);
                  b_3 = node.value_array.last().b;
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][30];
                  for (_vo = 0, _len346 = list_4.length; _vo < _len346; _vo++) {
                    tok = list_4[_vo];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    if (b_4 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_5 = FAcache[b_4][0];
                    for (_vp = 0, _len347 = list_5.length; _vp < _len347; _vp++) {
                      tok = list_5[_vp];
                      if (tok.value !== "]") {
                        continue;
                      }
                      b_5 = tok.b;
                      node.value_array.push(tok);
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_XXX_Hindent_Harray_init_listO_Hdedent_XXX___u112";
                      mx_hash_stub.hash_key = "array_init";
                      mx_hash_stub.hash_key_idx = 40;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.pop();
                    }
                    node.value_array.pop();
                  }
                  node.value_array.length -= tok_list.length;
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][442] = list_1.length;
            FAcache[start_pos][255].append(ret_list);
            break;
          case 258:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 queue */
            chk_len = stack.push([258, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vq = _ref284 = FAcounter[b_0][447], _ref285 = list_1.length; _vq < _ref285; idx_1 = _vq += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_vr = 0, _len348 = list_2.length; _vr < _len348; _vr++) {
                tok = list_2[_vr];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][24];
                if (state_3 !== STATE_FL) {
                  if (request_make(24, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][24];
                for (_vs = 0, _len349 = list_3.length; _vs < _len349; _vs++) {
                  tok = list_3[_vs];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  state_4 = FAstate[b_3][27];
                  if (state_4 !== STATE_FL) {
                    if (request_make(27, b_3, 0)) {
                      continue;
                    }
                  }
                  list_4 = FAcache[b_3][27];
                  for (_vt = 0, _len350 = list_4.length; _vt < _len350; _vt++) {
                    tok = list_4[_vt];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _vu = 0; _vu < 1; _i_5 = ++_vu) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _vv = 0; _vv < 1; _i_5 = ++_vv) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      state_5 = FAstate[b_4][41];
                      if (state_5 !== STATE_FL) {
                        if (request_make(41, b_4, 0)) {
                          continue;
                        }
                      }
                      list_5 = FAcache[b_4][41];
                      for (_vw = 0, _len351 = list_5.length; _vw < _len351; _vw++) {
                        tok = list_5[_vw];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_vx = 0, _len352 = hyp_list_5.length; _vx < _len352; _vx++) {
                      tok_list = hyp_list_5[_vx];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 259;
            }
            break;
          case 259:

            /* rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _vy = _ref286 = FAcounter[b_0][452], _ref287 = list_1.length; _vy < _ref287; idx_1 = _vy += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_vz = 0, _len353 = list_2.length; _vz < _len353; _vz++) {
                tok = list_2[_vz];
                if (tok.value !== "if") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][24];
                for (_wa = 0, _len354 = list_3.length; _wa < _len354; _wa++) {
                  tok = list_3[_wa];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  if (b_3 >= length) {
                    node.value_array.pop();
                    continue;
                  }
                  list_4 = FAcache[b_3][27];
                  for (_wb = 0, _len355 = list_4.length; _wb < _len355; _wb++) {
                    tok = list_4[_wb];
                    b_4 = tok.b;
                    node.value_array.push(tok);
                    hyp_list_5 = [];
                    old_node = node;
                    node = this.proxy;
                    for (_i_5 = _wc = 0; _wc < 1; _i_5 = ++_wc) {

                      /* NOPE */
                      hyp_list_5.push(node.value_array.clone());
                    }
                    for (_i_5 = _wd = 0; _wd < 1; _i_5 = ++_wd) {
                      if (b_4 >= length) {
                        node.value_array.pop();
                        continue;
                      }
                      list_5 = FAcache[b_4][41];
                      for (_we = 0, _len356 = list_5.length; _we < _len356; _we++) {
                        tok = list_5[_we];
                        b_5 = tok.b;
                        node.value_array.push(tok);
                        hyp_list_5.push(node.value_array.clone());
                        node.value_array.pop();
                      }
                    }
                    node = old_node;
                    for (_wf = 0, _len357 = hyp_list_5.length; _wf < _len357; _wf++) {
                      tok_list = hyp_list_5[_wf];
                      node.value_array.append(tok_list);
                      b_5 = node.value_array.last().b;
                      arg_list = node.value_array;
                      mx_hash_stub = node.mx_hash = {};
                      mx_hash_stub.rule = "rule_else_if_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u115";
                      mx_hash_stub.hash_key = "if_tail_stmt";
                      mx_hash_stub.hash_key_idx = 41;
                      mx_hash_stub["ult"] = "else_if";
                      mx_hash_stub["ti"] = "else_if";
                      mx_hash_stub["eol"] = 1;
                      node.b = node.value_array.last().b;
                      ret_list.push(node.clone());
                      node.value_array.length -= tok_list.length;
                    }
                    node.value_array.pop();
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][452] = list_1.length;
            FAcache[start_pos][258].append(ret_list);
            break;
          case 260:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 queue */
            chk_len = stack.push([260, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wg = _ref288 = FAcounter[b_0][456], _ref289 = list_1.length; _wg < _ref289; idx_1 = _wg += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wh = _ref290 = FAcounter[b_0][457], _ref291 = list_1.length; _wh < _ref291; idx_1 = _wh += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wi = _ref292 = FAcounter[b_0][458], _ref293 = list_1.length; _wi < _ref293; idx_1 = _wi += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            node = old_node;
            for (_wj = 0, _len358 = hyp_list_1.length; _wj < _len358; _wj++) {
              tok_list = hyp_list_1[_wj];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_wk = 0, _len359 = list_2.length; _wk < _len359; _wk++) {
                tok = list_2[_wk];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_wl = 0, _len360 = list_3.length; _wl < _len360; _wl++) {
                  tok = list_3[_wl];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _wm = 0; _wm < 1; _i_4 = ++_wm) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _wn = 0; _wn < 1; _i_4 = ++_wn) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][41];
                    if (state_4 !== STATE_FL) {
                      if (request_make(41, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][41];
                    for (_wo = 0, _len361 = list_4.length; _wo < _len361; _wo++) {
                      tok = list_4[_wo];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_wp = 0, _len362 = hyp_list_4.length; _wp < _len362; _wp++) {
                    tok_list = hyp_list_4[_wp];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 261;
            }
            break;
          case 261:

            /* rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            hyp_list_1 = [];
            old_node = node;
            node = this.proxy;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wq = _ref294 = FAcounter[b_0][462], _ref295 = list_1.length; _wq < _ref295; idx_1 = _wq += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elseif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][462] = list_1.length;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _wr = _ref296 = FAcounter[b_0][463], _ref297 = list_1.length; _wr < _ref297; idx_1 = _wr += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elsif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][463] = list_1.length;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ws = _ref298 = FAcounter[b_0][464], _ref299 = list_1.length; _ws < _ref299; idx_1 = _ws += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "elif") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_1.push(node.value_array.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][464] = list_1.length;
            node = old_node;
            for (_wt = 0, _len363 = hyp_list_1.length; _wt < _len363; _wt++) {
              tok_list = hyp_list_1[_wt];
              node.value_array.append(tok_list);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_wu = 0, _len364 = list_2.length; _wu < _len364; _wu++) {
                tok = list_2[_wu];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_wv = 0, _len365 = list_3.length; _wv < _len365; _wv++) {
                  tok = list_3[_wv];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _ww = 0; _ww < 1; _i_4 = ++_ww) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _wx = 0; _wx < 1; _i_4 = ++_wx) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][41];
                    for (_wy = 0, _len366 = list_4.length; _wy < _len366; _wy++) {
                      tok = list_4[_wy];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_wz = 0, _len367 = hyp_list_4.length; _wz < _len367; _wz++) {
                    tok_list = hyp_list_4[_wz];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_elseifXelsifXelif_Hrvalue_Hblock_Hif_tail_stmtO_ultEelse_if_tiEelse_if_eolE1__u116";
                    mx_hash_stub.hash_key = "if_tail_stmt";
                    mx_hash_stub.hash_key_idx = 41;
                    mx_hash_stub["ult"] = "else_if";
                    mx_hash_stub["ti"] = "else_if";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.length -= tok_list.length;
            }
            FAcache[start_pos][260].append(ret_list);
            break;
          case 262:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 queue */
            chk_len = stack.push([262, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xa = _ref300 = FAcounter[b_0][465], _ref301 = list_1.length; _xa < _ref301; idx_1 = _xa += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 263;
            }
            break;
          case 263:

            /* rule_else_Hblock_ultEelse_tiEelse_eolE1__u117 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xb = _ref302 = FAcounter[b_0][467], _ref303 = list_1.length; _xb < _ref303; idx_1 = _xb += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_xc = 0, _len368 = list_2.length; _xc < _len368; _xc++) {
                tok = list_2[_xc];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEelse_tiEelse_eolE1__u117";
                mx_hash_stub.hash_key = "if_tail_stmt";
                mx_hash_stub.hash_key_idx = 41;
                mx_hash_stub["ult"] = "else";
                mx_hash_stub["ti"] = "else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][467] = list_1.length;
            FAcache[start_pos][262].append(ret_list);
            break;
          case 265:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 queue */
            chk_len = stack.push([265, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xd = _ref304 = FAcounter[b_0][471], _ref305 = list_1.length; _xd < _ref305; idx_1 = _xd += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][24];
              if (state_2 !== STATE_FL) {
                if (request_make(24, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][24];
              for (_xe = 0, _len369 = list_2.length; _xe < _len369; _xe++) {
                tok = list_2[_xe];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][27];
                if (state_3 !== STATE_FL) {
                  if (request_make(27, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][27];
                for (_xf = 0, _len370 = list_3.length; _xf < _len370; _xf++) {
                  tok = list_3[_xf];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _xg = 0; _xg < 1; _i_4 = ++_xg) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _xh = 0; _xh < 1; _i_4 = ++_xh) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    state_4 = FAstate[b_3][42];
                    if (state_4 !== STATE_FL) {
                      if (request_make(42, b_3, 0)) {
                        continue;
                      }
                    }
                    list_4 = FAcache[b_3][42];
                    for (_xi = 0, _len371 = list_4.length; _xi < _len371; _xi++) {
                      tok = list_4[_xi];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_xj = 0, _len372 = hyp_list_4.length; _xj < _len372; _xj++) {
                    tok_list = hyp_list_4[_xj];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 266;
            }
            break;
          case 266:

            /* rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xk = _ref306 = FAcounter[b_0][475], _ref307 = list_1.length; _xk < _ref307; idx_1 = _xk += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "when") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][24];
              for (_xl = 0, _len373 = list_2.length; _xl < _len373; _xl++) {
                tok = list_2[_xl];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][27];
                for (_xm = 0, _len374 = list_3.length; _xm < _len374; _xm++) {
                  tok = list_3[_xm];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_4 = [];
                  old_node = node;
                  node = this.proxy;
                  for (_i_4 = _xn = 0; _xn < 1; _i_4 = ++_xn) {

                    /* NOPE */
                    hyp_list_4.push(node.value_array.clone());
                  }
                  for (_i_4 = _xo = 0; _xo < 1; _i_4 = ++_xo) {
                    if (b_3 >= length) {
                      node.value_array.pop();
                      continue;
                    }
                    list_4 = FAcache[b_3][42];
                    for (_xp = 0, _len375 = list_4.length; _xp < _len375; _xp++) {
                      tok = list_4[_xp];
                      b_4 = tok.b;
                      node.value_array.push(tok);
                      hyp_list_4.push(node.value_array.clone());
                      node.value_array.pop();
                    }
                  }
                  node = old_node;
                  for (_xq = 0, _len376 = hyp_list_4.length; _xq < _len376; _xq++) {
                    tok_list = hyp_list_4[_xq];
                    node.value_array.append(tok_list);
                    b_4 = node.value_array.last().b;
                    arg_list = node.value_array;
                    mx_hash_stub = node.mx_hash = {};
                    mx_hash_stub.rule = "rule_when_Hrvalue_Hblock_Hswitch_tail_stmtO_ultEswitch_when_tiEswitch_when_eolE1__u120";
                    mx_hash_stub.hash_key = "switch_tail_stmt";
                    mx_hash_stub.hash_key_idx = 42;
                    mx_hash_stub["ult"] = "switch_when";
                    mx_hash_stub["ti"] = "switch_when";
                    mx_hash_stub["eol"] = 1;
                    node.b = node.value_array.last().b;
                    ret_list.push(node.clone());
                    node.value_array.length -= tok_list.length;
                  }
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][475] = list_1.length;
            FAcache[start_pos][265].append(ret_list);
            break;
          case 267:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 queue */
            chk_len = stack.push([267, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xr = _ref308 = FAcounter[b_0][476], _ref309 = list_1.length; _xr < _ref309; idx_1 = _xr += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][27];
              if (state_2 !== STATE_FL) {
                if (request_make(27, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][27];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 268;
            }
            break;
          case 268:

            /* rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _xs = _ref310 = FAcounter[b_0][478], _ref311 = list_1.length; _xs < _ref311; idx_1 = _xs += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "else") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][27];
              for (_xt = 0, _len377 = list_2.length; _xt < _len377; _xt++) {
                tok = list_2[_xt];
                b_2 = tok.b;
                node.value_array.push(tok);
                arg_list = node.value_array;
                mx_hash_stub = node.mx_hash = {};
                mx_hash_stub.rule = "rule_else_Hblock_ultEswitch_else_tiEswitch_else_eolE1__u121";
                mx_hash_stub.hash_key = "switch_tail_stmt";
                mx_hash_stub.hash_key_idx = 42;
                mx_hash_stub["ult"] = "switch_else";
                mx_hash_stub["ti"] = "switch_else";
                mx_hash_stub["eol"] = 1;
                node.b = node.value_array.last().b;
                ret_list.push(node.clone());
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][478] = list_1.length;
            FAcache[start_pos][267].append(ret_list);
            break;
          case 271:

            /* rule_Htok_identifier_XXX_Htype___u128 queue */
            chk_len = stack.push([271, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _xu = _ref312 = FAcounter[b_0][480], _ref313 = list_1.length; _xu < _ref313; idx_1 = _xu += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_xv = 0, _len378 = list_2.length; _xv < _len378; _xv++) {
                tok = list_2[_xv];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][35];
                if (state_3 !== STATE_FL) {
                  if (request_make(35, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][35];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 272;
            }
            break;
          case 272:

            /* rule_Htok_identifier_XXX_Htype___u128 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _xw = _ref314 = FAcounter[b_0][483], _ref315 = list_1.length; _xw < _ref315; idx_1 = _xw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_xx = 0, _len379 = list_2.length; _xx < _len379; _xx++) {
                tok = list_2[_xx];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][35];
                for (_xy = 0, _len380 = list_3.length; _xy < _len380; _xy++) {
                  tok = list_3[_xy];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u128";
                  mx_hash_stub.hash_key = "fn_decl_arg";
                  mx_hash_stub.hash_key_idx = 44;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][483] = list_1.length;
            FAcache[start_pos][271].append(ret_list);
            break;
          case 273:

            /* rule_Htok_identifier___u129 queue */
            chk_len = stack.push([273, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 274;
            }
            break;
          case 274:

            /* rule_Htok_identifier___u129 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _xz = _ref316 = FAcounter[b_0][484], _ref317 = list_1.length; _xz < _ref317; idx_1 = _xz += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htok_identifier___u129";
              mx_hash_stub.hash_key = "fn_decl_arg";
              mx_hash_stub.hash_key_idx = 44;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][484] = list_1.length;
            FAcache[start_pos][273].append(ret_list);
            break;
          case 276:

            /* rule_Hfn_decl_arg___u130 queue */
            chk_len = stack.push([276, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][44];
            if (state_1 !== STATE_FL) {
              if (request_make(44, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][44];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 277;
            }
            break;
          case 277:

            /* rule_Hfn_decl_arg___u130 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (idx_1 = _ya = _ref318 = FAcounter[b_0][485], _ref319 = list_1.length; _ya < _ref319; idx_1 = _ya += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hfn_decl_arg___u130";
              mx_hash_stub.hash_key = "fn_decl_arg_list";
              mx_hash_stub.hash_key_idx = 45;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][485] = list_1.length;
            FAcache[start_pos][276].append(ret_list);
            break;
          case 278:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 queue */
            chk_len = stack.push([278, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][44];
            if (state_1 !== STATE_FL) {
              if (request_make(44, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][44];
            for (idx_1 = _yb = _ref320 = FAcounter[b_0][487], _ref321 = list_1.length; _yb < _ref321; idx_1 = _yb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yc = 0, _len381 = list_2.length; _yc < _len381; _yc++) {
                tok = list_2[_yc];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][45];
                if (state_3 !== STATE_FL) {
                  if (request_make(45, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][45];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 279;
            }
            break;
          case 279:

            /* rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][44];
            for (idx_1 = _yd = _ref322 = FAcounter[b_0][490], _ref323 = list_1.length; _yd < _ref323; idx_1 = _yd += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_ye = 0, _len382 = list_2.length; _ye < _len382; _ye++) {
                tok = list_2[_ye];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][45];
                for (_yf = 0, _len383 = list_3.length; _yf < _len383; _yf++) {
                  tok = list_3[_yf];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hfn_decl_arg_XXX_Hfn_decl_arg_list___u131";
                  mx_hash_stub.hash_key = "fn_decl_arg_list";
                  mx_hash_stub.hash_key_idx = 45;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][490] = list_1.length;
            FAcache[start_pos][278].append(ret_list);
            break;
          case 282:

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 queue */
            chk_len = stack.push([282, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 283;
            }
            break;
          case 283:

            /* rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _yg = _ref324 = FAcounter[b_0][491], _ref325 = list_1.length; _yg < _ref325; idx_1 = _yg += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Hrvalue_bracketless_hashEX1Xbracketless_hash__u147";
              mx_hash_stub.hash_key = "fn_call_arg_list";
              mx_hash_stub.hash_key_idx = 47;
              mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][491] = list_1.length;
            FAcache[start_pos][282].append(ret_list);
            break;
          case 284:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 queue */
            chk_len = stack.push([284, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][24];
            if (state_1 !== STATE_FL) {
              if (request_make(24, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][24];
            for (idx_1 = _yh = _ref326 = FAcounter[b_0][493], _ref327 = list_1.length; _yh < _ref327; idx_1 = _yh += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yi = 0, _len384 = list_2.length; _yi < _len384; _yi++) {
                tok = list_2[_yi];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][47];
                if (state_3 !== STATE_FL) {
                  if (request_make(47, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][47];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 285;
            }
            break;
          case 285:

            /* rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][24];
            for (idx_1 = _yj = _ref328 = FAcounter[b_0][496], _ref329 = list_1.length; _yj < _ref329; idx_1 = _yj += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yk = 0, _len385 = list_2.length; _yk < _len385; _yk++) {
                tok = list_2[_yk];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][47];
                for (_yl = 0, _len386 = list_3.length; _yl < _len386; _yl++) {
                  tok = list_3[_yl];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  if (!(!arg_list[0].mx_hash.bracketless_hash || !arg_list[2].mx_hash.bracketless_hash)) {
                    node.value_array.pop();
                    continue;
                  }
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Hrvalue_XXX_Hfn_call_arg_list_bracketless_hashEX1Xbracketless_hash_XX1Xbracketless_hashXXXX3Xbracketless_hash_u148";
                  mx_hash_stub.hash_key = "fn_call_arg_list";
                  mx_hash_stub.hash_key_idx = 47;
                  mx_hash_stub["bracketless_hash"] = arg_list[0].mx_hash.bracketless_hash;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][496] = list_1.length;
            FAcache[start_pos][284].append(ret_list);
            break;
          case 287:

            /* rule_Htype___u155 queue */
            chk_len = stack.push([287, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][35];
            if (state_1 !== STATE_FL) {
              if (request_make(35, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][35];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 288;
            }
            break;
          case 288:

            /* rule_Htype___u155 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][35];
            for (idx_1 = _ym = _ref330 = FAcounter[b_0][497], _ref331 = list_1.length; _ym < _ref331; idx_1 = _ym += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype___u155";
              mx_hash_stub.hash_key = "type_list";
              mx_hash_stub.hash_key_idx = 48;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][497] = list_1.length;
            FAcache[start_pos][287].append(ret_list);
            break;
          case 289:

            /* rule_Htype_XXX_Htype_list___u156 queue */
            chk_len = stack.push([289, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][35];
            if (state_1 !== STATE_FL) {
              if (request_make(35, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][35];
            for (idx_1 = _yn = _ref332 = FAcounter[b_0][499], _ref333 = list_1.length; _yn < _ref333; idx_1 = _yn += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yo = 0, _len387 = list_2.length; _yo < _len387; _yo++) {
                tok = list_2[_yo];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][48];
                if (state_3 !== STATE_FL) {
                  if (request_make(48, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][48];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 290;
            }
            break;
          case 290:

            /* rule_Htype_XXX_Htype_list___u156 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][35];
            for (idx_1 = _yp = _ref334 = FAcounter[b_0][502], _ref335 = list_1.length; _yp < _ref335; idx_1 = _yp += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yq = 0, _len388 = list_2.length; _yq < _len388; _yq++) {
                tok = list_2[_yq];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][48];
                for (_yr = 0, _len389 = list_3.length; _yr < _len389; _yr++) {
                  tok = list_3[_yr];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_XXX_Htype_list___u156";
                  mx_hash_stub.hash_key = "type_list";
                  mx_hash_stub.hash_key_idx = 48;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][502] = list_1.length;
            FAcache[start_pos][289].append(ret_list);
            break;
          case 292:

            /* rule_XXX_Htype_list_XXX___u157 queue */
            chk_len = stack.push([292, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _ys = _ref336 = FAcounter[b_0][503], _ref337 = list_1.length; _ys < _ref337; idx_1 = _ys += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              state_2 = FAstate[b_1][48];
              if (state_2 !== STATE_FL) {
                if (request_make(48, b_1, 0)) {
                  continue;
                }
              }
              list_2 = FAcache[b_1][48];
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 293;
            }
            break;
          case 293:

            /* rule_XXX_Htype_list_XXX___u157 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _yt = _ref338 = FAcounter[b_0][506], _ref339 = list_1.length; _yt < _ref339; idx_1 = _yt += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "<") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][48];
              for (_yu = 0, _len390 = list_2.length; _yu < _len390; _yu++) {
                tok = list_2[_yu];
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_yv = 0, _len391 = list_3.length; _yv < _len391; _yv++) {
                  tok = list_3[_yv];
                  if (tok.value !== ">") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_list_XXX___u157";
                  mx_hash_stub.hash_key = "type_nest";
                  mx_hash_stub.hash_key_idx = 49;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][506] = list_1.length;
            FAcache[start_pos][292].append(ret_list);
            break;
          case 295:

            /* rule_Htok_identifier_XXX_Htype___u158 queue */
            chk_len = stack.push([295, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][2];
            if (state_1 !== STATE_FL) {
              if (request_make(2, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][2];
            for (idx_1 = _yw = _ref340 = FAcounter[b_0][508], _ref341 = list_1.length; _yw < _ref341; idx_1 = _yw += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yx = 0, _len392 = list_2.length; _yx < _len392; _yx++) {
                tok = list_2[_yx];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][35];
                if (state_3 !== STATE_FL) {
                  if (request_make(35, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][35];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 296;
            }
            break;
          case 296:

            /* rule_Htok_identifier_XXX_Htype___u158 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][2];
            for (idx_1 = _yy = _ref342 = FAcounter[b_0][511], _ref343 = list_1.length; _yy < _ref343; idx_1 = _yy += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_yz = 0, _len393 = list_2.length; _yz < _len393; _yz++) {
                tok = list_2[_yz];
                if (tok.value !== ":") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][35];
                for (_za = 0, _len394 = list_3.length; _za < _len394; _za++) {
                  tok = list_3[_za];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htok_identifier_XXX_Htype___u158";
                  mx_hash_stub.hash_key = "type_field_kv";
                  mx_hash_stub.hash_key_idx = 50;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][511] = list_1.length;
            FAcache[start_pos][295].append(ret_list);
            break;
          case 298:

            /* rule_Htype_field_kv___u159 queue */
            chk_len = stack.push([298, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][50];
            if (state_1 !== STATE_FL) {
              if (request_make(50, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][50];
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 299;
            }
            break;
          case 299:

            /* rule_Htype_field_kv___u159 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][50];
            for (idx_1 = _zb = _ref344 = FAcounter[b_0][512], _ref345 = list_1.length; _zb < _ref345; idx_1 = _zb += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              arg_list = node.value_array;
              mx_hash_stub = node.mx_hash = {};
              mx_hash_stub.rule = "rule_Htype_field_kv___u159";
              mx_hash_stub.hash_key = "type_field_kv_list";
              mx_hash_stub.hash_key_idx = 51;
              node.b = node.value_array.last().b;
              ret_list.push(node.clone());
              node.value_array.pop();
            }
            FAcounter[b_0][512] = list_1.length;
            FAcache[start_pos][298].append(ret_list);
            break;
          case 300:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 queue */
            chk_len = stack.push([300, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            state_1 = FAstate[b_0][50];
            if (state_1 !== STATE_FL) {
              if (request_make(50, b_0, 0)) {
                continue;
              }
            }
            list_1 = FAcache[b_0][50];
            for (idx_1 = _zc = _ref346 = FAcounter[b_0][514], _ref347 = list_1.length; _zc < _ref347; idx_1 = _zc += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_zd = 0, _len395 = list_2.length; _zd < _len395; _zd++) {
                tok = list_2[_zd];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_3 = FAstate[b_2][51];
                if (state_3 !== STATE_FL) {
                  if (request_make(51, b_2, 0)) {
                    continue;
                  }
                }
                list_3 = FAcache[b_2][51];
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 301;
            }
            break;
          case 301:

            /* rule_Htype_field_kv_XXX_Htype_field_kv_list___u160 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][50];
            for (idx_1 = _ze = _ref348 = FAcounter[b_0][517], _ref349 = list_1.length; _ze < _ref349; idx_1 = _ze += 1) {
              tok = list_1[idx_1];
              b_1 = tok.b;
              node.value_array.push(tok);
              if (b_1 >= length) {
                node.value_array.pop();
                continue;
              }
              list_2 = FAcache[b_1][0];
              for (_zf = 0, _len396 = list_2.length; _zf < _len396; _zf++) {
                tok = list_2[_zf];
                if (tok.value !== ",") {
                  continue;
                }
                b_2 = tok.b;
                node.value_array.push(tok);
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][51];
                for (_zg = 0, _len397 = list_3.length; _zg < _len397; _zg++) {
                  tok = list_3[_zg];
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_Htype_field_kv_XXX_Htype_field_kv_list___u160";
                  mx_hash_stub.hash_key = "type_field_kv_list";
                  mx_hash_stub.hash_key_idx = 51;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.pop();
              }
              node.value_array.pop();
            }
            FAcounter[b_0][517] = list_1.length;
            FAcache[start_pos][300].append(ret_list);
            break;
          case 303:

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 queue */
            chk_len = stack.push([303, start_pos, only_new]);
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            list_1 = FAcache[b_0][0];
            for (idx_1 = _zh = _ref350 = FAcounter[b_0][519], _ref351 = list_1.length; _zh < _ref351; idx_1 = _zh += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _zi = 0; _zi < 1; _i_2 = ++_zi) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _zj = 0; _zj < 1; _i_2 = ++_zj) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                state_2 = FAstate[b_1][51];
                if (state_2 !== STATE_FL) {
                  if (request_make(51, b_1, 0)) {
                    continue;
                  }
                }
                list_2 = FAcache[b_1][51];
                for (_zk = 0, _len398 = list_2.length; _zk < _len398; _zk++) {
                  tok = list_2[_zk];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_zl = 0, _len399 = hyp_list_2.length; _zl < _len399; _zl++) {
                tok_list = hyp_list_2[_zl];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            if (chk_len === stack.length) {
              stack[chk_len - 1][0] = 304;
            }
            break;
          case 304:

            /* rule_XXX_Htype_field_kv_listO_XXX___u161 collect */
            ret_list = [];
            b_0 = start_pos;
            node = this.proxy2;
            node.value_array.clear();
            node.a = start_pos;
            list_1 = FAcache[b_0][0];
            for (idx_1 = _zm = _ref352 = FAcounter[b_0][522], _ref353 = list_1.length; _zm < _ref353; idx_1 = _zm += 1) {
              tok = list_1[idx_1];
              if (tok.value !== "{") {
                continue;
              }
              b_1 = tok.b;
              node.value_array.push(tok);
              hyp_list_2 = [];
              old_node = node;
              node = this.proxy;
              for (_i_2 = _zn = 0; _zn < 1; _i_2 = ++_zn) {

                /* NOPE */
                hyp_list_2.push(node.value_array.clone());
              }
              for (_i_2 = _zo = 0; _zo < 1; _i_2 = ++_zo) {
                if (b_1 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_2 = FAcache[b_1][51];
                for (_zp = 0, _len400 = list_2.length; _zp < _len400; _zp++) {
                  tok = list_2[_zp];
                  b_2 = tok.b;
                  node.value_array.push(tok);
                  hyp_list_2.push(node.value_array.clone());
                  node.value_array.pop();
                }
              }
              node = old_node;
              for (_zq = 0, _len401 = hyp_list_2.length; _zq < _len401; _zq++) {
                tok_list = hyp_list_2[_zq];
                node.value_array.append(tok_list);
                b_2 = node.value_array.last().b;
                if (b_2 >= length) {
                  node.value_array.pop();
                  continue;
                }
                list_3 = FAcache[b_2][0];
                for (_zr = 0, _len402 = list_3.length; _zr < _len402; _zr++) {
                  tok = list_3[_zr];
                  if (tok.value !== "}") {
                    continue;
                  }
                  b_3 = tok.b;
                  node.value_array.push(tok);
                  arg_list = node.value_array;
                  mx_hash_stub = node.mx_hash = {};
                  mx_hash_stub.rule = "rule_XXX_Htype_field_kv_listO_XXX___u161";
                  mx_hash_stub.hash_key = "type_field";
                  mx_hash_stub.hash_key_idx = 52;
                  node.b = node.value_array.last().b;
                  ret_list.push(node.clone());
                  node.value_array.pop();
                }
                node.value_array.length -= tok_list.length;
              }
              node.value_array.pop();
            }
            FAcounter[b_0][522] = list_1.length;
            FAcache[start_pos][303].append(ret_list);
        }
      }
    };

    return Parser;

  })();

}).call(this);
